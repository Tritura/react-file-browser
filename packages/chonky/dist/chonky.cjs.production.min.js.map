{"version":3,"file":"chonky.cjs.production.min.js","sources":["../src/util/hooks-helpers.ts","../src/types/sort.types.ts","../src/util/logger.ts","../src/util/file-helper.ts","../src/redux/files-transforms.ts","../src/action-definitions/option-ids.ts","../src/types/file-view.types.ts","../src/types/icons.types.ts","../src/redux/selectors.ts","../src/redux/thunks/file-actions.thunks.ts","../src/redux/thunks/dispatchers.thunks.ts","../src/util/i18n.ts","../src/util/helpers.ts","../src/action-definitions/essential.ts","../src/redux/thunks/index.ts","../src/action-definitions/default.ts","../src/action-definitions/extra.ts","../src/action-definitions/index.ts","../src/redux/state.ts","../src/redux/reducers.ts","../src/redux/store.ts","../src/redux/watchers.ts","../src/components/internal/ChonkyIconPlaceholder.tsx","../src/util/default-config.ts","../src/util/icon-helper.ts","../src/util/styles.ts","../src/components/internal/ChonkyBusinessLogic.tsx","../src/util/file-browser-handle.ts","../src/util/dnd-fallback.ts","../src/components/file-list/DnDFileListDragLayer.tsx","../src/types/dnd.types.ts","../src/components/internal/HotkeyListener.tsx","../src/components/internal/ChonkyPresentationLayer.tsx","../src/components/external/FileContextMenu-hooks.ts","../src/components/external/FileBrowser.tsx","../src/components/external/FileNavbar-hooks.ts","../src/types/action.types.ts","../src/util/dnd.ts","../src/components/external/TextPlaceholder.tsx","../src/components/file-list/FileEntry-hooks.tsx","../src/util/file-actions.ts","../src/components/external/ToolbarButton.tsx","../src/components/external/FolderChainButton.tsx","../src/components/external/FileNavbar.tsx","../src/components/external/ToolbarDropdownButton.tsx","../src/components/external/ToolbarDropdown.tsx","../src/components/external/ToolbarInfo.tsx","../src/components/external/ToolbarSearch.tsx","../src/components/external/FileToolbar.tsx","../src/components/file-list/FileListEmpty.tsx","../src/components/internal/ClickableWrapper.tsx","../src/components/internal/ClickableWrapper-hooks.tsx","../src/components/file-list/FileEntryName.tsx","../src/components/file-list/CompactEntry.tsx","../src/components/file-list/DnDFileEntry.tsx","../src/components/file-list/FileThumbnail.tsx","../src/components/file-list/GridEntryDndIndicator.tsx","../src/components/file-list/GridEntryPreview.tsx","../src/components/file-list/GridEntry.tsx","../src/components/file-list/ListEntry.tsx","../src/components/file-list/FileEntry.tsx","../src/components/file-list/GridContainer.tsx","../src/components/file-list/ListContainer.tsx","../src/components/file-list/FileList.tsx","../src/components/external/FileContextMenu.tsx","../src/components/external/FullFileBrowser.tsx","../src/extensions/file-map.ts"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\nexport const useDebounce = <T>(\n    value: T,\n    delay: number\n): [T, React.Dispatch<React.SetStateAction<T>>] => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n\n    useEffect(() => {\n        const handler = setTimeout(() => {\n            setDebouncedValue(value);\n        }, delay);\n\n        return () => {\n            clearTimeout(handler);\n        };\n    }, [value, delay]);\n\n    return [debouncedValue, setDebouncedValue];\n};\n\nconst UNINITIALIZED_SENTINEL = {};\nexport const useStaticValue = <T>(factory: () => T): T => {\n    const valueRef = useRef<T>(UNINITIALIZED_SENTINEL as T);\n    if (valueRef.current === UNINITIALIZED_SENTINEL) valueRef.current = factory();\n    return valueRef.current;\n};\n\nexport const useInstanceVariable = <T>(value: T) => {\n    const ref = useRef(value);\n    useEffect(() => {\n        ref.current = value;\n    }, [ref, value]);\n    return ref;\n};\n","import { Nullable } from 'tsdef';\n\nimport { FileData } from './file.types';\n\nexport type FileSortKeySelector = (file: Nullable<FileData>) => any;\n\nexport enum SortOrder {\n    ASC = 'asc',\n    DESC = 'desc',\n}\n","export class Logger {\n    public static error(...args: any[]): void {\n        // eslint-disable-next-line no-console\n        console.error('[Chonky runtime error]', ...args);\n    }\n\n    public static warn(...args: any[]): void {\n        // eslint-disable-next-line no-console\n        console.warn('[Chonky runtime warning]', ...args);\n    }\n\n    public static debug(...args: any[]): void {\n        // eslint-disable-next-line no-console\n        console.debug('[Chonky runtime debug]', ...args);\n    }\n\n    public static formatBullets(bullets: string[]): string {\n        return `\\n- ${bullets.join('\\n- ')}`;\n    }\n}\n","import { Nullable } from 'tsdef';\n\nimport { FileData } from '../types/file.types';\nimport { Logger } from './logger';\n\nexport class FileHelper {\n    public static isDirectory(file: Nullable<FileData>): file is FileData {\n        // Not a directory by default\n        return !!file && file.isDir === true;\n    }\n\n    public static isHidden(file: Nullable<FileData>): file is FileData {\n        // Not hidden by default\n        return !!file && file.isHidden === true;\n    }\n\n    public static isSymlink(file: Nullable<FileData>): file is FileData {\n        // Not a symlink by default\n        return !!file && file.isSymlink === true;\n    }\n\n    public static isEncrypted(file: Nullable<FileData>): file is FileData {\n        // Not encrypted by default\n        return !!file && file.isEncrypted === true;\n    }\n\n    public static isClickable(file: Nullable<FileData>): file is FileData {\n        // Clickable by default\n        return !!file;\n    }\n\n    public static isOpenable(file: Nullable<FileData>): file is FileData {\n        // Openable by default\n        return !!file && file.openable !== false;\n    }\n\n    public static isSelectable(file: Nullable<FileData>): file is FileData {\n        // Selectable by default\n        return !!file && file.selectable !== false;\n    }\n\n    public static isDraggable(file: Nullable<FileData>): file is FileData {\n        // File & folders are draggable by default, `null` is not\n        return !!file && file.draggable !== false;\n    }\n\n    public static isDroppable(file: Nullable<FileData>): file is FileData {\n        // Folders are droppable by default, files are not\n        if (!file) return false;\n        if (file.isDir && file.droppable !== false) return true;\n        return file.droppable === true;\n    }\n\n    public static isDndOpenable(file: Nullable<FileData>): file is FileData {\n        // Folders are DnD openable by default, files are not\n        if (!FileHelper.isOpenable(file)) return false;\n        if (file.isDir && file.dndOpenable !== false) return true;\n        return file.dndOpenable === true;\n    }\n\n    public static getModDate(file: Nullable<FileData>): Nullable<Date> {\n        if (!file || file.modDate === null || file.modDate === undefined) return null;\n        return FileHelper.parseDate(file.modDate);\n    }\n\n    public static parseDate(maybeDate: Date | string | any): Nullable<Date> {\n        if (typeof maybeDate === 'string' || typeof maybeDate === 'number') {\n            // We allow users to provide string and numerical representations of dates.\n            try {\n                return new Date(maybeDate);\n            } catch (error) {\n                Logger.error(\n                    `Could not convert provided string/number into a date: ${error.message} `,\n                    'Invalid value:',\n                    maybeDate\n                );\n            }\n        }\n        if (maybeDate instanceof Date && !isNaN(maybeDate.getTime())) {\n            // We only allow valid dates objects\n            return maybeDate;\n        }\n\n        // If we have an invalid date representation, we just return null.\n        Logger.warn('Unsupported date representation:', maybeDate);\n        return null;\n    }\n\n    public static getChildrenCount(file: Nullable<FileData>): Nullable<number> {\n        if (!file || typeof file.childrenCount !== 'number') return null;\n\n        return file.childrenCount;\n    }\n}\n","import { Nullable } from 'tsdef';\n\nimport { FileAction } from '../types/action.types';\nimport { FileArray } from '../types/file.types';\nimport { Logger } from '../util/logger';\n\ninterface SanitizeFiles {\n    (mode: 'files', rawArray: FileArray | any): {\n        sanitizedArray: FileArray;\n        errorMessages: string[];\n    };\n    (mode: 'folderChain', rawArray: Nullable<FileArray> | any): {\n        sanitizedArray: FileArray;\n        errorMessages: string[];\n    };\n    (mode: 'fileActions', rawArray: FileAction[] | any): {\n        sanitizedArray: FileAction[];\n        errorMessages: string[];\n    };\n}\n\nexport const sanitizeInputArray: SanitizeFiles = (mode: string, rawArray: any[]) => {\n    const sanitizedFiles = [];\n    const errorMessages: string[] = [];\n\n    if ((mode === 'folderChain' || mode === 'fileActions') && !rawArray) {\n        // Do nothing, we allow folder chain to be null.\n    } else if (!Array.isArray(rawArray)) {\n        errorMessages.push(\n            `Expected \"${mode}\" prop to be an array, got \"${typeof rawArray}\" instead.`\n        );\n    } else {\n        let nonObjectFileCount = 0;\n        let missingFieldFileCount = 0;\n        const seenIds = new Set<string>();\n        const duplicateIds = new Set<string>();\n\n        for (let i = 0; i < rawArray.length; ++i) {\n            const item = rawArray[i];\n            if (!item) {\n                if (mode === 'fileActions') nonObjectFileCount++;\n                else sanitizedFiles.push(null);\n            } else if (typeof item !== 'object') {\n                nonObjectFileCount++;\n            } else {\n                if (!item.id || (mode !== 'fileActions' && !item.name)) {\n                    missingFieldFileCount++;\n                } else if (seenIds.has(item.id)) {\n                    duplicateIds.add(item.id);\n                } else {\n                    seenIds.add(item.id);\n                    sanitizedFiles.push(item);\n                }\n            }\n        }\n\n        if (nonObjectFileCount) {\n            errorMessages.push(\n                `Detected ${nonObjectFileCount} file(s) of invalid type. Remember ` +\n                    `that \"files\" array should contain either objects or nulls.`\n            );\n        }\n        if (missingFieldFileCount) {\n            errorMessages.push(\n                `Detected ${missingFieldFileCount} file(s) that are missing the ` +\n                    `required fields. Remember that file object should define an ` +\n                    `\"id\" and a \"name\".`\n            );\n        }\n        if (duplicateIds.size > 0) {\n            const repeatedIdsString = '\"' + Array.from(duplicateIds).join('\", \"') + '\"';\n            errorMessages.push(\n                `Detected ${duplicateIds.size} file IDs that are used multiple ` +\n                    `times. Remember that each file should have a unique IDs. The ` +\n                    `following IDs were seen multiple times: ${repeatedIdsString}`\n            );\n        }\n    }\n\n    if (errorMessages.length > 0) {\n        const errorMessageString = '\\n- ' + errorMessages.join('\\n- ');\n        let arrayString: string;\n        let itemString: string;\n        if (mode === 'folderChain') {\n            arrayString = 'folder chain';\n            itemString = 'files';\n        } else if (mode === 'fileActions') {\n            arrayString = 'file actions';\n            itemString = 'file actions';\n        } else {\n            // mode === 'files'\n            arrayString = 'files';\n            itemString = 'files';\n        }\n\n        Logger.error(\n            `Errors were detected when sanitizing the ${arrayString} array. ` +\n                `Offending ${itemString} were removed from the array. Summary of ` +\n                `validation errors: ${errorMessageString}`\n        );\n    }\n\n    return {\n        sanitizedArray: sanitizedFiles,\n        errorMessages,\n    };\n};\n","/**\n * We have option IDs in a separate file to avoid circular deps...\n */\nexport const OptionIds = {\n    ShowHiddenFiles: 'show_hidden_files',\n    ShowFoldersFirst: 'show_folders_first',\n    DarkMode: 'dark_mode',\n};\n","export enum FileViewMode {\n    List = 'list',\n    Compact = 'compact',\n    Grid = 'grid',\n}\n\nexport type FileViewConfigList = {\n    mode: FileViewMode.List;\n    entryHeight: number;\n};\n\nexport type FileViewConfigGrid = {\n    mode: FileViewMode.Compact | FileViewMode.Grid;\n    entryWidth: number;\n    entryHeight: number;\n};\n\nexport type FileViewConfig = FileViewConfigList | FileViewConfigGrid;\n","import React from 'react';\n\nexport enum ChonkyIconName {\n    // Misc\n    loading = 'loading',\n    dropdown = 'dropdown',\n    placeholder = 'placeholder',\n\n    // File Actions: Drag & drop\n    dndDragging = 'dndDragging',\n    dndCanDrop = 'dndCanDrop',\n    dndCannotDrop = 'dndCannotDrop',\n\n    // File Actions: File operations\n    openFiles = 'openFiles',\n    openParentFolder = 'openParentFolder',\n    copy = 'copy',\n    paste = 'paste',\n    share = 'share',\n    search = 'search',\n    selectAllFiles = 'selectAllFiles',\n    clearSelection = 'clearSelection',\n\n    // File Actions: Sorting & options\n    sortAsc = 'sortAsc',\n    sortDesc = 'sortDesc',\n    toggleOn = 'toggleOn',\n    toggleOff = 'toggleOff',\n\n    // File Actions: File Views\n    list = 'list',\n    compact = 'compact',\n    smallThumbnail = 'smallThumbnail',\n    largeThumbnail = 'largeThumbnail',\n\n    // File Actions: Unsorted\n    folder = 'folder',\n    folderCreate = 'folderCreate',\n    folderOpen = 'folderOpen',\n    folderChainSeparator = 'folderChainSeparator',\n    download = 'download',\n    upload = 'upload',\n    trash = 'trash',\n    fallbackIcon = 'fallbackIcon',\n\n    // File modifiers\n    symlink = 'symlink',\n    hidden = 'hidden',\n\n    // Generic file types\n    file = 'file',\n    license = 'license',\n    code = 'code',\n    config = 'config',\n    model = 'model',\n    database = 'database',\n    text = 'text',\n    archive = 'archive',\n    image = 'image',\n    video = 'video',\n    info = 'info',\n    key = 'key',\n    lock = 'lock',\n    music = 'music',\n    terminal = 'terminal',\n    users = 'users',\n\n    // OS file types\n    linux = 'linux',\n    ubuntu = 'ubuntu',\n    windows = 'windows',\n\n    // Programming language file types\n    rust = 'rust',\n    python = 'python',\n    nodejs = 'nodejs',\n    php = 'php',\n\n    // Development tools file types\n    git = 'git',\n\n    // Brands file types\n    adobe = 'adobe',\n\n    // Other program file types\n    pdf = 'pdf',\n    excel = 'excel',\n    word = 'word',\n    flash = 'flash',\n}\n\nexport interface FileIconData {\n    icon: ChonkyIconName | string;\n    colorCode: number;\n}\n\nexport interface ChonkyIconProps {\n    icon: ChonkyIconName | string;\n    spin?: boolean;\n    className?: string;\n    fixedWidth?: boolean;\n    style?: React.CSSProperties;\n}\n","import sort from 'fast-sort';\nimport FuzzySearch from 'fuzzy-search';\nimport { Nilable, Nullable } from 'tsdef';\n\nimport { createSelector } from '@reduxjs/toolkit';\n\nimport { OptionIds } from '../action-definitions/option-ids';\nimport { FileArray, FileData, FileFilter } from '../types/file.types';\nimport { RootState } from '../types/redux.types';\nimport { FileSortKeySelector, SortOrder } from '../types/sort.types';\nimport { FileHelper } from '../util/file-helper';\n\n// Raw selectors\nexport const selectInstanceId = (state: RootState) => state.instanceId;\nexport const selectExternalFileActionHandler = (state: RootState) => state.externalFileActionHandler;\n\nexport const selectFileActionMap = (state: RootState) => state.fileActionMap;\nexport const selectFileActionIds = (state: RootState) => state.fileActionIds;\nexport const selectFileActionData = (fileActionId: string) => (state: RootState) =>\n    selectFileActionMap(state)[fileActionId];\nexport const selectToolbarItems = (state: RootState) => state.toolbarItems;\nexport const selectContextMenuItems = (state: RootState) => state.contextMenuItems;\n\nexport const selectFolderChain = (state: RootState) => state.folderChain;\nexport const selectCurrentFolder = (state: RootState) => {\n    const folderChain = selectFolderChain(state);\n    const currentFolder = folderChain.length > 0 ? folderChain[folderChain.length - 1] : null;\n    return currentFolder;\n};\nexport const selectParentFolder = (state: RootState) => {\n    const folderChain = selectFolderChain(state);\n    const parentFolder = folderChain.length > 1 ? folderChain[folderChain.length - 2] : null;\n    return parentFolder;\n};\n\nexport const selectRawFiles = (state: RootState) => state.rawFiles;\nexport const selectFileMap = (state: RootState) => state.fileMap;\nexport const selectCleanFileIds = (state: RootState) => state.cleanFileIds;\nexport const selectFileData = (fileId: Nullable<string>) => (state: RootState) =>\n    fileId ? selectFileMap(state)[fileId] : null;\n\nexport const selectHiddenFileIdMap = (state: RootState) => state.hiddenFileIdMap;\nexport const selectHiddenFileCount = (state: RootState) => Object.keys(selectHiddenFileIdMap(state)).length;\n\nexport const selectFocusSearchInput = (state: RootState) => state.focusSearchInput;\nexport const selectSearchString = (state: RootState) => state.searchString;\n\nexport const selectSelectionMap = (state: RootState) => state.selectionMap;\nexport const selectSelectedFileIds = (state: RootState) => Object.keys(selectSelectionMap(state));\nexport const selectSelectionSize = (state: RootState) => selectSelectedFileIds(state).length;\nexport const selectIsFileSelected = (fileId: Nullable<string>) => (state: RootState) =>\n    !!fileId && !!selectSelectionMap(state)[fileId];\nexport const selectSelectedFiles = (state: RootState) => {\n    const fileMap = selectFileMap(state);\n    return Object.keys(selectSelectionMap(state)).map(id => fileMap[id]);\n};\nexport const selectSelectedFilesForAction = (fileActionId: string) => (state: RootState) => {\n    const { fileActionMap } = state;\n    const action = fileActionMap[fileActionId];\n    if (!action || !action.requiresSelection) return undefined;\n\n    return getSelectedFiles(state, action.fileFilter);\n};\nexport const selectSelectedFilesForActionCount = (fileActionId: string) => (state: RootState) =>\n    getSelectedFilesForAction(state, fileActionId)?.length;\nexport const selectDisableSelection = (state: RootState) => state.disableSelection;\n\nexport const selectFileViewConfig = (state: RootState) => state.fileViewConfig;\n\nexport const selectSortActionId = (state: RootState) => state.sortActionId;\nexport const selectSortOrder = (state: RootState) => state.sortOrder;\n\nexport const selectOptionMap = (state: RootState) => state.optionMap;\nexport const selectOptionValue = (optionId: string) => (state: RootState) => selectOptionMap(state)[optionId];\n\nexport const selectThumbnailGenerator = (state: RootState) => state.thumbnailGenerator;\nexport const selectDoubleClickDelay = (state: RootState) => state.doubleClickDelay;\nexport const selectIsDnDDisabled = (state: RootState) => state.disableDragAndDrop;\nexport const selectClearSelectionOnOutsideClick = (state: RootState) => state.clearSelectionOnOutsideClick;\n\nexport const selectContextMenuMounted = (state: RootState) => state.contextMenuMounted;\nexport const selectContextMenuConfig = (state: RootState) => state.contextMenuConfig;\nexport const selectContextMenuTriggerFile = (state: RootState) => {\n    const config = selectContextMenuConfig(state);\n    if (!config || !config.triggerFileId) return null;\n    const fileMap = selectFileMap(state);\n    return fileMap[config.triggerFileId] ?? null;\n};\n\n// Raw selectors\nconst getFileActionMap = (state: RootState) => state.fileActionMap;\nconst getOptionMap = (state: RootState) => state.optionMap;\nconst getFileMap = (state: RootState) => state.fileMap;\nconst getFileIds = (state: RootState) => state.fileIds;\nconst getCleanFileIds = (state: RootState) => state.cleanFileIds;\nconst getSortActionId = (state: RootState) => state.sortActionId;\nconst getSortOrder = (state: RootState) => state.sortOrder;\nconst getSearchString = (state: RootState) => state.searchString;\nconst _getLastClick = (state: RootState) => state.lastClick;\n\n// Memoized selectors\nconst makeGetAction = (fileActionSelector: (state: RootState) => Nullable<string>) =>\n    createSelector([getFileActionMap, fileActionSelector], (fileActionMap, fileActionId) =>\n        fileActionId && fileActionMap[fileActionId] ? fileActionMap[fileActionId] : null\n    );\nconst makeGetOptionValue = (optionId: string, defaultValue: any = undefined) =>\n    createSelector([getOptionMap], optionMap => {\n        const value = optionMap[optionId];\n        if (value === undefined) {\n            return defaultValue;\n        }\n        return value;\n    });\nconst makeGetFiles = (fileIdsSelector: (state: RootState) => Nullable<string>[]) =>\n    createSelector(\n        [getFileMap, fileIdsSelector],\n        (fileMap, fileIds): FileArray => fileIds.map(fileId => (fileId && fileMap[fileId] ? fileMap[fileId] : null))\n    );\nconst getSortedFileIds = createSelector(\n    [\n        getFileIds,\n        getSortOrder,\n        makeGetFiles(getFileIds),\n        makeGetAction(getSortActionId),\n        makeGetOptionValue(OptionIds.ShowFoldersFirst, false),\n    ],\n    (fileIds, sortOrder, files, sortAction, showFolderFirst) => {\n        if (!sortAction) {\n            // We allow users to set the sort action ID to `null` if they want to use their\n            // own sorting mechanisms instead of relying on Chonky built-in sort.\n            return fileIds;\n        }\n\n        const prepareSortKeySelector = (selector: FileSortKeySelector) => (file: Nullable<FileData>) => selector(file);\n\n        const sortFunctions: {\n            asc?: (file: FileData) => any;\n            desc?: (file: FileData) => any;\n        }[] = [];\n\n        if (showFolderFirst) {\n            // If option is undefined (relevant actions is not enabled), we don't show\n            // folders first.\n            sortFunctions.push({\n                desc: prepareSortKeySelector(FileHelper.isDirectory),\n            });\n        }\n        if (sortAction.sortKeySelector) {\n            const configKeyName = sortOrder === SortOrder.ASC ? 'asc' : 'desc';\n            sortFunctions.push({\n                [configKeyName]: prepareSortKeySelector(sortAction.sortKeySelector),\n            });\n        }\n        if (sortFunctions.length === 0) return fileIds;\n\n        // We copy the array because `fast-sort` mutates it\n        const sortedFileIds = sort([...files])\n            .by(sortFunctions as any)\n            .map(file => (file ? file.id : null));\n        return sortedFileIds;\n    }\n);\nconst getSearcher = createSelector(\n    [makeGetFiles(getCleanFileIds)],\n    cleanFiles => new FuzzySearch(cleanFiles as FileData[], ['name'], { caseSensitive: false })\n);\nconst getSearchFilteredFileIds = createSelector(\n    [getCleanFileIds, getSearchString, getSearcher],\n    (cleanFileIds, searchString, searcher) =>\n        searchString ? searcher.search(searchString).map(f => f.id) : cleanFileIds\n);\nconst getHiddenFileIdMap = createSelector(\n    [getSearchFilteredFileIds, makeGetFiles(getCleanFileIds), makeGetOptionValue(OptionIds.ShowHiddenFiles)],\n    (searchFilteredFileIds, cleanFiles, showHiddenFiles) => {\n        const searchFilteredFileIdsSet = new Set(searchFilteredFileIds);\n        const hiddenFileIdMap: any = {};\n        cleanFiles.forEach(file => {\n            if (!file) return;\n            else if (!searchFilteredFileIdsSet.has(file.id)) {\n                // Hidden by seach\n                hiddenFileIdMap[file.id] = true;\n            } else if (!showHiddenFiles && FileHelper.isHidden(file)) {\n                // Hidden by options\n                hiddenFileIdMap[file.id] = true;\n            }\n        });\n        return hiddenFileIdMap;\n    }\n);\nconst getDisplayFileIds = createSelector(\n    [getSortedFileIds, getHiddenFileIdMap],\n    /** Returns files that will actually be shown to the user. */\n    (sortedFileIds, hiddenFileIdMap) => sortedFileIds.filter(id => !id || !hiddenFileIdMap[id])\n);\nconst getLastClickIndex = createSelector(\n    [_getLastClick, getSortedFileIds],\n    /** Returns the last click index after ensuring it is actually still valid. */\n    (lastClick, displayFileIds) => {\n        if (\n            !lastClick ||\n            lastClick.index > displayFileIds.length - 1 ||\n            lastClick.fileId != displayFileIds[lastClick.index]\n        ) {\n            return null;\n        }\n        return lastClick.index;\n    }\n);\n\nexport const selectors = {\n    // Raw selectors\n    getFileActionMap,\n    getOptionMap,\n    getFileMap,\n    getFileIds,\n    getCleanFileIds,\n    getSortActionId,\n    getSortOrder,\n    getSearchString,\n    _getLastClick,\n\n    // Memoized selectors\n    getSortedFileIds,\n    getSearcher,\n    getSearchFilteredFileIds,\n    getHiddenFileIdMap,\n    getDisplayFileIds,\n    getLastClickIndex,\n\n    // Parametrized selectors\n    makeGetAction,\n    makeGetOptionValue,\n    makeGetFiles,\n};\n\n// Selectors meant to be used outside of Redux code\nexport const getFileData = (state: RootState, fileId: Nullable<string>) =>\n    fileId ? selectFileMap(state)[fileId] : null;\nexport const getIsFileSelected = (state: RootState, file: FileData) => {\n    // !!! We deliberately don't use `FileHelper.isSelectable` here as we want to\n    //     reflect the state of Redux store accurately.\n    return !!selectSelectionMap(state)[file.id];\n};\nexport const getSelectedFiles = (state: RootState, ...filters: Nilable<FileFilter>[]) => {\n    const { fileMap, selectionMap } = state;\n\n    const selectedFiles = Object.keys(selectionMap).map(id => fileMap[id]);\n    const filteredSelectedFiles = filters.reduce(\n        (prevFiles, filter) => (filter ? prevFiles.filter(filter) : prevFiles),\n        selectedFiles\n    );\n    return filteredSelectedFiles;\n};\nexport const getSelectedFilesForAction = (state: RootState, fileActionId: string) =>\n    selectSelectedFilesForAction(fileActionId)(state);\n","import { Nilable } from 'tsdef';\n\nimport { ChonkyActions, DefaultFileActions, EssentialFileActions } from '../../action-definitions/index';\nimport { FileActionGroup, FileActionMenuItem } from '../../types/action-menus.types';\nimport { FileAction } from '../../types/action.types';\nimport { ChonkyThunk } from '../../types/redux.types';\nimport { SortOrder } from '../../types/sort.types';\nimport { sanitizeInputArray } from '../files-transforms';\nimport { reduxActions } from '../reducers';\nimport { selectCleanFileIds, selectFileMap, selectHiddenFileIdMap, selectSelectionMap } from '../selectors';\n\n/**\n * Merges multiple file action arrays into one while removing duplicates\n */\nconst mergeFileActionsArrays = (...fileActionArrays: FileAction[][]): FileAction[] => {\n    const seenActionIds = new Set<string>();\n    const addToSeen = (a: FileAction) => !!seenActionIds.add(a.id);\n    const wasNotSeen = (a: FileAction) => !seenActionIds.has(a.id);\n\n    const duplicateFreeArrays = fileActionArrays.map(arr => {\n        const duplicateFreeArray = arr.filter(wasNotSeen);\n        duplicateFreeArray.map(addToSeen);\n        return duplicateFreeArray;\n    });\n    return new Array<FileAction>().concat(...duplicateFreeArrays);\n};\n\nexport const thunkUpdateRawFileActions = (\n    rawFileActions: FileAction[] | any,\n    disableDefaultFileActions: Nilable<boolean | string[]>\n): ChonkyThunk => dispatch => {\n    const { sanitizedArray, errorMessages } = sanitizeInputArray('fileActions', rawFileActions);\n\n    // Add default actions unless user disabled them\n    let defaultActionsToAdd: FileAction[];\n    if (Array.isArray(disableDefaultFileActions)) {\n        const disabledActionIds = new Set(disableDefaultFileActions);\n        defaultActionsToAdd = DefaultFileActions.filter(action => !disabledActionIds.has(action.id));\n    } else if (disableDefaultFileActions) {\n        defaultActionsToAdd = [];\n    } else {\n        defaultActionsToAdd = DefaultFileActions;\n    }\n\n    const fileActions = mergeFileActionsArrays(sanitizedArray, EssentialFileActions, defaultActionsToAdd);\n    const optionDefaults: any = {};\n    fileActions.map(a => (a.option ? (optionDefaults[a.option.id] = a.option.defaultValue) : null));\n\n    dispatch(reduxActions.setRawFileActions(rawFileActions));\n    dispatch(reduxActions.setFileActionsErrorMessages(errorMessages));\n    dispatch(reduxActions.setFileActions(fileActions));\n    dispatch(reduxActions.setOptionDefaults(optionDefaults));\n    dispatch(thunkUpdateToolbarNContextMenuItems(fileActions));\n};\n\nexport const thunkUpdateToolbarNContextMenuItems = (fileActions: FileAction[]): ChonkyThunk => dispatch => {\n    const excludedToolbarFileActionIds = new Set<string>([\n        // TODO: Move decision to exclude actions somewhere else, as users' custom\n        //  components might not give these actions special treatment like Chonky does.\n        ChonkyActions.OpenParentFolder.id,\n    ]);\n\n    type SeenGroupMap = { [groupName: string]: FileActionGroup };\n\n    const toolbarItems: FileActionMenuItem[] = [];\n    const seenToolbarGroups: SeenGroupMap = {};\n\n    const contextMenuItems: FileActionMenuItem[] = [];\n    const seenContextMenuGroups: SeenGroupMap = {};\n\n    const getGroup = (itemArray: FileActionMenuItem[], seenMap: SeenGroupMap, groupName: string): FileActionGroup => {\n        if (seenMap[groupName]) return seenMap[groupName];\n        const group: FileActionGroup = { name: groupName, fileActionIds: [] };\n        itemArray.push(group);\n        seenMap[groupName] = group;\n        return group;\n    };\n\n    for (const action of fileActions) {\n        const button = action.button;\n        if (!button) continue;\n\n        if (button.toolbar && !excludedToolbarFileActionIds.has(action.id)) {\n            if (button.group) {\n                const group = getGroup(toolbarItems, seenToolbarGroups, button.group);\n                group.fileActionIds.push(action.id);\n            } else {\n                toolbarItems.push(action.id);\n            }\n        }\n\n        if (button.contextMenu) {\n            if (button.group) {\n                const group = getGroup(contextMenuItems, seenContextMenuGroups, button.group);\n                group.fileActionIds.push(action.id);\n            } else {\n                contextMenuItems.push(action.id);\n            }\n        }\n    }\n\n    dispatch(reduxActions.updateFileActionMenuItems([toolbarItems, contextMenuItems]));\n};\n\nexport const thunkUpdateDefaultFileViewActionId = (fileActionId: Nilable<string>): ChonkyThunk => (\n    dispatch,\n    getState\n) => {\n    const { fileActionMap } = getState();\n    const action = fileActionId ? fileActionMap[fileActionId] : null;\n    if (action && action.fileViewConfig) {\n        dispatch(reduxActions.setFileViewConfig(action.fileViewConfig));\n    }\n};\n\nexport const thunkActivateSortAction = (fileActionId: Nilable<string>): ChonkyThunk => (dispatch, getState) => {\n    if (!fileActionId) return;\n\n    const { sortActionId: oldActionId, sortOrder: oldOrder, fileActionMap } = getState();\n    const action = fileActionMap[fileActionId];\n    if (!action || !action.sortKeySelector) return;\n\n    let order = oldOrder === SortOrder.ASC ? SortOrder.DESC : SortOrder.ASC;\n    if (oldActionId !== fileActionId) {\n        order = SortOrder.ASC;\n    }\n\n    dispatch(reduxActions.setSort({ actionId: fileActionId, order: order }));\n};\n\nexport const thunkApplySelectionTransform = (action: FileAction): ChonkyThunk => (dispatch, getState) => {\n    const selectionTransform = action.selectionTransform;\n    if (!selectionTransform) return;\n\n    const state = getState();\n    const prevSelection = new Set<string>(Object.keys(selectSelectionMap(state)));\n    const hiddenFileIds = new Set<string>(Object.keys(selectHiddenFileIdMap(state)));\n\n    const newSelection = selectionTransform({\n        prevSelection,\n        fileIds: selectCleanFileIds(state),\n        fileMap: selectFileMap(state),\n        hiddenFileIds,\n    });\n    if (!newSelection) return;\n\n    if (newSelection.size === 0) {\n        dispatch(reduxActions.clearSelection());\n    } else {\n        dispatch(reduxActions.selectFiles({ fileIds: Array.from(newSelection), reset: true }));\n    }\n};\n","import { MaybePromise, Undefinable } from 'tsdef';\n\nimport { FileActionData, FileActionState } from '../../types/action-handler.types';\nimport { FileAction } from '../../types/action.types';\nimport { ChonkyDispatch, ChonkyThunk } from '../../types/redux.types';\nimport { Logger } from '../../util/logger';\nimport { reduxActions } from '../reducers';\nimport {\n    selectContextMenuTriggerFile, selectExternalFileActionHandler, selectFileActionMap,\n    selectInstanceId, selectSelectedFiles\n} from '../selectors';\nimport { thunkActivateSortAction, thunkApplySelectionTransform } from './file-actions.thunks';\n\n/**\n * Thunk that dispatches actions to the external (user-provided) action handler.\n */\nexport const thunkDispatchFileAction = (data: FileActionData<FileAction>): ChonkyThunk => (_dispatch, getState) => {\n    Logger.debug(`FILE ACTION DISPATCH: [${data.id}]`, 'data:', data);\n    const state = getState();\n    const action = selectFileActionMap(state)[data.id];\n    const externalFileActionHandler = selectExternalFileActionHandler(state);\n    if (action) {\n        if (externalFileActionHandler) {\n            Promise.resolve(externalFileActionHandler(data)).catch(error =>\n                Logger.error(`User-defined file action handler threw an error: ${error.message}`)\n            );\n        }\n    } else {\n        Logger.warn(\n            `Internal components dispatched the \"${data.id}\" file action, but such ` + `action was not registered.`\n        );\n    }\n};\n\n/**\n * Thunk that is used by internal components (and potentially the user) to \"request\"\n * actions. When action is requested, Chonky \"prepares\" the action data by extracting it\n * from Redux state. Once action data is ready, Chonky executes some side effect and/or\n * dispatches the action to the external action handler.\n */\nexport const thunkRequestFileAction = <Action extends FileAction>(\n    action: Action,\n    payload: Action['__payloadType']\n): ChonkyThunk => (dispatch, getState) => {\n    Logger.debug(`FILE ACTION REQUEST: [${action.id}]`, 'action:', action, 'payload:', payload);\n    const state = getState();\n    const instanceId = selectInstanceId(state);\n\n    if (!selectFileActionMap(state)[action.id]) {\n        Logger.warn(\n            `The action \"${action.id}\" was requested, but it is not registered. The ` +\n                `action will still be dispatched, but this might indicate a bug in ` +\n                `the code. Please register your actions by passing them to ` +\n                `\"fileActions\" prop.`\n        );\n    }\n\n    // Determine files for the action if action requires selection\n    const selectedFiles = selectSelectedFiles(state);\n    const selectedFilesForAction = action.fileFilter ? selectedFiles.filter(action.fileFilter) : selectedFiles;\n    if (action.requiresSelection && selectedFilesForAction.length === 0) {\n        Logger.warn(\n            `Internal components requested the \"${action.id}\" file ` +\n                `action, but the selection for this action was empty. This ` +\n                `might a bug in the code of the presentational components.`\n        );\n        return;\n    }\n\n    const contextMenuTriggerFile = selectContextMenuTriggerFile(state);\n    const actionState: FileActionState<{}> = {\n        instanceId,\n        selectedFiles,\n        selectedFilesForAction,\n        contextMenuTriggerFile,\n    };\n\n    // === Update sort state if necessary\n    const sortKeySelector = action.sortKeySelector;\n    if (sortKeySelector) dispatch(thunkActivateSortAction(action.id));\n\n    // === Update file view state if necessary\n    const fileViewConfig = action.fileViewConfig;\n    if (fileViewConfig) dispatch(reduxActions.setFileViewConfig(fileViewConfig));\n\n    // === Update option state if necessary\n    const option = action.option;\n    if (option) dispatch(reduxActions.toggleOption(option.id));\n\n    // === Apply selection transform if necessary\n    const selectionTransform = action.selectionTransform;\n    if (selectionTransform) dispatch(thunkApplySelectionTransform(action));\n\n    // Apply the effect\n    const effect = action.effect;\n    let maybeEffectPromise: MaybePromise<boolean | undefined> = undefined;\n    if (effect) {\n        try {\n            maybeEffectPromise = effect({\n                action,\n                payload,\n                state: actionState,\n                reduxDispatch: dispatch,\n                getReduxState: getState,\n            }) as MaybePromise<boolean | undefined>;\n        } catch (error) {\n            Logger.error(`User-defined effect function for action ${action.id} threw an ` + `error: ${error.message}`);\n        }\n    }\n\n    // Dispatch the action to user code. Deliberately call it after all other\n    // operations are over.\n    return Promise.resolve(maybeEffectPromise)\n        .then(effectResult => {\n            const data: FileActionData<Action> = {\n                id: action.id,\n                action,\n                payload,\n                state: actionState,\n            };\n            triggerDispatchAfterEffect(dispatch, data, effectResult);\n        })\n        .catch(error => {\n            Logger.error(\n                `User-defined effect function for action ${action.id} returned a ` +\n                    `promise that was rejected: ${error.message}`\n            );\n            const data: FileActionData<Action> = {\n                id: action.id,\n                action,\n                payload,\n                state: actionState,\n            };\n            triggerDispatchAfterEffect(dispatch, data, undefined);\n        });\n};\n\nexport const triggerDispatchAfterEffect = <Action extends FileAction>(\n    dispatch: ChonkyDispatch,\n    data: FileActionData<Action>,\n    effectResult: Undefinable<boolean>\n) => {\n    const preventDispatch = effectResult === true;\n    if (!preventDispatch) dispatch(thunkDispatchFileAction(data));\n};\n","import filesize from 'filesize';\nimport { createContext, useContext, useMemo } from 'react';\nimport { IntlShape, useIntl } from 'react-intl';\nimport { Nullable, Undefinable } from 'tsdef';\n\nimport { FileAction } from '../types/action.types';\nimport { FileData } from '../types/file.types';\nimport { ChonkyFormatters } from '../types/i18n.types';\nimport { FileHelper } from './file-helper';\n\nexport enum I18nNamespace {\n    Toolbar = 'toolbar',\n    FileList = 'fileList',\n    FileEntry = 'fileEntry',\n    FileContextMenu = 'contextMenu',\n\n    FileActions = 'actions',\n    FileActionGroups = 'actionGroups',\n}\n\nexport const getI18nId = (namespace: I18nNamespace, stringId: string): string =>\n    `chonky.${namespace}.${stringId}`;\n\nexport const getActionI18nId = (actionId: string, stringId: string): string =>\n    `chonky.${I18nNamespace.FileActions}.${actionId}.${stringId}`;\n\nexport const useLocalizedFileActionGroup = (groupName: string) => {\n    const intl = useIntl();\n    return useMemo(() => {\n        return intl.formatMessage({\n            id: getI18nId(I18nNamespace.FileActionGroups, groupName),\n            defaultMessage: groupName,\n        });\n    }, [groupName, intl]);\n};\n\nexport const useLocalizedFileActionStrings = (action: Nullable<FileAction>) => {\n    const intl = useIntl();\n    return useMemo(() => {\n        if (!action) {\n            return {\n                buttonName: '',\n                buttonTooltip: undefined,\n            };\n        }\n\n        const buttonName = intl.formatMessage({\n            id: getActionI18nId(action.id, 'button.name'),\n            defaultMessage: action.button?.name,\n        });\n\n        let buttonTooltip: Undefinable<string> = undefined;\n        if (action.button?.tooltip) {\n            // We only translate the tooltip if the original action has a tooltip.\n            buttonTooltip = intl.formatMessage({\n                id: getActionI18nId(action.id, 'button.tooltip'),\n                defaultMessage: action.button?.tooltip,\n            });\n        }\n\n        return {\n            buttonName,\n            buttonTooltip,\n        };\n    }, [action, intl]);\n};\n\nexport const useLocalizedFileEntryStrings = (file: Nullable<FileData>) => {\n    const intl = useIntl();\n    const formatters = useContext(ChonkyFormattersContext);\n    return useMemo(() => {\n        return {\n            fileModDateString: formatters.formatFileModDate(intl, file),\n            fileSizeString: formatters.formatFileSize(intl, file),\n        };\n    }, [file, formatters, intl]);\n};\n\nexport const defaultFormatters: ChonkyFormatters = {\n    formatFileModDate: (\n        intl: IntlShape,\n        file: Nullable<FileData>\n    ): Nullable<string> => {\n        const safeModDate = FileHelper.getModDate(file);\n        if (safeModDate) {\n            return intl.formatDate(safeModDate, {\n                dateStyle: 'medium',\n                timeStyle: 'short',\n            } as Intl.DateTimeFormatOptions);\n        } else {\n            return null;\n        }\n    },\n    formatFileSize: (_intl: IntlShape, file: Nullable<FileData>): Nullable<string> => {\n        if (!file || typeof file.size !== 'number') return null;\n\n        const size = file.size;\n        const sizeData = filesize(size, { bits: false, output: 'object' }) as any;\n        if (sizeData.symbol === 'B') {\n            return `${Math.round(sizeData.value / 10) / 100.0} KB`;\n        } else if (sizeData.symbol === 'KB') {\n            return `${Math.round(sizeData.value)} ${sizeData.symbol}`;\n        }\n        return `${sizeData.value} ${sizeData.symbol}`;\n    },\n};\n\nexport const ChonkyFormattersContext = createContext(defaultFormatters);\n","// Used in React hooks to indicate empty deps are intentional.\nimport { MaybePromise, Nullable, WritableProps } from 'tsdef';\n\nimport { FileAction, FileActionEffect } from '../types/action.types';\nimport { Logger } from './logger';\n\n// Used in contexts that need to provide some default value for a function.\n// eslint-disable-next-line no-unused-vars,@typescript-eslint/no-unused-vars\nexport const NOOP_FUNCTION = (...args: any[]) => {\n    Logger.warn(\n        `The \"NOOP_FUNCTION\" from the constants module was called. ` +\n            `This can indicate a bug in one of the components. Supplied args:`,\n        args\n    );\n};\n\nexport const isPromise = <T>(value: MaybePromise<T> | any): value is Promise<T> => {\n    if (typeof value !== 'object' || !value) return false;\n    const then = (value as Promise<T>).then;\n    return then && typeof then === 'function';\n};\n\nexport const defineFileAction = <Action extends FileAction>(\n    action: Action,\n    effect?: FileActionEffect<FileAction>\n): WritableProps<Action> => {\n    if (action.__payloadType !== undefined && (action.hotkeys || action.button)) {\n        const errorMessage =\n            `Invalid definition was provided for file action \"${action.id}\". Actions ` +\n            `that specify hotkeys or buttons cannot define a payload type. If ` +\n            `your application requires this functionality, define two actions ` +\n            `and chain them using effects.`;\n        Logger.error(errorMessage);\n        throw new Error(errorMessage);\n    }\n\n    action.effect = effect;\n    return action;\n};\n\n/**\n * Recursively check the current element and the parent elements, going bottom-up.\n * Returns the first element to match the predicate, otherwise returns null if such\n * element is not found.\n */\nexport const findElementAmongAncestors = (\n    maybeElement: HTMLElement | any,\n    predicate: (maybeElement: HTMLElement | any) => boolean\n): Nullable<HTMLElement> => {\n    if (!maybeElement) return maybeElement;\n\n    if (predicate(maybeElement)) return maybeElement;\n\n    if (maybeElement.parentElement) {\n        return findElementAmongAncestors(maybeElement.parentElement, predicate);\n    }\n\n    return null;\n};\n\nexport const elementIsInsideButton = (buttonCandidate: HTMLElement | any): boolean => {\n    return !!findElementAmongAncestors(\n        buttonCandidate,\n        (element: any) => element.tagName && element.tagName.toLowerCase() === 'button'\n    );\n};\n\nexport const getValueOrFallback = <T extends any>(\n    value: T | undefined,\n    fallback: T,\n    desiredType?: 'boolean' | 'string' | 'number'\n): NonNullable<T> => {\n    if (desiredType) {\n        return (typeof value === desiredType ? value : fallback) as NonNullable<T>;\n    }\n    return (value !== undefined ? value : fallback) as NonNullable<T>;\n};\n","import { reduxActions } from '../redux/reducers';\nimport {\n    getFileData, getIsFileSelected, selectDisableSelection, selectors, selectParentFolder,\n    selectSelectionSize\n} from '../redux/selectors';\nimport { reduxThunks } from '../redux/thunks';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport {\n    ChangeSelectionPayload, EndDragNDropPayload, KeyboardClickFilePayload, MouseClickFilePayload,\n    MoveFilesPayload, OpenFileContextMenuPayload, OpenFilesPayload, StartDragNDropPayload\n} from '../types/action-payloads.types';\nimport { ChonkyIconName } from '../types/icons.types';\nimport { FileHelper } from '../util/file-helper';\nimport { defineFileAction } from '../util/helpers';\nimport { Logger } from '../util/logger';\nimport { ChonkyActions } from './index';\n\nexport const EssentialActions = {\n    /**\n     * Action that is dispatched when the user clicks on a file entry using their mouse.\n     * Both single clicks and double clicks trigger this action.\n     */\n    MouseClickFile: defineFileAction(\n        {\n            id: 'mouse_click_file',\n            __payloadType: {} as MouseClickFilePayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            if (payload.clickType === 'double') {\n                if (FileHelper.isOpenable(payload.file)) {\n                    reduxDispatch(\n                        thunkRequestFileAction(ChonkyActions.OpenFiles, {\n                            targetFile: payload.file,\n\n                            // To simulate Windows Explorer and Nautilus behaviour,\n                            // a double click on a file only opens that file even if\n                            // there is a selection.\n                            files: [payload.file],\n                        })\n                    );\n                }\n            } else {\n                // We're dealing with a single click\n\n                const disableSelection = selectDisableSelection(getReduxState());\n                if (FileHelper.isSelectable(payload.file) && !disableSelection) {\n                    if (payload.ctrlKey) {\n                        // Multiple selection\n                        reduxDispatch(\n                            reduxActions.toggleSelection({\n                                fileId: payload.file.id,\n                                exclusive: false,\n                            })\n                        );\n                        reduxDispatch(\n                            reduxActions.setLastClickIndex({\n                                index: payload.fileDisplayIndex,\n                                fileId: payload.file.id,\n                            })\n                        );\n                    } else if (payload.shiftKey) {\n                        // Range selection\n                        const lastClickIndex = selectors.getLastClickIndex(getReduxState());\n                        if (typeof lastClickIndex === 'number') {\n                            // We have the index of the previous click\n                            let rangeStart = lastClickIndex;\n                            let rangeEnd = payload.fileDisplayIndex;\n                            if (rangeStart > rangeEnd) {\n                                [rangeStart, rangeEnd] = [rangeEnd, rangeStart];\n                            }\n\n                            reduxDispatch(reduxThunks.selectRange({ rangeStart, rangeEnd }));\n                        } else {\n                            // Since we can't do a range selection, do a\n                            // multiple selection\n                            reduxDispatch(\n                                reduxActions.toggleSelection({\n                                    fileId: payload.file.id,\n                                    exclusive: false,\n                                })\n                            );\n                            reduxDispatch(\n                                reduxActions.setLastClickIndex({\n                                    index: payload.fileDisplayIndex,\n                                    fileId: payload.file.id,\n                                })\n                            );\n                        }\n                    } else {\n                        // Exclusive selection\n                        reduxDispatch(\n                            reduxActions.toggleSelection({\n                                fileId: payload.file.id,\n                                exclusive: true,\n                            })\n                        );\n                        reduxDispatch(\n                            reduxActions.setLastClickIndex({\n                                index: payload.fileDisplayIndex,\n                                fileId: payload.file.id,\n                            })\n                        );\n                    }\n                } else {\n                    if (!payload.ctrlKey && !disableSelection) {\n                        reduxDispatch(reduxActions.clearSelection());\n                    }\n                    reduxDispatch(\n                        reduxActions.setLastClickIndex({\n                            index: payload.fileDisplayIndex,\n                            fileId: payload.file.id,\n                        })\n                    );\n                }\n            }\n        }\n    ),\n    /**\n     * Action that is dispatched when the user \"clicks\" on a file using their keyboard.\n     * Using Space and Enter keys counts as clicking.\n     */\n    KeyboardClickFile: defineFileAction(\n        {\n            id: 'keyboard_click_file',\n            __payloadType: {} as KeyboardClickFilePayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            reduxDispatch(\n                reduxActions.setLastClickIndex({\n                    index: payload.fileDisplayIndex,\n                    fileId: payload.file.id,\n                })\n            );\n            if (payload.enterKey) {\n                // We only dispatch the Open Files action here when the selection is\n                // empty. Otherwise, `Enter` key presses are handled by the\n                // hotkey manager for the Open Files action.\n                if (selectSelectionSize(getReduxState()) === 0) {\n                    reduxDispatch(\n                        thunkRequestFileAction(ChonkyActions.OpenFiles, {\n                            targetFile: payload.file,\n                            files: [payload.file],\n                        })\n                    );\n                }\n            } else if (payload.spaceKey && FileHelper.isSelectable(payload.file)) {\n                reduxDispatch(\n                    reduxActions.toggleSelection({\n                        fileId: payload.file.id,\n                        exclusive: payload.ctrlKey,\n                    })\n                );\n            }\n        }\n    ),\n    /**\n     * Action that is dispatched when user starts dragging some file.\n     */\n    StartDragNDrop: defineFileAction(\n        {\n            id: 'start_drag_n_drop',\n            __payloadType: {} as StartDragNDropPayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            const file = payload.draggedFile;\n            if (!getIsFileSelected(getReduxState(), file)) {\n                if (FileHelper.isSelectable(file)) {\n                    reduxDispatch(\n                        reduxActions.selectFiles({\n                            fileIds: [file.id],\n                            reset: true,\n                        })\n                    );\n                }\n            }\n        }\n    ),\n    /**\n     * Action that is dispatched when user either cancels the drag & drop interaction,\n     * or drops a file somewhere.\n     */\n    EndDragNDrop: defineFileAction(\n        {\n            id: 'end_drag_n_drop',\n            __payloadType: {} as EndDragNDropPayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            if (getIsFileSelected(getReduxState(), payload.destination)) {\n                // Can't drop a selection into itself\n                return;\n            }\n\n            const { draggedFile, selectedFiles } = payload as EndDragNDropPayload;\n            const droppedFiles = selectedFiles.length > 0 ? selectedFiles : [draggedFile];\n            reduxDispatch(\n                thunkRequestFileAction(ChonkyActions.MoveFiles, {\n                    ...payload,\n                    files: droppedFiles,\n                })\n            );\n        }\n    ),\n    /**\n     * Action that is dispatched when user moves files from one folder to another,\n     * usually by dragging & dropping some files into the folder.\n     */\n    MoveFiles: defineFileAction({\n        id: 'move_files',\n        __payloadType: {} as MoveFilesPayload,\n    } as const),\n    /**\n     * Action that is dispatched when the selection changes for any reason.\n     */\n    ChangeSelection: defineFileAction({\n        id: 'change_selection',\n        __payloadType: {} as ChangeSelectionPayload,\n    } as const),\n    /**\n     * Action that is dispatched when user wants to open some files. This action is\n     * often triggered by other actions.\n     */\n    OpenFiles: defineFileAction({\n        id: 'open_files',\n        __payloadType: {} as OpenFilesPayload,\n    } as const),\n    /**\n     * Action that is triggered when user wants to go up a directory.\n     */\n    OpenParentFolder: defineFileAction(\n        {\n            id: 'open_parent_folder',\n            hotkeys: ['backspace'],\n            button: {\n                name: 'Go up a directory',\n                toolbar: true,\n                contextMenu: false,\n                icon: ChonkyIconName.openParentFolder,\n                iconOnly: true,\n            },\n        } as const,\n        ({ reduxDispatch, getReduxState }) => {\n            const parentFolder = selectParentFolder(getReduxState());\n            if (FileHelper.isOpenable(parentFolder)) {\n                reduxDispatch(\n                    thunkRequestFileAction(ChonkyActions.OpenFiles, {\n                        targetFile: parentFolder,\n                        files: [parentFolder],\n                    })\n                );\n            } else {\n                Logger.warn(\n                    'Open parent folder effect was triggered  even though the parent folder' +\n                        ' is not openable. This indicates a bug in presentation components.'\n                );\n            }\n        }\n    ),\n    /**\n     * Action that is dispatched when user opens the context menu, either by right click\n     * on something or using the context menu button on their keyboard.\n     */\n    OpenFileContextMenu: defineFileAction(\n        {\n            id: 'open_file_context_menu',\n            __payloadType: {} as OpenFileContextMenuPayload,\n        } as const,\n        ({ payload, reduxDispatch, getReduxState }) => {\n            // TODO: Check if the context menu component is actually enabled. There is a\n            //  chance it doesn't matter if it is enabled or not - if it is not mounted,\n            //  the action will simply have no effect. It also allows users to provide\n            //  their own components - however, users could also flip the \"context menu\n            //  component mounted\" switch...\n            const triggerFile = getFileData(getReduxState(), payload.triggerFileId);\n            if (triggerFile) {\n                const fileSelected = getIsFileSelected(getReduxState(), triggerFile);\n                if (!fileSelected) {\n                    // If file is selected, we leave the selection as is. If it is not\n                    // selected, it means user right clicked the file with no selection.\n                    // We simulate the Windows Explorer/Nautilus behaviour of moving\n                    // selection to this file.\n                    if (FileHelper.isSelectable(triggerFile)) {\n                        reduxDispatch(\n                            reduxActions.selectFiles({\n                                fileIds: [payload.triggerFileId],\n                                reset: true,\n                            })\n                        );\n                    } else {\n                        reduxDispatch(reduxActions.clearSelection());\n                    }\n                }\n            }\n\n            reduxDispatch(\n                reduxActions.showContextMenu({\n                    triggerFileId: payload.triggerFileId,\n                    mouseX: payload.clientX - 2,\n                    mouseY: payload.clientY - 4,\n                })\n            );\n        }\n    ),\n};\n","import { ChonkyThunk } from '../../types/redux.types';\nimport { FileHelper } from '../../util/file-helper';\nimport { reduxActions } from '../reducers';\nimport { selectors } from '../selectors';\n\nexport const reduxThunks = {\n    selectRange: (params: {\n        rangeStart: number;\n        rangeEnd: number;\n        reset?: boolean;\n    }): ChonkyThunk => (dispatch, getState) => {\n        const state = getState();\n        if (state.disableSelection) return;\n        const displayFileIds = selectors.getDisplayFileIds(state);\n        const fileIdsToSelect = displayFileIds\n            .slice(params.rangeStart, params.rangeEnd + 1)\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id])) as string[];\n        dispatch(\n            reduxActions.selectFiles({\n                fileIds: fileIdsToSelect,\n                reset: !!params.reset,\n            })\n        );\n    },\n};\n","import { Nullable } from 'tsdef';\n\nimport { selectFocusSearchInput } from '../redux/selectors';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport { FileSelectionTransform } from '../types/action.types';\nimport { FileViewMode } from '../types/file-view.types';\nimport { FileData } from '../types/file.types';\nimport { ChonkyIconName } from '../types/icons.types';\nimport { FileHelper } from '../util/file-helper';\nimport { defineFileAction } from '../util/helpers';\nimport { EssentialActions } from './essential';\nimport { OptionIds } from './option-ids';\n\nexport const DefaultActions = {\n    /**\n     * Action that can be used to open currently selected files.\n     */\n    OpenSelection: defineFileAction(\n        {\n            id: 'open_selection',\n            hotkeys: ['enter'],\n            requiresSelection: true,\n            fileFilter: FileHelper.isOpenable,\n            button: {\n                name: 'Open selection',\n                toolbar: true,\n                contextMenu: true,\n                group: 'Actions',\n                icon: ChonkyIconName.openFiles,\n            },\n        } as const,\n        ({ state, reduxDispatch }) => {\n            reduxDispatch(\n                thunkRequestFileAction(EssentialActions.OpenFiles, {\n                    files: state.selectedFilesForAction!,\n                })\n            );\n            return undefined;\n        }\n    ),\n    /**\n     * Action that selects all files.\n     */\n    SelectAllFiles: defineFileAction({\n        id: 'select_all_files',\n        hotkeys: ['ctrl+a'],\n        button: {\n            name: 'Select all files',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.selectAllFiles,\n        },\n        selectionTransform: (({ fileIds, hiddenFileIds }) => {\n            const newSelection = new Set<string>();\n            fileIds.map(fileId => {\n                // We don't need to check if file is selectable because Chonky does\n                // it own checks internally.\n                if (!hiddenFileIds.has(fileId)) newSelection.add(fileId);\n            });\n            return newSelection;\n        }) as FileSelectionTransform,\n    } as const),\n    /**\n     * Action that clear the file selection.\n     */\n    ClearSelection: defineFileAction({\n        id: 'clear_selection',\n        hotkeys: ['escape'],\n        button: {\n            name: 'Clear selection',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.clearSelection,\n        },\n        selectionTransform: (({ prevSelection }) => {\n            if (prevSelection.size === 0) return null;\n            return new Set<string>();\n        }) as FileSelectionTransform,\n    } as const),\n    /**\n     * Action that enables List view.\n     */\n    EnableListView: defineFileAction({\n        id: 'enable_list_view',\n        fileViewConfig: {\n            mode: FileViewMode.List,\n            entryHeight: 30,\n        },\n        button: {\n            name: 'Switch to List view',\n            toolbar: true,\n            icon: ChonkyIconName.list,\n            iconOnly: true,\n        },\n    } as const),\n    /**\n     * Action that enables Compact view. Note that compact view is still\n     * experimental and should not be used in production.\n     */\n    EnableCompactView: defineFileAction({\n        // TODO: Don't enable until compact view is fully supported\n        id: 'enable_compact_view',\n        fileViewConfig: {\n            mode: FileViewMode.Compact,\n            entryHeight: 40,\n            entryWidth: 220,\n        },\n        button: {\n            name: 'Switch to Compact view',\n            toolbar: true,\n            icon: ChonkyIconName.compact,\n            iconOnly: true,\n        },\n    } as const),\n    /**\n     * Action that enables Grid view.\n     */\n    EnableGridView: defineFileAction({\n        id: 'enable_grid_view',\n        fileViewConfig: { mode: FileViewMode.Grid, entryWidth: 165, entryHeight: 130 },\n        button: {\n            name: 'Switch to Grid view',\n            toolbar: true,\n            icon: ChonkyIconName.smallThumbnail,\n            iconOnly: true,\n        },\n    } as const),\n    /**\n     * Action that sorts files by `file.name`.\n     */\n    SortFilesByName: defineFileAction({\n        id: 'sort_files_by_name',\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.name.toLowerCase() : undefined),\n        button: {\n            name: 'Sort by name',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that sorts files by `file.size`.\n     */\n    SortFilesBySize: defineFileAction({\n        id: 'sort_files_by_size',\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.size : undefined),\n        button: {\n            name: 'Sort by size',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that sorts files by `file.modDate`.\n     */\n    SortFilesByDate: defineFileAction({\n        id: 'sort_files_by_date',\n        sortKeySelector: (file: Nullable<FileData>) => (file ? file.modDate : undefined),\n        button: {\n            name: 'Sort by date',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that toggles whether hidden files are shown to the user or not.\n     */\n    ToggleHiddenFiles: defineFileAction({\n        id: 'toggle_hidden_files',\n        hotkeys: ['ctrl+h'],\n        option: {\n            id: OptionIds.ShowHiddenFiles,\n            defaultValue: true,\n        },\n        button: {\n            name: 'Show hidden files',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that toggles whether folders should appear before files regardless of\n     * current sort function.\n     */\n    ToggleShowFoldersFirst: defineFileAction({\n        id: 'toggle_show_folders_first',\n        option: {\n            id: OptionIds.ShowFoldersFirst,\n            defaultValue: true,\n        },\n        button: {\n            name: 'Show folders first',\n            toolbar: true,\n            group: 'Options',\n        },\n    } as const),\n    /**\n     * Action that focuses the search input when it is dispatched.\n     */\n    FocusSearchInput: defineFileAction(\n        {\n            id: 'focus_search_input',\n            hotkeys: ['ctrl+f'],\n        } as const,\n        ({ getReduxState }) => {\n            const focusSearchInput = selectFocusSearchInput(getReduxState());\n            if (focusSearchInput) focusSearchInput();\n        }\n    ),\n    /**\n     * Action that enables List view.\n     */\n    ToggleDarkMode: defineFileAction({\n        id: 'enable_dark_mode',\n        option: {\n            id: OptionIds.DarkMode,\n            defaultValue: false,\n        },\n        button: {\n            name: 'Enable dark mode',\n            toolbar: true,\n            icon: ChonkyIconName.list,\n            iconOnly: true,\n        },\n    } as const),\n};\n","import { ChonkyIconName } from '../types/icons.types';\nimport { defineFileAction } from '../util/helpers';\n\nexport const ExtraActions = {\n    /**\n     * Action that adds a button and shortcut to copy files.\n     */\n    CopyFiles: defineFileAction({\n        id: 'copy_files',\n        requiresSelection: true,\n        hotkeys: ['ctrl+c'],\n        button: {\n            name: 'Copy selection',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.copy,\n        },\n    } as const),\n    /**\n     * Action that adds a button to create a new folder.\n     */\n    CreateFolder: defineFileAction({\n        id: 'create_folder',\n        button: {\n            name: 'Create folder',\n            toolbar: true,\n            tooltip: 'Create a folder',\n            icon: ChonkyIconName.folderCreate,\n        },\n    } as const),\n    /**\n     * Action that adds a button to upload files.\n     */\n    UploadFiles: defineFileAction({\n        id: 'upload_files',\n        button: {\n            name: 'Upload files',\n            toolbar: true,\n            tooltip: 'Upload files',\n            icon: ChonkyIconName.upload,\n        },\n    } as const),\n    /**\n     * Action that adds a button to download files.\n     */\n    DownloadFiles: defineFileAction({\n        id: 'download_files',\n        requiresSelection: true,\n        button: {\n            name: 'Download files',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.download,\n        },\n    } as const),\n    /**\n     * Action that adds a button and shortcut to delete files.\n     */\n    DeleteFiles: defineFileAction({\n        id: 'delete_files',\n        requiresSelection: true,\n        hotkeys: ['delete'],\n        button: {\n            name: 'Delete files',\n            toolbar: true,\n            contextMenu: true,\n            group: 'Actions',\n            icon: ChonkyIconName.trash,\n        },\n    } as const),\n};\n","import { DefaultActions } from './default';\nimport { EssentialActions } from './essential';\nimport { ExtraActions } from './extra';\n\nexport { OptionIds } from './option-ids';\n\nexport const ChonkyActions = {\n    ...EssentialActions,\n    ...DefaultActions,\n    ...ExtraActions,\n};\n\nexport const EssentialFileActions = [\n    ChonkyActions.MouseClickFile,\n    ChonkyActions.KeyboardClickFile,\n    ChonkyActions.StartDragNDrop,\n    ChonkyActions.EndDragNDrop,\n    ChonkyActions.MoveFiles,\n    ChonkyActions.ChangeSelection,\n    ChonkyActions.OpenFiles,\n    ChonkyActions.OpenParentFolder,\n    ChonkyActions.OpenFileContextMenu,\n];\n\nexport const DefaultFileActions = [\n    ChonkyActions.OpenSelection,\n    ChonkyActions.SelectAllFiles,\n    ChonkyActions.ClearSelection,\n    ChonkyActions.EnableListView,\n    // TODO: Don't enable until compact view is fully supported\n    // ChonkyActions.EnableCompactView,\n    ChonkyActions.EnableGridView,\n    ChonkyActions.SortFilesByName,\n    ChonkyActions.SortFilesBySize,\n    ChonkyActions.SortFilesByDate,\n    ChonkyActions.ToggleHiddenFiles,\n    ChonkyActions.ToggleShowFoldersFirst,\n    ChonkyActions.FocusSearchInput,\n];\n","import { ChonkyActions } from '../action-definitions/index';\nimport { RootState } from '../types/redux.types';\nimport { SortOrder } from '../types/sort.types';\n\nexport const initialRootState: RootState = {\n    instanceId: 'CHONKY_INVALID_ID', // should be overwritten by preloaded state\n\n    externalFileActionHandler: null,\n\n    rawFileActions: [],\n    fileActionsErrorMessages: [],\n    fileActionMap: {},\n    fileActionIds: [],\n    toolbarItems: [],\n    contextMenuItems: [],\n\n    rawFolderChain: null,\n    folderChainErrorMessages: [],\n    folderChain: [],\n\n    rawFiles: [],\n    filesErrorMessages: [],\n    fileMap: {},\n    fileIds: [],\n    cleanFileIds: [],\n\n    sortedFileIds: [],\n    hiddenFileIdMap: {},\n\n    focusSearchInput: null,\n    searchString: '',\n    searchMode: 'currentFolder',\n\n    selectionMap: {},\n    disableSelection: false,\n\n    fileViewConfig: ChonkyActions.EnableGridView.fileViewConfig,\n\n    sortActionId: null,\n    sortOrder: SortOrder.ASC,\n\n    optionMap: {},\n\n    thumbnailGenerator: null,\n    doubleClickDelay: 300,\n    disableDragAndDrop: false,\n    clearSelectionOnOutsideClick: true,\n\n    lastClick: null,\n\n    contextMenuMounted: false,\n    contextMenuConfig: null,\n};\n","import { Nilable, Nullable } from 'tsdef';\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\nimport { GenericFileActionHandler } from '../types/action-handler.types';\nimport { FileActionMenuItem } from '../types/action-menus.types';\nimport { FileAction, FileActionMap } from '../types/action.types';\nimport { ContextMenuConfig } from '../types/context-menu.types';\nimport { FileViewConfig } from '../types/file-view.types';\nimport { FileArray, FileIdTrueMap, FileMap } from '../types/file.types';\nimport { OptionMap } from '../types/options.types';\nimport { RootState } from '../types/redux.types';\nimport { SortOrder } from '../types/sort.types';\nimport { ThumbnailGenerator } from '../types/thumbnails.types';\nimport { FileHelper } from '../util/file-helper';\nimport { sanitizeInputArray } from './files-transforms';\nimport { initialRootState } from './state';\n\nconst reducers = {\n    setExternalFileActionHandler(\n        state: RootState,\n        action: PayloadAction<Nilable<GenericFileActionHandler<FileAction>>>\n    ) {\n        state.externalFileActionHandler = action.payload ?? null;\n    },\n    setRawFileActions(state: RootState, action: PayloadAction<FileAction[] | any>) {\n        state.rawFileActions = action.payload;\n    },\n    setFileActionsErrorMessages(state: RootState, action: PayloadAction<string[]>) {\n        state.fileActionsErrorMessages = action.payload;\n    },\n    setFileActions(state: RootState, action: PayloadAction<FileAction[]>) {\n        const fileActionMap: FileActionMap = {};\n        action.payload.map(a => (fileActionMap[a.id] = a));\n        const fileIds = action.payload.map(a => a.id);\n\n        state.fileActionMap = fileActionMap as FileMap;\n        state.fileActionIds = fileIds;\n    },\n    updateFileActionMenuItems(state: RootState, action: PayloadAction<[FileActionMenuItem[], FileActionMenuItem[]]>) {\n        [state.toolbarItems, state.contextMenuItems] = action.payload;\n    },\n    setRawFolderChain(state: RootState, action: PayloadAction<FileArray | any>) {\n        const rawFolderChain = action.payload;\n        const { sanitizedArray: folderChain, errorMessages } = sanitizeInputArray('folderChain', rawFolderChain);\n        state.rawFolderChain = rawFolderChain;\n        state.folderChain = folderChain;\n        state.folderChainErrorMessages = errorMessages;\n    },\n    setRawFiles(state: RootState, action: PayloadAction<FileArray | any>) {\n        const rawFiles = action.payload;\n        const { sanitizedArray: files, errorMessages } = sanitizeInputArray('files', rawFiles);\n        state.rawFiles = rawFiles;\n        state.filesErrorMessages = errorMessages;\n\n        const fileMap: FileMap = {};\n        files.forEach(f => {\n            if (f) fileMap[f.id] = f;\n        });\n        const fileIds = files.map(f => (f ? f.id : null));\n        const cleanFileIds = fileIds.filter(f => !!f) as string[];\n\n        state.fileMap = fileMap;\n        state.fileIds = fileIds;\n        state.cleanFileIds = cleanFileIds;\n\n        // Cleanup selection\n        for (const selectedFileId of Object.keys(state.selectionMap)) {\n            if (!fileMap[selectedFileId]) {\n                delete state.selectionMap[selectedFileId];\n            }\n        }\n    },\n    setSortedFileIds(state: RootState, action: PayloadAction<Nullable<string>[]>) {\n        state.sortedFileIds = action.payload;\n    },\n    setHiddenFileIds(state: RootState, action: PayloadAction<FileIdTrueMap>) {\n        state.hiddenFileIdMap = action.payload;\n\n        // Cleanup selection\n        for (const selectedFileId of Object.keys(state.selectionMap)) {\n            if (state.hiddenFileIdMap[selectedFileId]) {\n                delete state.selectionMap[selectedFileId];\n            }\n        }\n    },\n    setFocusSearchInput(state: RootState, action: PayloadAction<Nullable<() => void>>) {\n        state.focusSearchInput = action.payload;\n    },\n    setSearchString(state: RootState, action: PayloadAction<string>) {\n        state.searchString = action.payload;\n    },\n    selectAllFiles(state: RootState) {\n        state.fileIds\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id]))\n            .map(id => (id ? (state.selectionMap[id] = true) : null));\n    },\n    selectFiles(state: RootState, action: PayloadAction<{ fileIds: string[]; reset: boolean }>) {\n        if (state.disableSelection) return;\n        if (action.payload.reset) state.selectionMap = {};\n        action.payload.fileIds\n            .filter(id => id && FileHelper.isSelectable(state.fileMap[id]))\n            .map(id => (state.selectionMap[id] = true));\n    },\n    toggleSelection(state: RootState, action: PayloadAction<{ fileId: string; exclusive: boolean }>) {\n        if (state.disableSelection) return;\n        const oldValue = !!state.selectionMap[action.payload.fileId];\n        if (action.payload.exclusive) state.selectionMap = {};\n        if (oldValue) delete state.selectionMap[action.payload.fileId];\n        else if (FileHelper.isSelectable(state.fileMap[action.payload.fileId])) {\n            state.selectionMap[action.payload.fileId] = true;\n        }\n    },\n    clearSelection(state: RootState) {\n        if (state.disableSelection) return;\n        if (Object.keys(state.selectionMap).length !== 0) state.selectionMap = {};\n    },\n    setSelectionDisabled(state: RootState, action: PayloadAction<boolean>) {\n        state.disableSelection = action.payload;\n        if (Object.keys(state.selectionMap).length !== 0) state.selectionMap = {};\n    },\n    setFileViewConfig(state: RootState, action: PayloadAction<FileViewConfig>) {\n        state.fileViewConfig = action.payload;\n    },\n    setSort(state: RootState, action: PayloadAction<{ actionId: string; order: SortOrder }>) {\n        state.sortActionId = action.payload.actionId;\n        state.sortOrder = action.payload.order;\n    },\n    setOptionDefaults(state: RootState, action: PayloadAction<OptionMap>) {\n        for (const optionId of Object.keys(action.payload)) {\n            if (optionId in state.optionMap) continue;\n            state.optionMap[optionId] = action.payload[optionId];\n        }\n    },\n    toggleOption(state: RootState, action: PayloadAction<string>) {\n        state.optionMap[action.payload] = !state.optionMap[action.payload];\n    },\n    setThumbnailGenerator(state: RootState, action: PayloadAction<Nullable<ThumbnailGenerator>>) {\n        state.thumbnailGenerator = action.payload;\n    },\n    setDoubleClickDelay(state: RootState, action: PayloadAction<number>) {\n        state.doubleClickDelay = action.payload;\n    },\n    setDisableDragAndDrop(state: RootState, action: PayloadAction<boolean>) {\n        state.disableDragAndDrop = action.payload;\n    },\n    setClearSelectionOnOutsideClick(state: RootState, action: PayloadAction<boolean>) {\n        state.clearSelectionOnOutsideClick = action.payload;\n    },\n    setLastClickIndex(state: RootState, action: PayloadAction<Nullable<{ index: number; fileId: string }>>) {\n        state.lastClick = action.payload;\n    },\n    setContextMenuMounted(state: RootState, action: PayloadAction<boolean>) {\n        state.contextMenuMounted = action.payload;\n    },\n    showContextMenu(state: RootState, action: PayloadAction<ContextMenuConfig>) {\n        state.contextMenuConfig = action.payload;\n    },\n    hideContextMenu(state: RootState) {\n        if (!state.contextMenuConfig) return;\n        state.contextMenuConfig = null;\n    },\n};\n\nexport const { actions: reduxActions, reducer: rootReducer } = createSlice({\n    name: 'root',\n    initialState: initialRootState,\n    reducers,\n});\n","import { useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { configureStore } from '@reduxjs/toolkit';\n\nimport { RootState } from '../types/redux.types';\nimport { useStaticValue } from '../util/hooks-helpers';\nimport { rootReducer } from './reducers';\nimport { initialRootState } from './state';\nimport { useStoreWatchers } from './watchers';\n\nexport const useChonkyStore = (chonkyInstanceId: string) => {\n    const store = useStaticValue(() => {\n        const preloadedState: RootState = {\n            ...initialRootState,\n            instanceId: chonkyInstanceId,\n        };\n\n        return configureStore({\n            preloadedState: preloadedState as any,\n            reducer: rootReducer,\n            middleware: getDefaultMiddleware =>\n                getDefaultMiddleware({\n                    serializableCheck: false,\n                }),\n            devTools: { name: `chonky_${chonkyInstanceId}` },\n        });\n    });\n    useStoreWatchers(store);\n    return store;\n};\n\n/**\n * Hook that can be used with parametrized selectors.\n */\nexport const useParamSelector = <Args extends Array<any>, Value>(\n    parametrizedSelector: (...args: Args) => (state: RootState) => Value,\n    ...selectorParams: Args\n) => {\n    const selector = useCallback(\n        (state: RootState) => parametrizedSelector(...selectorParams)(state),\n        // eslint-disable-next-line\n        [parametrizedSelector, ...selectorParams]\n    );\n    return useSelector(selector);\n};\n\n/**\n * DTE - DispatchThunkEffect. This method is used to decrease code duplication in\n * main Chonky method.\n */\nexport const useDTE = <Args extends Array<any>>(actionCreator: (...args: Args) => any, ...selectorParams: Args) => {\n    const dispatch = useDispatch();\n    useEffect(\n        () => {\n            dispatch(actionCreator(...selectorParams));\n        },\n        // eslint-disable-next-line\n        [dispatch, actionCreator, ...selectorParams]\n    );\n};\n\nexport const usePropReduxUpdate = <Payload extends any>(actionCreator: (payload: Payload) => any, payload: Payload) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(actionCreator(payload));\n    }, [dispatch, actionCreator, payload]);\n};\n","import { useEffect } from 'react';\nimport watch from 'redux-watch';\n\nimport { Store } from '@reduxjs/toolkit';\n\nimport { ChonkyActions } from '../action-definitions';\nimport { RootState } from '../types/redux.types';\nimport { FileSelection } from '../types/selection.types';\nimport { selectSelectedFileIds, selectSelectionMap } from './selectors';\nimport { thunkRequestFileAction } from './thunks/dispatchers.thunks';\n\nexport const useStoreWatchers = (store: Store<RootState>) => {\n    useEffect(() => {\n        const selectionWatcher = watch(() => selectSelectionMap(store.getState()));\n        const onSelectionChange = (\n            newSelection: FileSelection,\n            oldSelection: FileSelection\n        ) => {\n            // We don't check for deep equality here as we expect the\n            // reducers to prevent all unnecessary updates.\n            if (newSelection === oldSelection) return;\n\n            // Notify users the selection has changed.\n            const selectedFilesIds = selectSelectedFileIds(store.getState());\n            const selection = new Set<string>(selectedFilesIds);\n            store.dispatch(\n                thunkRequestFileAction(ChonkyActions.ChangeSelection, {\n                    selection,\n                }) as any\n            );\n        };\n\n        const unsubscribeCallbacks = [\n            store.subscribe(selectionWatcher(onSelectionChange)),\n        ];\n        return () => {\n            for (const unsubscribe of unsubscribeCallbacks) unsubscribe();\n        };\n    }, [store]);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\n\nimport { ChonkyIconProps } from '../../types/icons.types';\n\nexport const ChonkyIconPlaceholder: React.FC<ChonkyIconProps> = () => {\n    // This component should not be rendered unless the user has misconfigured Chonky\n    const title =\n        'No icon component found. Please follow Chonky installation instructions to ' +\n        'provide a pre-made icon component (or a custom icon).';\n    return <span title={title}>⚠️</span>;\n};\n","import { ChonkyActions } from '../action-definitions/index';\nimport { ChonkyIconPlaceholder } from '../components/internal/ChonkyIconPlaceholder';\nimport { FileBrowserProps } from '../types/file-browser.types';\n\nexport type ChonkyConfig = Pick<\n    FileBrowserProps,\n    | 'fileActions'\n    | 'onFileAction'\n    | 'thumbnailGenerator'\n    | 'doubleClickDelay'\n    | 'disableSelection'\n    | 'disableDefaultFileActions'\n    | 'disableDragAndDrop'\n    | 'disableDragAndDropProvider'\n    | 'defaultSortActionId'\n    | 'defaultFileViewActionId'\n    | 'clearSelectionOnOutsideClick'\n    | 'iconComponent'\n    | 'darkMode'\n    | 'i18n'\n>;\n\nexport const defaultConfig: ChonkyConfig = {\n    fileActions: null,\n    onFileAction: null,\n    thumbnailGenerator: null,\n    doubleClickDelay: 300,\n    disableSelection: false,\n    disableDefaultFileActions: false,\n    disableDragAndDrop: false,\n    disableDragAndDropProvider: false,\n    defaultSortActionId: ChonkyActions.SortFilesByName.id,\n    defaultFileViewActionId: ChonkyActions.EnableGridView.id,\n    clearSelectionOnOutsideClick: true,\n    iconComponent: ChonkyIconPlaceholder,\n    darkMode: false,\n    i18n: {},\n};\n\nexport const setChonkyDefaults = (config: Partial<ChonkyConfig>) => {\n    for (const key of Object.keys(defaultConfig)) {\n        if (key in config) {\n            defaultConfig[key as keyof ChonkyConfig] = config[\n                key as keyof ChonkyConfig\n            ] as any;\n        }\n    }\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2019\n * @license MIT\n */\n\nimport { createContext, ElementType, useMemo } from 'react';\n\nimport ExactTrie from 'exact-trie';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyIconPlaceholder } from '../components/internal/ChonkyIconPlaceholder';\nimport { FileData } from '../types/file.types';\nimport { ChonkyIconName, ChonkyIconProps, FileIconData } from '../types/icons.types';\n\nexport const ChonkyIconContext = createContext<ElementType<ChonkyIconProps>>(ChonkyIconPlaceholder);\n\nexport const VideoExtensions: string[] = [\n    '3g2',\n    '3gp',\n    '3gpp',\n    'asf',\n    'asx',\n    'avi',\n    'dvb',\n    'f4v',\n    'fli',\n    'flv',\n    'fvt',\n    'h261',\n    'h263',\n    'h264',\n    'jpgm',\n    'jpgv',\n    'jpm',\n    'm1v',\n    'm2v',\n    'm4u',\n    'm4v',\n    'mj2',\n    'mjp2',\n    'mk3d',\n    'mks',\n    'mkv',\n    'mng',\n    'mov',\n    'movie',\n    'mp4',\n    'mp4v',\n    'mpe',\n    'mpeg',\n    'mpg',\n    'mpg4',\n    'mxu',\n    'ogv',\n    'pyv',\n    'qt',\n    'smv',\n    'ts',\n    'uvh',\n    'uvm',\n    'uvp',\n    'uvs',\n    'uvu',\n    'uvv',\n    'uvvh',\n    'uvvm',\n    'uvvp',\n    'uvvs',\n    'uvvu',\n    'uvvv',\n    'viv',\n    'vob',\n    'webm',\n    'wm',\n    'wmv',\n    'wmx',\n    'wvx',\n];\nexport const ImageExtensions: string[] = [\n    '3ds',\n    'apng',\n    'azv',\n    'bmp',\n    'bmp',\n    'btif',\n    'cgm',\n    'cmx',\n    'djv',\n    'djvu',\n    'drle',\n    'dwg',\n    'dxf',\n    'emf',\n    'exr',\n    'fbs',\n    'fh',\n    'fh4',\n    'fh5',\n    'fh7',\n    'fhc',\n    'fits',\n    'fpx',\n    'fst',\n    'g3',\n    'gif',\n    'heic',\n    'heics',\n    'heif',\n    'heifs',\n    'ico',\n    'ico',\n    'ief',\n    'jls',\n    'jng',\n    'jp2',\n    'jpe',\n    'jpeg',\n    'jpf',\n    'jpg',\n    'jpg2',\n    'jpm',\n    'jpx',\n    'jxr',\n    'ktx',\n    'mdi',\n    'mmr',\n    'npx',\n    'pbm',\n    'pct',\n    'pcx',\n    'pcx',\n    'pgm',\n    'pic',\n    'png',\n    'pnm',\n    'ppm',\n    'psd',\n    'pti',\n    'ras',\n    'rgb',\n    'rlc',\n    'sgi',\n    'sid',\n    'sub',\n    'svg',\n    'svgz',\n    't38',\n    'tap',\n    'tfx',\n    'tga',\n    'tif',\n    'tiff',\n    'uvg',\n    'uvi',\n    'uvvg',\n    'uvvi',\n    'vtf',\n    'wbmp',\n    'wdp',\n    'webp',\n    'wmf',\n    'xbm',\n    'xif',\n    'xpm',\n    'xwd',\n];\nexport const AudioExtensions: string[] = [\n    '3gpp',\n    'aac',\n    'adp',\n    'aif',\n    'aifc',\n    'aiff',\n    'au',\n    'caf',\n    'dra',\n    'dts',\n    'dtshd',\n    'ecelp4800',\n    'ecelp7470',\n    'ecelp9600',\n    'eol',\n    'flac',\n    'kar',\n    'lvp',\n    'm2a',\n    'm3a',\n    'm3u',\n    'm4a',\n    'm4a',\n    'mid',\n    'midi',\n    'mka',\n    'mp2',\n    'mp2a',\n    'mp3',\n    'mp3',\n    'mp4a',\n    'mpga',\n    'oga',\n    'ogg',\n    'pya',\n    'ra',\n    'ra',\n    'ram',\n    'rip',\n    'rmi',\n    'rmp',\n    's3m',\n    'sil',\n    'snd',\n    'spx',\n    'uva',\n    'uvva',\n    'wav',\n    'wav',\n    'wav',\n    'wax',\n    'weba',\n    'wma',\n    'xm',\n];\nexport const ColorsLight: string[] = [\n    '#bbbbbb',\n    '#d65c5c',\n    '#d6665c',\n    '#d6705c',\n    '#d67a5c',\n    '#d6855c',\n    '#d68f5c',\n    '#d6995c',\n    '#d6a35c',\n    '#d6ad5c',\n    '#d6b85c',\n    '#d6c25c',\n    '#d6cc5c',\n    '#d6d65c',\n    '#ccd65c',\n    '#c2d65c',\n    '#b8d65c',\n    '#add65c',\n    '#a3d65c',\n    '#99d65c',\n    '#8fd65c',\n    '#85d65c',\n    '#7ad65c',\n    '#70d65c',\n    '#66d65c',\n    '#5cd65c',\n    '#5cd666',\n    '#5cd670',\n    '#5cd67a',\n    '#5cd685',\n    '#5cd68f',\n    '#5cd699',\n    '#5cd6a3',\n    '#5cd6ad',\n    '#5cd6b8',\n    '#5cd6c2',\n    '#5cd6cc',\n    '#5cd6d6',\n    '#5cccd6',\n    '#5cc2d6',\n    '#5cb8d6',\n    '#5cadd6',\n    '#5ca3d6',\n    '#5c99d6',\n    '#5c8fd6',\n    '#5c85d6',\n    '#5c7ad6',\n    '#5c70d6',\n    '#5c66d6',\n    '#5c5cd6',\n    '#665cd6',\n    '#705cd6',\n    '#7a5cd6',\n    '#855cd6',\n    '#8f5cd6',\n    '#995cd6',\n    '#a35cd6',\n    '#ad5cd6',\n    '#b85cd6',\n    '#c25cd6',\n    '#cc5cd6',\n    '#d65cd6',\n    '#d65ccc',\n    '#d65cc2',\n    '#d65cb8',\n    '#d65cad',\n    '#d65ca3',\n    '#d65c99',\n    '#d65c8f',\n    '#d65c85',\n    '#d65c7a',\n    '#d65c70',\n    '#d65c66',\n];\nexport const ColorsDark: string[] = [\n    '#777',\n    '#8f3d3d',\n    '#8f443d',\n    '#8f4b3d',\n    '#8f523d',\n    '#8f583d',\n    '#8f5f3d',\n    '#8f663d',\n    '#8f6d3d',\n    '#8f743d',\n    '#8f7a3d',\n    '#8f813d',\n    '#8f883d',\n    '#8f8f3d',\n    '#888f3d',\n    '#818f3d',\n    '#7a8f3d',\n    '#748f3d',\n    '#6d8f3d',\n    '#668f3d',\n    '#5f8f3d',\n    '#588f3d',\n    '#528f3d',\n    '#4b8f3d',\n    '#448f3d',\n    '#3d8f3d',\n    '#3d8f44',\n    '#3d8f4b',\n    '#3d8f52',\n    '#3d8f58',\n    '#3d8f5f',\n    '#3d8f66',\n    '#3d8f6d',\n    '#3d8f74',\n    '#3d8f7a',\n    '#3d8f81',\n    '#3d8f88',\n    '#3d8f8f',\n    '#3d888f',\n    '#3d818f',\n    '#3d7a8f',\n    '#3d748f',\n    '#3d6d8f',\n    '#3d668f',\n    '#3d5f8f',\n    '#3d588f',\n    '#3d528f',\n    '#3d4b8f',\n    '#3d448f',\n    '#3d3d8f',\n    '#443d8f',\n    '#4b3d8f',\n    '#523d8f',\n    '#583d8f',\n    '#5f3d8f',\n    '#663d8f',\n    '#6d3d8f',\n    '#743d8f',\n    '#7a3d8f',\n    '#813d8f',\n    '#883d8f',\n    '#8f3d8f',\n    '#8f3d88',\n    '#8f3d81',\n    '#8f3d7a',\n    '#8f3d74',\n    '#8f3d6d',\n    '#8f3d66',\n    '#8f3d5f',\n    '#8f3d58',\n    '#8f3d52',\n    '#8f3d4b',\n    '#8f3d44',\n];\n\nconst getIconTrie = () => {\n    let colourIndex = 0;\n    const step = 5;\n\n    const IconsToExtensions = [\n        // Generic file types\n        [ChonkyIconName.license, ['license']],\n        [ChonkyIconName.config, ['sfk', 'ini', 'yml', 'toml', 'iml']],\n        [ChonkyIconName.model, ['3ds', 'obj', 'ply', 'fbx']],\n        [ChonkyIconName.database, ['csv', 'json', 'sql', 'sqlite', 'sqlite3', 'npy', 'npz', 'rec', 'idx', 'hdf5']],\n        [ChonkyIconName.text, ['txt', 'md', 'mdx']],\n        [ChonkyIconName.archive, ['zip', 'rar', 'tar', 'tar.gz', '7z']],\n        [ChonkyIconName.image, ImageExtensions],\n        [ChonkyIconName.video, VideoExtensions],\n        [ChonkyIconName.code, ['html', 'php', 'css', 'sass', 'scss', 'less', 'cpp', 'h', 'hpp', 'c', 'xml']],\n        [ChonkyIconName.info, ['bib', 'readme', 'nfo']],\n        [ChonkyIconName.key, ['pem', 'pub']],\n        [ChonkyIconName.lock, ['lock', 'lock.json', 'shrinkwrap.json']],\n        [ChonkyIconName.music, AudioExtensions],\n        [ChonkyIconName.terminal, ['run', 'sh']],\n        [ChonkyIconName.trash, ['.Trashes']],\n        [ChonkyIconName.users, ['authors', 'contributors']],\n\n        // OS file types\n        [ChonkyIconName.linux, ['AppImage']],\n        [ChonkyIconName.ubuntu, ['deb']],\n        [ChonkyIconName.windows, ['exe']],\n\n        // Programming language file types\n        [ChonkyIconName.rust, ['rs', 'rlib']],\n        [ChonkyIconName.python, ['py', 'ipynb']],\n        [ChonkyIconName.nodejs, ['js', 'jsx', 'ts', 'tsx', 'd.ts']],\n        [ChonkyIconName.php, ['php']],\n\n        // Development tools file types\n        [ChonkyIconName.git, ['.gitignore']],\n\n        // Brands file types\n        [ChonkyIconName.adobe, ['psd']],\n\n        // Other program file types\n        [ChonkyIconName.pdf, ['pdf']],\n        [ChonkyIconName.excel, ['xls', 'xlsx']],\n        [ChonkyIconName.word, ['doc', 'docx', 'odt']],\n        [ChonkyIconName.flash, ['swf']],\n    ] as const;\n\n    const exactTrie = new ExactTrie({ ignoreCase: true });\n    for (const pair of IconsToExtensions) {\n        const [icon, extensions] = pair;\n\n        for (let i = 0; i < extensions.length; ++i) {\n            colourIndex += step;\n            const colorCode = (colourIndex % (ColorsLight.length - 1)) + 1;\n            const iconData: FileIconData = {\n                icon,\n                colorCode,\n            };\n            exactTrie.put(extensions[i], iconData, true);\n        }\n    }\n\n    return exactTrie;\n};\n\nconst iconTrie = getIconTrie();\n\nexport const useIconData = (file: Nullable<FileData>): FileIconData => {\n    return useMemo(() => {\n        if (!file) return { icon: ChonkyIconName.loading, colorCode: 0 };\n        if (file.isDir === true) return { icon: ChonkyIconName.folder, colorCode: 0 };\n\n        const match = iconTrie.getWithCheckpoints(file.name, '.', true);\n        return match ? match : { icon: ChonkyIconName.file, colorCode: 32 };\n    }, [file]);\n};\n","import { Theme as MuiTheme } from '@material-ui/core/styles';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport classnames from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport { DeepPartial } from 'tsdef';\n\nexport const lightTheme = {\n    colors: {\n        debugRed: '#fabdbd',\n        debugBlue: '#bdd8fa',\n        debugGreen: '#d2fabd',\n        debugPurple: '#d2bdfa',\n        debugYellow: '#fae9bd',\n\n        textActive: '#09f',\n    },\n\n    fontSizes: {\n        rootPrimary: 15,\n    },\n\n    margins: {\n        rootLayoutMargin: 8,\n    },\n\n    toolbar: {\n        size: 30,\n        lineHeight: '30px', // `px` suffix is required for `line-height` fields to work\n        fontSize: 15,\n        buttonRadius: 4,\n    },\n\n    dnd: {\n        canDropColor: 'green',\n        cannotDropColor: 'red',\n        canDropMask: 'rgba(180, 235, 180, 0.75)',\n        cannotDropMask: 'rgba(235, 180, 180, 0.75)',\n        fileListCanDropMaskOne: 'rgba(180, 235, 180, 0.1)',\n        fileListCanDropMaskTwo: 'rgba(180, 235, 180, 0.2)',\n        fileListCannotDropMaskOne: 'rgba(235, 180, 180, 0.1)',\n        fileListCannotDropMaskTwo: 'rgba(235, 180, 180, 0.2)',\n    },\n\n    dragLayer: {\n        border: 'solid 2px #09f',\n        padding: '7px 10px',\n        borderRadius: 2,\n    },\n\n    fileList: {\n        desktopGridGutter: 8,\n        mobileGridGutter: 5,\n    },\n\n    gridFileEntry: {\n        childrenCountSize: '1.6em',\n        iconColorFocused: '#000',\n        iconSize: '2.4em',\n        iconColor: '#fff',\n        borderRadius: 5,\n        fontSize: 14,\n\n        fileColorTint: 'rgba(255, 255, 255, 0.4)',\n        folderBackColorTint: 'rgba(255, 255, 255, 0.1)',\n        folderFrontColorTint: 'rgba(255, 255, 255, 0.4)',\n    },\n\n    listFileEntry: {\n        propertyFontSize: 14,\n        iconFontSize: '1.1em',\n        iconBorderRadius: 5,\n        fontSize: 14,\n    },\n};\n\nexport type ChonkyTheme = typeof lightTheme;\n\nexport const darkThemeOverride: DeepPartial<ChonkyTheme> = {\n    gridFileEntry: {\n        fileColorTint: 'rgba(50, 50, 50, 0.4)',\n        folderBackColorTint: 'rgba(50, 50, 50, 0.4)',\n        folderFrontColorTint: 'rgba(50, 50, 50, 0.15)',\n    },\n};\n\nexport const mobileThemeOverride: DeepPartial<ChonkyTheme> = {\n    fontSizes: {\n        rootPrimary: 13,\n    },\n    margins: {\n        rootLayoutMargin: 4,\n    },\n    toolbar: {\n        size: 28,\n        lineHeight: '28px',\n        fontSize: 13,\n    },\n    gridFileEntry: {\n        fontSize: 13,\n    },\n    listFileEntry: {\n        propertyFontSize: 12,\n        iconFontSize: '1em',\n        fontSize: 13,\n    },\n};\n\nexport const useIsMobileBreakpoint = () => {\n    return useMediaQuery('(max-width:480px)');\n};\n\nexport const getStripeGradient = (colorOne: string, colorTwo: string) =>\n    'repeating-linear-gradient(' +\n    '45deg,' +\n    `${colorOne},` +\n    `${colorOne} 10px,` +\n    `${colorTwo} 0,` +\n    `${colorTwo} 20px` +\n    ')';\n\nexport const makeLocalChonkyStyles = <C extends string = string>(\n    styles: (theme: ChonkyTheme & MuiTheme) => any\n    // @ts-ignore\n): any => createUseStyles<ChonkyTheme, C>(styles);\n\nexport const makeGlobalChonkyStyles = <C extends string = string>(\n    makeStyles: (theme: ChonkyTheme & MuiTheme) => any\n) => {\n    const selectorMapping = {};\n    const makeGlobalStyles = (theme: ChonkyTheme) => {\n        const localStyles = makeStyles(theme as any);\n        const globalStyles = {};\n        const localSelectors = Object.keys(localStyles);\n        localSelectors.map(localSelector => {\n            const globalSelector = `chonky-${localSelector}`;\n            const jssSelector = `@global .${globalSelector}`;\n            // @ts-ignore\n            globalStyles[jssSelector] = localStyles[localSelector];\n            // @ts-ignore\n            selectorMapping[localSelector] = globalSelector;\n        });\n        return globalStyles;\n    };\n\n    // @ts-ignore\n    const useStyles = createUseStyles<ChonkyTheme, C>(makeGlobalStyles as any);\n    return (...args: any[]): any => {\n        const styles = useStyles(...args);\n        const classes = {};\n        Object.keys(selectorMapping).map(localSelector => {\n            // @ts-ignore\n            classes[localSelector] = selectorMapping[localSelector];\n        });\n        return { ...classes, ...styles };\n    };\n};\n\nexport const important = <T>(value: T) => [value, '!important'];\n\nexport const c = classnames;\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\n\nimport { reduxActions } from '../../redux/reducers';\nimport { initialRootState } from '../../redux/state';\nimport { useDTE, usePropReduxUpdate } from '../../redux/store';\nimport {\n    thunkActivateSortAction, thunkUpdateDefaultFileViewActionId, thunkUpdateRawFileActions\n} from '../../redux/thunks/file-actions.thunks';\nimport { FileBrowserHandle, FileBrowserProps } from '../../types/file-browser.types';\nimport { defaultConfig } from '../../util/default-config';\nimport { useFileBrowserHandle } from '../../util/file-browser-handle';\nimport { getValueOrFallback } from '../../util/helpers';\n\nexport const ChonkyBusinessLogicInner = React.memo(\n    React.forwardRef<FileBrowserHandle, FileBrowserProps>((props, ref) => {\n        // ==== Update Redux state\n        usePropReduxUpdate(reduxActions.setRawFiles, props.files ?? initialRootState.rawFiles);\n        usePropReduxUpdate(reduxActions.setRawFolderChain, props.folderChain);\n        useDTE(\n            thunkUpdateRawFileActions,\n            getValueOrFallback(props.fileActions, defaultConfig.fileActions),\n            getValueOrFallback(props.disableDefaultFileActions, defaultConfig.disableDefaultFileActions)\n        );\n        useDTE(\n            reduxActions.setExternalFileActionHandler,\n            getValueOrFallback(props.onFileAction, defaultConfig.onFileAction) as any\n        );\n        useDTE(\n            reduxActions.setSelectionDisabled,\n            getValueOrFallback(props.disableSelection, defaultConfig.disableSelection, 'boolean')\n        );\n        useDTE(\n            thunkActivateSortAction,\n            getValueOrFallback(props.defaultSortActionId, defaultConfig.defaultSortActionId)\n        );\n        useDTE(\n            thunkUpdateDefaultFileViewActionId,\n            getValueOrFallback(props.defaultFileViewActionId, defaultConfig.defaultFileViewActionId, 'string')\n        );\n\n        useDTE(\n            reduxActions.setThumbnailGenerator,\n            getValueOrFallback(props.thumbnailGenerator, defaultConfig.thumbnailGenerator)\n        );\n        useDTE(\n            reduxActions.setDoubleClickDelay,\n            getValueOrFallback(props.doubleClickDelay, defaultConfig.doubleClickDelay, 'number')\n        );\n        useDTE(\n            reduxActions.setDisableDragAndDrop,\n            getValueOrFallback(props.disableDragAndDrop, defaultConfig.disableDragAndDrop, 'boolean')\n        );\n        useDTE(\n            reduxActions.setClearSelectionOnOutsideClick,\n            getValueOrFallback(\n                props.clearSelectionOnOutsideClick,\n                defaultConfig.clearSelectionOnOutsideClick,\n                'boolean'\n            )\n        );\n\n        // ==== Setup the imperative handle for external use\n        useFileBrowserHandle(ref);\n\n        return null;\n    })\n);\nChonkyBusinessLogicInner.displayName = 'ChonkyBusinessLogicInner';\n\nexport const ChonkyBusinessLogic = React.memo(ChonkyBusinessLogicInner);\nChonkyBusinessLogic.displayName = 'ChonkyBusinessLogic';\n","import React, { useImperativeHandle } from 'react';\nimport { useDispatch, useStore } from 'react-redux';\n\nimport { reduxActions } from '../redux/reducers';\nimport { selectSelectionMap } from '../redux/selectors';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport { FileAction } from '../types/action.types';\nimport { FileBrowserHandle } from '../types/file-browser.types';\nimport { RootState } from '../types/redux.types';\n\nexport const useFileBrowserHandle = (ref: React.Ref<FileBrowserHandle>) => {\n    const store = useStore<RootState>();\n    const dispatch = useDispatch();\n\n    useImperativeHandle(\n        ref,\n        () => ({\n            getFileSelection(): Set<string> {\n                const selectionMap = selectSelectionMap(store.getState());\n                const selectionSet = new Set(Object.keys(selectionMap));\n                return selectionSet;\n            },\n            setFileSelection(selection, reset = true): void {\n                const fileIds = Array.from(selection);\n                dispatch(reduxActions.selectFiles({ fileIds, reset }));\n            },\n            requestFileAction<Action extends FileAction>(\n                action: Action,\n                payload: Action['__payloadType']\n            ): Promise<void> {\n                return Promise.resolve(\n                    dispatch(thunkRequestFileAction(action, payload))\n                ).then();\n            },\n        }),\n        [store, dispatch]\n    );\n};\n","import { useCallback, useContext } from 'react';\nimport { DndContext, useDrag, useDrop } from 'react-dnd';\n\nexport const useDndContextAvailable = () => {\n    const dndContext = useContext(DndContext);\n    const { dragDropManager } = dndContext;\n    return !!dragDropManager;\n};\n\nexport const useDragIfAvailable: typeof useDrag = (...args) => {\n    // This is an ugly hack to make `useDrag` not throw if a `DndContext` is not available.\n    // See: https://github.com/react-dnd/react-dnd/issues/2212\n    const dndContextAvailable = useDndContextAvailable();\n    const mockHook = useCallback(() => [{} as any, () => null, () => null], []);\n    // @ts-ignore\n    const useHook: typeof useDrag = dndContextAvailable ? useDrag : mockHook;\n    return useHook(...args);\n};\n\nexport const useDropIfAvailable: typeof useDrop = (...args) => {\n    const dndContextAvailable = useDndContextAvailable();\n    const mockHook = useCallback(() => [{} as any, () => null], []);\n    // @ts-ignore\n    const useHook: typeof useDrop = dndContextAvailable ? useDrop : mockHook;\n    return useHook(...args);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\nimport { useDragLayer } from 'react-dnd';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyDndFileEntryItem, ChonkyDndFileEntryType } from '../../types/dnd.types';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface DnDFileListDragLayerProps {}\n\nconst layerStyles: React.CSSProperties = {\n    position: 'fixed',\n    pointerEvents: 'none',\n    zIndex: 100,\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n};\nconst getItemStyles = (\n    initialCursorOffset: Nullable<{ x: number; y: number }>,\n    initialFileOffset: Nullable<{ x: number; y: number }>,\n    currentFileOffset: Nullable<{ x: number; y: number }>\n) => {\n    if (!initialCursorOffset || !initialFileOffset || !currentFileOffset) {\n        return {\n            display: 'none',\n        };\n    }\n    const x = initialCursorOffset.x + (currentFileOffset.x - initialFileOffset.x);\n    const y = initialCursorOffset.y + (currentFileOffset.y - initialFileOffset.y);\n    const transform = `translate(${x}px, ${y}px)`;\n    return {\n        transform,\n        WebkitTransform: transform,\n    };\n};\n\nexport const DnDFileListDragLayer: React.FC<DnDFileListDragLayerProps> = () => {\n    const classes = useStyles();\n\n    const {\n        itemType,\n        item,\n        initialCursorOffset,\n        initialFileOffset,\n        currentFileOffset,\n        isDragging,\n    } = useDragLayer(monitor => ({\n        item: monitor.getItem() as ChonkyDndFileEntryItem,\n        itemType: monitor.getItemType(),\n        initialCursorOffset: monitor.getInitialClientOffset(),\n        initialFileOffset: monitor.getInitialSourceClientOffset(),\n        currentFileOffset: monitor.getSourceClientOffset(),\n        isDragging: monitor.isDragging(),\n    }));\n    if (!isDragging || itemType !== ChonkyDndFileEntryType || !item.payload) {\n        return null;\n    }\n\n    const selectionSize = item.payload.selectedFiles.length;\n    return (\n        <div style={layerStyles}>\n            <div\n                style={getItemStyles(\n                    initialCursorOffset,\n                    initialFileOffset,\n                    currentFileOffset\n                )}\n            >\n                <div className={classes.fileDragPreview}>\n                    <b>{item.payload.draggedFile.name}</b>\n                    {selectionSize > 1 && (\n                        <>\n                            {' and '}\n                            <strong>\n                                {selectionSize - 1} other file\n                                {selectionSize - 1 !== 1 ? 's' : ''}\n                            </strong>\n                        </>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    fileDragPreview: {\n        boxShadow: `2px 2px 5px ${theme.palette.divider}`,\n        backgroundColor: theme.palette.background.default,\n        borderRadius: theme.dragLayer.borderRadius,\n        fontSize: theme.fontSizes.rootPrimary,\n        color: theme.palette.text.primary,\n        padding: theme.dragLayer.padding,\n        border: theme.dragLayer.border,\n        display: 'inline-block',\n    },\n}));\n","import { DragObjectWithType } from 'react-dnd';\nimport { Nilable } from 'tsdef';\n\nimport { StartDragNDropPayload } from './action-payloads.types';\nimport { FileData } from './file.types';\n\nexport interface ChonkyDndDropResult {\n    dropTarget: Nilable<FileData> | any;\n    dropEffect: 'move' | 'copy';\n}\n\nexport type ChonkyDndFileEntryItem = DragObjectWithType & {\n    payload: StartDragNDropPayload;\n};\nexport const ChonkyDndFileEntryType = 'dnd-chonky-file-entry';\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport hotkeys from 'hotkeys-js';\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { selectFileActionData } from '../../redux/selectors';\nimport { useParamSelector } from '../../redux/store';\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\n\nexport interface HotkeyListenerProps {\n    fileActionId: string;\n}\n\nexport const HotkeyListener: React.FC<HotkeyListenerProps> = React.memo(props => {\n    const { fileActionId } = props;\n\n    const dispatch = useDispatch();\n    const fileAction = useParamSelector(selectFileActionData, fileActionId);\n\n    useEffect(() => {\n        if (!fileAction || !fileAction.hotkeys || fileAction.hotkeys.length === 0) {\n            return;\n        }\n\n        const hotkeysStr = fileAction.hotkeys.join(',');\n        const hotkeyCallback = (event: KeyboardEvent) => {\n            event.preventDefault();\n            dispatch(thunkRequestFileAction(fileAction, undefined));\n        };\n        hotkeys(hotkeysStr, hotkeyCallback);\n        return () => hotkeys.unbind(hotkeysStr, hotkeyCallback);\n    }, [dispatch, fileAction]);\n\n    return null;\n});\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport Box from '@material-ui/core/Box';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport React, { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { reduxActions } from '../../redux/reducers';\nimport {\n    selectClearSelectionOnOutsideClick,\n    selectFileActionIds,\n    selectIsDnDDisabled,\n} from '../../redux/selectors';\nimport { useDndContextAvailable } from '../../util/dnd-fallback';\nimport { elementIsInsideButton } from '../../util/helpers';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\nimport { useContextMenuTrigger } from '../external/FileContextMenu-hooks';\nimport { DnDFileListDragLayer } from '../file-list/DnDFileListDragLayer';\nimport { HotkeyListener } from './HotkeyListener';\n\nexport interface ChonkyPresentationLayerProps {}\n\nexport const ChonkyPresentationLayer: React.FC<ChonkyPresentationLayerProps> = ({\n    children,\n}) => {\n    const dispatch = useDispatch();\n    const fileActionIds = useSelector(selectFileActionIds);\n    const dndDisabled = useSelector(selectIsDnDDisabled);\n    const clearSelectionOnOutsideClick = useSelector(\n        selectClearSelectionOnOutsideClick\n    );\n\n    // Deal with clicks outside of Chonky\n    const handleClickAway = useCallback(\n        (event: React.MouseEvent<Document>) => {\n            if (!clearSelectionOnOutsideClick || elementIsInsideButton(event.target)) {\n                // We only clear out the selection on outside click if the click target\n                // was not a button. We don't want to clear out the selection when a\n                // button is clicked because Chonky users might want to trigger some\n                // selection-related action on that button click.\n                return;\n            }\n            dispatch(reduxActions.clearSelection());\n        },\n        [dispatch, clearSelectionOnOutsideClick]\n    );\n\n    // Generate necessary components\n    const hotkeyListenerComponents = useMemo(\n        () =>\n            fileActionIds.map(actionId => (\n                <HotkeyListener\n                    key={`file-action-listener-${actionId}`}\n                    fileActionId={actionId}\n                />\n            )),\n        [fileActionIds]\n    );\n\n    const dndContextAvailable = useDndContextAvailable();\n    const showContextMenu = useContextMenuTrigger();\n\n    const classes = useStyles();\n    return (\n        <ClickAwayListener onClickAway={handleClickAway}>\n            <Box className={classes.chonkyRoot} onContextMenu={showContextMenu}>\n                {!dndDisabled && dndContextAvailable && <DnDFileListDragLayer />}\n                {hotkeyListenerComponents}\n                {children ? children : null}\n            </Box>\n        </ClickAwayListener>\n    );\n};\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    chonkyRoot: {\n        backgroundColor: theme.palette.background.paper,\n        border: `solid 1px ${theme.palette.divider}`,\n        padding: theme.margins.rootLayoutMargin,\n        fontSize: theme.fontSizes.rootPrimary,\n        color: theme.palette.text.primary,\n        touchAction: 'manipulation', // Disabling zoom on double tap\n        fontFamily: 'sans-serif',\n        flexDirection: 'column',\n        boxSizing: 'border-box',\n        textAlign: 'left',\n        borderRadius: 4,\n        display: 'flex',\n        height: '100%',\n\n        // Disabling select\n        webkitTouchCallout: 'none',\n        webkitUserSelect: 'none',\n        mozUserSelect: 'none',\n        msUserSelect: 'none',\n        userSelect: 'none',\n    },\n}));\n","import React, { useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { reduxActions } from '../../redux/reducers';\nimport { selectContextMenuMounted } from '../../redux/selectors';\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\nimport { findElementAmongAncestors } from '../../util/helpers';\nimport { useInstanceVariable } from '../../util/hooks-helpers';\n\nexport const findClosestChonkyFileId = (\n    element: HTMLElement | any\n): Nullable<string> => {\n    const fileEntryWrapperDiv = findElementAmongAncestors(\n        element,\n        (element: any) =>\n            element.tagName &&\n            element.tagName.toLowerCase() === 'div' &&\n            element.dataset &&\n            element.dataset.chonkyFileId\n    );\n    return fileEntryWrapperDiv ? fileEntryWrapperDiv.dataset.chonkyFileId! : null;\n};\n\nexport const useContextMenuTrigger = () => {\n    const dispatch = useDispatch();\n    const contextMenuMountedRef = useInstanceVariable(\n        useSelector(selectContextMenuMounted)\n    );\n    return useCallback(\n        (event: React.MouseEvent<HTMLDivElement>) => {\n            // Use default browser context menu when Chonky context menu component\n            // is not mounted.\n            if (!contextMenuMountedRef.current) return;\n            // Users can use Alt+Right Click to bring up browser's default\n            // context menu instead of Chonky's context menu.\n            if (event.altKey) return;\n\n            event.preventDefault();\n\n            const triggerFileId = findClosestChonkyFileId(event.target);\n            dispatch(\n                thunkRequestFileAction(ChonkyActions.OpenFileContextMenu, {\n                    clientX: event.clientX,\n                    clientY: event.clientY,\n                    triggerFileId,\n                })\n            );\n        },\n        [contextMenuMountedRef, dispatch]\n    );\n};\n\nexport const useContextMenuDismisser = () => {\n    const dispatch = useDispatch();\n    return useCallback(() => dispatch(reduxActions.hideContextMenu()), [dispatch]);\n};\n","import {\n    createMuiTheme,\n    ThemeProvider as MuiThemeProvider,\n} from '@material-ui/core/styles';\nimport merge from 'deepmerge';\nimport React, { ReactNode, useMemo } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { IntlProvider } from 'react-intl';\nimport { ThemeProvider } from 'react-jss';\nimport { Provider as ReduxProvider } from 'react-redux';\nimport shortid from 'shortid';\n\nimport { useChonkyStore } from '../../redux/store';\nimport { FileBrowserHandle, FileBrowserProps } from '../../types/file-browser.types';\nimport { defaultConfig } from '../../util/default-config';\nimport { getValueOrFallback } from '../../util/helpers';\nimport { useStaticValue } from '../../util/hooks-helpers';\nimport { ChonkyFormattersContext, defaultFormatters } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport {\n    darkThemeOverride,\n    lightTheme,\n    mobileThemeOverride,\n    useIsMobileBreakpoint,\n} from '../../util/styles';\nimport { ChonkyBusinessLogic } from '../internal/ChonkyBusinessLogic';\nimport { ChonkyIconPlaceholder } from '../internal/ChonkyIconPlaceholder';\nimport { ChonkyPresentationLayer } from '../internal/ChonkyPresentationLayer';\n\n// if (process.env.NODE_ENV === 'development') {\n//     const whyDidYouRender = require('@welldone-software/why-did-you-render');\n//     whyDidYouRender(React, {\n//         trackAllPureComponents: true,\n//     });\n// }\n\nexport const FileBrowser = React.forwardRef<\n    FileBrowserHandle,\n    FileBrowserProps & { children?: ReactNode }\n>((props, ref) => {\n    const { instanceId, iconComponent, children } = props;\n    const disableDragAndDrop = getValueOrFallback(\n        props.disableDragAndDrop,\n        defaultConfig.disableDragAndDrop,\n        'boolean'\n    );\n    const disableDragAndDropProvider = getValueOrFallback(\n        props.disableDragAndDropProvider,\n        defaultConfig.disableDragAndDropProvider,\n        'boolean'\n    );\n    const darkMode = getValueOrFallback(\n        props.darkMode,\n        defaultConfig.darkMode,\n        'boolean'\n    );\n    const i18n = getValueOrFallback(props.i18n, defaultConfig.i18n);\n    const formatters = useMemo(() => ({ ...defaultFormatters, ...i18n?.formatters }), [\n        i18n,\n    ]);\n\n    const chonkyInstanceId = useStaticValue(() => instanceId ?? shortid.generate());\n    const store = useChonkyStore(chonkyInstanceId);\n\n    const isMobileBreakpoint = useIsMobileBreakpoint();\n    const theme = useMemo(() => {\n        const muiTheme = createMuiTheme({\n            palette: { type: darkMode ? 'dark' : 'light' },\n        });\n        const combinedTheme = merge(\n            muiTheme,\n            merge(lightTheme, darkMode ? darkThemeOverride : {})\n        );\n        return isMobileBreakpoint\n            ? merge(combinedTheme, mobileThemeOverride)\n            : combinedTheme;\n    }, [darkMode, isMobileBreakpoint]);\n\n    const chonkyComps = (\n        <>\n            <ChonkyBusinessLogic ref={ref} {...props} />\n            <ChonkyPresentationLayer>{children}</ChonkyPresentationLayer>\n        </>\n    );\n\n    return (\n        <IntlProvider locale=\"en\" defaultLocale=\"en\" {...i18n}>\n            <ChonkyFormattersContext.Provider value={formatters}>\n                <ReduxProvider store={store}>\n                    <ThemeProvider theme={theme}>\n                        <MuiThemeProvider theme={theme}>\n                            <ChonkyIconContext.Provider\n                                value={\n                                    iconComponent ??\n                                    defaultConfig.iconComponent ??\n                                    ChonkyIconPlaceholder\n                                }\n                            >\n                                {disableDragAndDrop || disableDragAndDropProvider ? (\n                                    chonkyComps\n                                ) : (\n                                    <DndProvider backend={HTML5Backend}>\n                                        {chonkyComps}\n                                    </DndProvider>\n                                )}\n                            </ChonkyIconContext.Provider>\n                        </MuiThemeProvider>\n                    </ThemeProvider>\n                </ReduxProvider>\n            </ChonkyFormattersContext.Provider>\n        </IntlProvider>\n    );\n});\nFileBrowser.displayName = 'FileBrowser';\n","import { useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { selectFolderChain } from '../../redux/selectors';\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\nimport { FileData } from '../../types/file.types';\nimport { FileHelper } from '../../util/file-helper';\n\nexport interface FolderChainItem {\n    file: Nullable<FileData>;\n    disabled: boolean;\n    onClick?: () => void;\n}\n\nexport const useFolderChainItems = (): FolderChainItem[] => {\n    const folderChain = useSelector(selectFolderChain);\n    const dispatch = useDispatch();\n\n    const folderChainItems = useMemo(() => {\n        const items: FolderChainItem[] = [];\n        if (!folderChain) return items;\n\n        for (let i = 0; i < folderChain.length; ++i) {\n            const file = folderChain[i];\n            items.push({\n                file,\n                disabled: !file,\n                onClick:\n                    !FileHelper.isOpenable(file) || i === folderChain.length - 1\n                        ? undefined\n                        : () =>\n                              dispatch(\n                                  thunkRequestFileAction(ChonkyActions.OpenFiles, {\n                                      targetFile: file,\n                                      files: [file],\n                                  })\n                              ),\n            });\n        }\n        return items;\n    }, [dispatch, folderChain]);\n    return folderChainItems;\n};\n","import { MaybePromise, Nullable } from 'tsdef';\n\nimport { FileActionState } from './action-handler.types';\nimport { FileViewConfig } from './file-view.types';\nimport { FileFilter, FileMap } from './file.types';\nimport { ChonkyIconName } from './icons.types';\nimport { ChonkyDispatch, RootState } from './redux.types';\nimport { FileSortKeySelector } from './sort.types';\n\nexport interface FileAction {\n    /**\n     * Unique file action ID. If you set the action ID to one of the built-in Chonky\n     * action action IDs, you custom action definition will override the built-in\n     * definition.\n     */\n    id: string;\n    /**\n     * When set to `true`, the action will only be active (dispatchable) when user\n     * selects one or more files. If `fileFilter` is defined, it will be applied to\n     * selection before checking if its empty.\n     */\n    requiresSelection?: boolean; // Requires selection of 1+ files\n    /**\n     * A predicate that determines whether a file should be included in the selection\n     * for this action.\n     */\n    fileFilter?: FileFilter;\n    /**\n     * List of hotkeys that should trigger this action, defined using `hotkey-js`\n     * notation.\n     * @see https://www.npmjs.com/package/hotkeys-js\n     */\n    hotkeys?: string[] | readonly string[];\n    /**\n     * When button is defined and `toolbar` or `contextMenu` is set to `true`, a\n     * button will be added to the relevant UI component. Clicking on this button\n     * will active this action. The appearance of the button will change based on\n     * the action definition and the current Chonky state.\n     */\n    button?: FileActionButton;\n    /**\n     * When `sortKeySelector` is specified, the action becomes a sorting toggle. When\n     * this action is activated, it will sort files using the key selector, toggling\n     * between Ascending and Descending orders.\n     */\n    sortKeySelector?: FileSortKeySelector;\n    /**\n     * When `fileViewConfig` is specified, triggering this action will apply the\n     * provided config to Chonky's file view.\n     */\n    fileViewConfig?: FileViewConfig;\n    /**\n     * When `option` is specified, the action becomes an option toggle. When the action\n     * is activated, the boolean value of the option will be toggled.\n     */\n    option?: FileActionOption;\n    /**\n     * When selection transform is defined, activating this action will update the file\n     * selection. If the transform function returns `null`, selection will be left\n     * untouched.\n     */\n    selectionTransform?: FileSelectionTransform;\n    /**\n     * When effect is defined, it will be called right before dispatching the action to\n     * the user defined action handler. If the effect function returns a promise, Chonky\n     * will wait for the promise to resolve or fail before dispatching the action to the\n     * handler. If this function returns `true`, the file action will NOT be dispatched\n     * the the handler.\n     */\n    effect?: FileActionEffect;\n    /**\n     * When customVisibility is defined, it will change the display state of the file action\n     * The function must return the visibility as one of the CustomVisibilityState values:\n     *  - Hidden\n     *  - Disabled\n     *  - Default\n     *  - Active\n     */\n    customVisibility?: () => CustomVisibilityState;\n    /**\n     * Field used to infer the type of action payload. It is used solely for Typescript\n     * type inference and action validation.\n     */\n    __payloadType?: any;\n    /**\n     * Field used to infer the type of extra state for this action. It is used solely\n     * for Typescript type inference and action validation.\n     */\n    __extraStateType?: any;\n}\n\nexport interface FileActionButton {\n    name: string; // Button name\n    toolbar?: boolean; // Whether to show the button in the toolbar\n    contextMenu?: boolean; // Whether to show the button in the context menu\n    group?: string; // Button group (dropdown in toolbar or section in context menu)\n    tooltip?: string; // Help tooltip text\n    icon?: ChonkyIconName | string | any; // Icon name\n    iconOnly?: boolean; // Whether to only display the icon\n}\n\nexport interface FileActionOption {\n    id: string; // Unique option ID\n    defaultValue: boolean; // Whether the option is enabled by default (required)\n}\n\nexport type FileSelectionTransform = (data: {\n    prevSelection: Set<string>;\n    fileIds: ReadonlyArray<string>;\n    fileMap: Readonly<FileMap>;\n    hiddenFileIds: Set<string>;\n}) => Nullable<Set<string>>;\n\nexport type FileActionEffect<Action extends FileAction = any> = (data: {\n    action: Action;\n    payload: Action['__payloadType'];\n    state: FileActionState<{}>; // extra state is empty on purpose\n    reduxDispatch: ChonkyDispatch;\n    getReduxState: () => RootState;\n}) => MaybePromise<undefined | boolean | void>;\n\nexport type FileActionMap = { [actonId: string]: FileAction };\n\nexport enum CustomVisibilityState {\n    Hidden, \n    Disabled, \n    Default,\n    Active\n};\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { DragSourceMonitor, DropTargetMonitor } from 'react-dnd';\nimport { getEmptyImage } from 'react-dnd-html5-backend';\nimport { useDispatch, useSelector, useStore } from 'react-redux';\nimport { ExcludeKeys, Nullable } from 'tsdef';\n\nimport { EssentialActions } from '../action-definitions/essential';\nimport { ChonkyActions } from '../action-definitions/index';\nimport {\n    selectCurrentFolder,\n    selectFolderChain,\n    selectInstanceId,\n    selectSelectedFiles,\n} from '../redux/selectors';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport { StartDragNDropPayload } from '../types/action-payloads.types';\nimport {\n    ChonkyDndDropResult,\n    ChonkyDndFileEntryItem,\n    ChonkyDndFileEntryType,\n} from '../types/dnd.types';\nimport { DndEntryState } from '../types/file-list.types';\nimport { FileData } from '../types/file.types';\nimport { useDragIfAvailable, useDropIfAvailable } from './dnd-fallback';\nimport { FileHelper } from './file-helper';\nimport { useInstanceVariable } from './hooks-helpers';\n\nexport const useFileDrag = (file: Nullable<FileData>) => {\n    // Prepare the dnd payload\n    const store = useStore();\n    const fileRef = useInstanceVariable(file);\n    const getDndStartPayload = useCallback<() => StartDragNDropPayload>(() => {\n        const reduxState = store.getState();\n        return {\n            sourceInstanceId: selectInstanceId(reduxState),\n            source: selectCurrentFolder(reduxState),\n            // We force non-null type below because by convention, if drag & drop for\n            // this file was possible, it must have been non-null.\n            draggedFile: fileRef.current!,\n            selectedFiles: selectSelectedFiles(reduxState),\n        };\n    }, [store, fileRef]);\n\n    // For drag source\n    const dispatch = useDispatch();\n    const canDrag = useCallback(() => FileHelper.isDraggable(fileRef.current), [\n        fileRef,\n    ]);\n    const onDragStart = useCallback((): ChonkyDndFileEntryItem => {\n        const item: ChonkyDndFileEntryItem = {\n            type: ChonkyDndFileEntryType,\n            payload: getDndStartPayload(),\n        };\n        dispatch(thunkRequestFileAction(ChonkyActions.StartDragNDrop, item.payload));\n        return item;\n    }, [dispatch, getDndStartPayload]);\n    const onDragEnd = useCallback(\n        (item: ChonkyDndFileEntryItem, monitor: DragSourceMonitor) => {\n            const dropResult = monitor.getDropResult() as ChonkyDndDropResult;\n            if (\n                !FileHelper.isDraggable(item.payload.draggedFile) ||\n                !dropResult ||\n                !dropResult.dropTarget\n            ) {\n                return;\n            }\n\n            dispatch(\n                thunkRequestFileAction(ChonkyActions.EndDragNDrop, {\n                    ...item.payload,\n                    destination: dropResult.dropTarget,\n                    copy: dropResult.dropEffect === 'copy',\n                })\n            );\n        },\n        [dispatch]\n    );\n\n    // Create refs for react-dnd hooks\n    const item = useMemo<ChonkyDndFileEntryItem>(\n        () => ({\n            type: ChonkyDndFileEntryType,\n            // Payload is actually added in `onDragStart`\n            payload: {} as StartDragNDropPayload,\n        }),\n        []\n    );\n    const collect = useCallback(monitor => ({ isDragging: monitor.isDragging() }), []);\n    const [{ isDragging: dndIsDragging }, drag, preview] = useDragIfAvailable({\n        item,\n        canDrag,\n        begin: onDragStart,\n        // @ts-ignore\n        end: onDragEnd,\n        collect,\n    });\n\n    useEffect(() => {\n        // Set drag preview to an empty image because `DnDFileListDragLayer` will\n        // provide its own preview.\n        preview(getEmptyImage(), { captureDraggingState: true });\n    }, [preview]);\n\n    return { dndIsDragging, drag };\n};\n\ninterface UseFileDropParams {\n    file: Nullable<FileData>;\n    forceDisableDrop?: boolean;\n    includeChildrenDrops?: boolean;\n}\n\nexport const useFileDrop = ({\n    file,\n    forceDisableDrop,\n    includeChildrenDrops,\n}: UseFileDropParams) => {\n    const folderChainRef = useInstanceVariable(useSelector(selectFolderChain));\n    const onDrop = useCallback(\n        (_item: ChonkyDndFileEntryItem, monitor) => {\n            if (!monitor.canDrop()) return;\n            const customDropResult: ExcludeKeys<ChonkyDndDropResult, 'dropEffect'> = {\n                dropTarget: file,\n            };\n            return customDropResult;\n        },\n        [file]\n    );\n    const canDrop = useCallback(\n        (item: ChonkyDndFileEntryItem, monitor: DropTargetMonitor) => {\n            if (\n                forceDisableDrop ||\n                !FileHelper.isDroppable(file) ||\n                (!monitor.isOver({ shallow: true }) && !includeChildrenDrops)\n            ) {\n                return false;\n            }\n            const { source, draggedFile, selectedFiles } = item.payload;\n\n            // We prevent folders from being dropped into themselves. We also prevent\n            // any folder from current folder chain being moved - we can't move the\n            // folder that we are currently in.\n            const prohibitedFileIds = new Set<string>();\n            prohibitedFileIds.add(file.id);\n            folderChainRef.current.map(folder => {\n                if (folder) prohibitedFileIds.add(folder.id);\n            });\n            const movedFiles: FileData[] = [draggedFile, ...selectedFiles];\n            for (const currFile of movedFiles) {\n                if (prohibitedFileIds.has(currFile.id)) return false;\n            }\n\n            // Finally, prohibit files from being moved into their parent folder\n            // (which is a no-op).\n            return file.id !== source?.id;\n        },\n        [forceDisableDrop, file, includeChildrenDrops, folderChainRef]\n    );\n    const collect = useCallback(\n        monitor => ({\n            isOver: monitor.isOver(),\n            isOverCurrent: monitor.isOver({ shallow: true }),\n            canDrop: monitor.canDrop(),\n        }),\n        []\n    );\n    const [\n        { isOver: dndIsOver, isOverCurrent: dndIsOverCurrent, canDrop: dndCanDrop },\n        drop,\n    ] = useDropIfAvailable({\n        accept: ChonkyDndFileEntryType,\n        drop: onDrop,\n        canDrop,\n        collect,\n    });\n    return { dndIsOver, dndIsOverCurrent, dndCanDrop, drop };\n};\n\nexport const useFileEntryDnD = (file: Nullable<FileData>) => {\n    const { dndIsDragging, drag } = useFileDrag(file);\n    const { dndIsOver, dndCanDrop, drop } = useFileDrop({ file });\n    const dndState = useMemo<DndEntryState>(\n        () => ({\n            dndIsDragging,\n            dndIsOver,\n            dndCanDrop,\n        }),\n        [dndCanDrop, dndIsDragging, dndIsOver]\n    );\n    return {\n        drop,\n        drag,\n        dndState,\n    };\n};\n\nexport const useDndHoverOpen = (file: Nullable<FileData>, dndState: DndEntryState) => {\n    const dispatch = useDispatch();\n    const currentFolderRef = useInstanceVariable(useSelector(selectCurrentFolder));\n    useEffect(() => {\n        let timeout: Nullable<any> = null;\n        if (\n            dndState.dndIsOver &&\n            FileHelper.isDndOpenable(file) &&\n            file.id !== currentFolderRef.current?.id\n        ) {\n            timeout = setTimeout(\n                () =>\n                    dispatch(\n                        thunkRequestFileAction(EssentialActions.OpenFiles, {\n                            targetFile: file,\n                            files: [file],\n                        })\n                    ),\n                // TODO: Make this timeout configurable\n                1500\n            );\n        }\n        return () => {\n            if (timeout) clearTimeout(timeout);\n        };\n    }, [dispatch, file, dndState.dndIsOver, currentFolderRef]);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\n\nimport { makeLocalChonkyStyles } from '../../util/styles';\n\nexport interface TextPlaceholderProps {\n    minLength: number;\n    maxLength: number;\n}\n\nconst getRandomInt = (min: number, max: number) => {\n    return min + Math.floor(Math.random() * Math.floor(max - min));\n};\nexport const TextPlaceholder: React.FC<TextPlaceholderProps> = React.memo(props => {\n    const { minLength, maxLength } = props;\n\n    const placeholderLength = getRandomInt(minLength, maxLength);\n    const whitespace = '&nbsp;'.repeat(placeholderLength);\n\n    const classes = useStyles();\n    return (\n        <span\n            className={classes.textPlaceholder}\n            dangerouslySetInnerHTML={{ __html: whitespace }}\n        />\n    );\n});\n\nconst useStyles = makeLocalChonkyStyles(() => ({\n    '@keyframes loading-placeholder': {\n        '0%': { opacity: 0.2 },\n        '50%': { opacity: 0.4 },\n        '100%': { opacity: 0.2 },\n    },\n    textPlaceholder: {\n        animationName: '$loading-placeholder',\n        animationIterationCount: 'infinite',\n        animationTimingFunction: 'linear',\n        animationDuration: '1.5s',\n        backgroundColor: '#ccc',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        borderRadius: 4,\n        maxWidth: '40%',\n        minWidth: 20,\n    },\n}));\n","import React, {\n    HTMLProps, useCallback, useContext, useEffect, useMemo, useRef, useState\n} from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nullable, Undefinable } from 'tsdef';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { selectThumbnailGenerator } from '../../redux/selectors';\nimport { thunkRequestFileAction } from '../../redux/thunks/dispatchers.thunks';\nimport { DndEntryState } from '../../types/file-list.types';\nimport { FileData } from '../../types/file.types';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { FileHelper } from '../../util/file-helper';\nimport { ChonkyIconContext, ColorsDark, ColorsLight, useIconData } from '../../util/icon-helper';\nimport { Logger } from '../../util/logger';\nimport { TextPlaceholder } from '../external/TextPlaceholder';\nimport { KeyboardClickEvent, MouseClickEvent } from '../internal/ClickableWrapper';\nimport { FileEntryState } from './GridEntryPreview';\n\nexport const useFileEntryHtmlProps = (file: Nullable<FileData>): HTMLProps<HTMLDivElement> => {\n    return useMemo(() => {\n        const dataProps: { [prop: string]: Undefinable<string> } = {\n            'data-test-id': 'file-entry',\n            'data-chonky-file-id': file ? file.id : undefined,\n        };\n\n        return {\n            role: 'listitem',\n            ...dataProps,\n        };\n    }, [file]);\n};\n\nexport const useFileEntryState = (file: Nullable<FileData>, selected: boolean, focused: boolean) => {\n    const iconData = useIconData(file);\n    const { thumbnailUrl, thumbnailLoading } = useThumbnailUrl(file);\n\n    return useMemo<FileEntryState>(() => {\n        const fileColor = thumbnailUrl ? ColorsDark[iconData.colorCode] : ColorsLight[iconData.colorCode];\n        const iconSpin = thumbnailLoading || !file;\n        const icon = thumbnailLoading ? ChonkyIconName.loading : iconData.icon;\n\n        return {\n            childrenCount: FileHelper.getChildrenCount(file),\n            icon: file && file.icon !== undefined ? file.icon : icon,\n            iconSpin: iconSpin,\n            thumbnailUrl: thumbnailUrl,\n            color: file && file.color !== undefined ? file.color : fileColor,\n            selected: selected,\n            focused: !!focused,\n        };\n    }, [file, focused, iconData, selected, thumbnailLoading, thumbnailUrl]);\n};\n\nexport const useDndIcon = (dndState: DndEntryState) => {\n    let dndIconName: Nullable<ChonkyIconName> = null;\n    if (dndState.dndIsOver) {\n        const showDropIcon = dndState.dndCanDrop;\n        dndIconName = showDropIcon ? ChonkyIconName.dndCanDrop : ChonkyIconName.dndCannotDrop;\n    } else if (dndState.dndIsDragging) {\n        dndIconName = ChonkyIconName.dndDragging;\n    }\n\n    return dndIconName;\n};\n\nexport const useModifierIconComponents = (file: Nullable<FileData>) => {\n    const modifierIcons: ChonkyIconName[] = useMemo(() => {\n        const modifierIcons: ChonkyIconName[] = [];\n        if (FileHelper.isHidden(file)) modifierIcons.push(ChonkyIconName.hidden);\n        if (FileHelper.isSymlink(file)) modifierIcons.push(ChonkyIconName.symlink);\n        if (FileHelper.isEncrypted(file)) modifierIcons.push(ChonkyIconName.lock);\n        return modifierIcons;\n    }, [file]);\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    const modifierIconComponents = useMemo(\n        () => modifierIcons.map((icon, index) => <ChonkyIcon key={`file-modifier-${index}`} icon={icon} />),\n        // For some reason ESLint marks `ChonkyIcon` as an unnecessary dependency,\n        // but we expect it can change at runtime so we disable the check.\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [ChonkyIcon, modifierIcons]\n    );\n    return modifierIconComponents;\n};\n\nconst _extname = (fileName: string) => {\n    const parts = fileName.split('.');\n    if (parts.length) {\n        return `.${parts[parts.length - 1]}`;\n    }\n    return '';\n};\n\nexport const useFileNameComponent = (file: Nullable<FileData>) => {\n    return useMemo(() => {\n        if (!file) return <TextPlaceholder minLength={15} maxLength={20} />;\n\n        let name;\n        let extension = null;\n\n        const isDir = FileHelper.isDirectory(file);\n        if (isDir) {\n            name = file.name;\n        } else {\n            extension = file.ext ?? _extname(file.name);\n            name = file.name.substr(0, file.name.length - extension.length);\n        }\n\n        return (\n            <>\n                {name}\n                {extension && <span className=\"chonky-file-entry-description-title-extension\">{extension}</span>}\n            </>\n        );\n    }, [file]);\n};\n\nexport const useThumbnailUrl = (file: Nullable<FileData>) => {\n    const thumbnailGenerator = useSelector(selectThumbnailGenerator);\n    const [thumbnailUrl, setThumbnailUrl] = useState<Nullable<string>>(null);\n    const [thumbnailLoading, setThumbnailLoading] = useState<boolean>(false);\n    const loadingAttempts = useRef(0);\n\n    useEffect(() => {\n        let loadingCancelled = false;\n\n        if (file) {\n            if (thumbnailGenerator) {\n                if (loadingAttempts.current === 0) {\n                    setThumbnailLoading(true);\n                }\n                loadingAttempts.current++;\n                Promise.resolve()\n                    .then(() => thumbnailGenerator(file))\n                    .then((thumbnailUrl: any) => {\n                        if (loadingCancelled) return;\n                        setThumbnailLoading(false);\n\n                        if (thumbnailUrl && typeof thumbnailUrl === 'string') {\n                            setThumbnailUrl(thumbnailUrl);\n                        }\n                    })\n                    .catch(error => {\n                        if (!loadingCancelled) setThumbnailLoading(false);\n                        Logger.error(`User-defined \"thumbnailGenerator\" handler threw an error: ${error.message}`);\n                    });\n            } else if (file.thumbnailUrl) {\n                setThumbnailUrl(file.thumbnailUrl);\n            }\n        }\n\n        return () => {\n            loadingCancelled = true;\n        };\n    }, [file, setThumbnailUrl, setThumbnailLoading, thumbnailGenerator]);\n\n    return { thumbnailUrl, thumbnailLoading };\n};\n\nexport const useFileClickHandlers = (file: Nullable<FileData>, displayIndex: number) => {\n    const dispatch = useDispatch();\n\n    // Prepare base handlers\n    const onMouseClick = useCallback(\n        (event: MouseClickEvent, clickType: 'single' | 'double') => {\n            if (!file) return;\n\n            dispatch(\n                thunkRequestFileAction(ChonkyActions.MouseClickFile, {\n                    clickType,\n                    file,\n                    fileDisplayIndex: displayIndex,\n                    altKey: event.altKey,\n                    ctrlKey: event.ctrlKey,\n                    shiftKey: event.shiftKey,\n                })\n            );\n        },\n        [dispatch, file, displayIndex]\n    );\n    const onKeyboardClick = useCallback(\n        (event: KeyboardClickEvent) => {\n            if (!file) return;\n\n            dispatch(\n                thunkRequestFileAction(ChonkyActions.KeyboardClickFile, {\n                    file,\n                    fileDisplayIndex: displayIndex,\n                    enterKey: event.enterKey,\n                    spaceKey: event.spaceKey,\n                    altKey: event.altKey,\n                    ctrlKey: event.ctrlKey,\n                    shiftKey: event.shiftKey,\n                })\n            );\n        },\n        [dispatch, file, displayIndex]\n    );\n\n    // Prepare single/double click handlers\n    const onSingleClick = useCallback((event: MouseClickEvent) => onMouseClick(event, 'single'), [onMouseClick]);\n    const onDoubleClick = useCallback((event: MouseClickEvent) => onMouseClick(event, 'double'), [onMouseClick]);\n\n    return {\n        onSingleClick,\n        onDoubleClick,\n        onKeyboardClick,\n    };\n};\n","import { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Nullable } from 'tsdef';\n\nimport { ChonkyActions } from '../action-definitions/index';\nimport {\n    selectFileActionData,\n    selectFileViewConfig,\n    selectOptionValue,\n    selectParentFolder,\n    selectSelectedFilesForActionCount,\n    selectSortActionId,\n    selectSortOrder,\n} from '../redux/selectors';\nimport { useParamSelector } from '../redux/store';\nimport { thunkRequestFileAction } from '../redux/thunks/dispatchers.thunks';\nimport { ChonkyIconName } from '../types/icons.types';\nimport { CustomVisibilityState } from '../types/action.types';\nimport { SortOrder } from '../types/sort.types';\nimport { FileHelper } from './file-helper';\n\nexport const useFileActionTrigger = (fileActionId: string) => {\n    const dispatch = useDispatch();\n    const fileAction = useParamSelector(selectFileActionData, fileActionId);\n    return useCallback(() => dispatch(thunkRequestFileAction(fileAction, undefined)), [\n        dispatch,\n        fileAction,\n    ]);\n};\n\nexport const useFileActionProps = (\n    fileActionId: string\n): { icon: Nullable<ChonkyIconName | string>; active: boolean; disabled: boolean } => {\n    const parentFolder = useSelector(selectParentFolder);\n    const fileViewConfig = useSelector(selectFileViewConfig);\n\n    const sortActionId = useSelector(selectSortActionId);\n    const sortOrder = useSelector(selectSortOrder);\n\n    const action = useParamSelector(selectFileActionData, fileActionId);\n    // @ts-ignore\n    const optionValue = useParamSelector(selectOptionValue, action?.option?.id);\n\n    const actionSelectionSize = useParamSelector(\n        selectSelectedFilesForActionCount,\n        fileActionId\n    );\n\n    const actionSelectionEmpty = actionSelectionSize === 0;\n\n    return useMemo(() => {\n        if (!action) return { icon: null, active: false, disabled: true };\n\n        let icon = action.button?.icon ?? null;\n        if (action.sortKeySelector) {\n            if (sortActionId === action.id) {\n                if (sortOrder === SortOrder.ASC) {\n                    icon = ChonkyIconName.sortAsc;\n                } else {\n                    icon = ChonkyIconName.sortDesc;\n                }\n            } else {\n                icon = ChonkyIconName.placeholder;\n            }\n        } else if (action.option) {\n            if (optionValue) {\n                icon = ChonkyIconName.toggleOn;\n            } else {\n                icon = ChonkyIconName.toggleOff;\n            }\n        }\n\n        const isSortButtonAndCurrentSort = action.id === sortActionId;\n        const isFileViewButtonAndCurrentView = action.fileViewConfig === fileViewConfig;\n        const isOptionAndEnabled = action.option ? !!optionValue : false;\n\n        let customDisabled = false;\n        let customActive = false;\n        if (action.customVisibility !== undefined) {\n            customDisabled = action.customVisibility() === CustomVisibilityState.Disabled;\n            customActive = action.customVisibility() === CustomVisibilityState.Active;\n        }\n        const active =\n            isSortButtonAndCurrentSort ||\n            isFileViewButtonAndCurrentView ||\n            isOptionAndEnabled ||\n            customActive;\n        \n        let disabled: boolean = (!!action.requiresSelection && actionSelectionEmpty) || customDisabled;\n\n        if (action.id === ChonkyActions.OpenParentFolder.id) {\n            // We treat `open_parent_folder` file action as a special case as it\n            // requires the parent folder to be present to work...\n            disabled = disabled || !FileHelper.isOpenable(parentFolder);\n        }\n\n        return { icon, active, disabled };\n    }, [\n        parentFolder,\n        fileViewConfig,\n        sortActionId,\n        sortOrder,\n        action,\n        optionValue,\n        actionSelectionEmpty,\n    ]);\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport Button from '@material-ui/core/Button';\nimport React, { useContext } from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { selectFileActionData } from '../../redux/selectors';\nimport { useParamSelector } from '../../redux/store';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { CustomVisibilityState } from '../../types/action.types';\nimport { useFileActionProps, useFileActionTrigger } from '../../util/file-actions';\nimport { useLocalizedFileActionStrings } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, important, makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface ToolbarButtonProps {\n    className?: string;\n    text: string;\n    tooltip?: string;\n    active?: boolean;\n    icon?: Nullable<ChonkyIconName | string>;\n    iconOnly?: boolean;\n    onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    disabled?: boolean;\n    dropdown?: boolean;\n}\n\nexport const ToolbarButton: React.FC<ToolbarButtonProps> = React.memo(props => {\n    const {\n        className: externalClassName,\n        text,\n        tooltip,\n        active,\n        icon,\n        iconOnly,\n        onClick,\n        disabled,\n        dropdown,\n    } = props;\n    const classes = useStyles();\n    const ChonkyIcon = useContext(ChonkyIconContext);\n\n    const iconComponent =\n        icon || iconOnly ? (\n            <div className={iconOnly ? '' : classes.iconWithText}>\n                <ChonkyIcon\n                    icon={icon ? icon : ChonkyIconName.fallbackIcon}\n                    fixedWidth={true}\n                />\n            </div>\n        ) : null;\n\n    const className = c({\n        [externalClassName ?? '']: true,\n        [classes.baseButton]: true,\n        [classes.iconOnlyButton]: iconOnly,\n        [classes.activeButton]: !!active,\n    });\n    return (\n        <Button\n            className={className}\n            onClick={onClick}\n            title={tooltip ? tooltip : text}\n            disabled={disabled || !onClick}\n        >\n            {iconComponent}\n            {text && !iconOnly && <span>{text}</span>}\n            {dropdown && (\n                <div className={classes.iconDropdown}>\n                    <ChonkyIcon\n                        icon={icon ? icon : ChonkyIconName.dropdown}\n                        fixedWidth={true}\n                    />\n                </div>\n            )}\n        </Button>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    baseButton: {\n        fontSize: important(theme.toolbar.fontSize),\n        textTransform: important('none'),\n        letterSpacing: important(0),\n        minWidth: important('auto'),\n        lineHeight: theme.toolbar.lineHeight,\n        height: theme.toolbar.size,\n        paddingBottom: important(0),\n        paddingTop: important(0),\n    },\n    iconWithText: {\n        marginRight: 8,\n    },\n    iconOnlyButton: {\n        width: theme.toolbar.size,\n        textAlign: 'center',\n    },\n    iconDropdown: {\n        fontSize: '0.7em',\n        marginLeft: 2,\n        marginTop: 1,\n    },\n    activeButton: {\n        color: important(theme.colors.textActive),\n    },\n}));\n\nexport interface SmartToolbarButtonProps {\n    fileActionId: string;\n}\n\nexport const SmartToolbarButton: React.FC<SmartToolbarButtonProps> = React.memo(\n    props => {\n        const { fileActionId } = props;\n\n        const action = useParamSelector(selectFileActionData, fileActionId);\n        const triggerAction = useFileActionTrigger(fileActionId);\n        const { icon, active, disabled } = useFileActionProps(fileActionId);\n        const { buttonName, buttonTooltip } = useLocalizedFileActionStrings(action);\n\n        if (!action) return null;\n        const { button } = action;\n        if (!button) return null;\n        if (action.customVisibility !== undefined && action.customVisibility() === CustomVisibilityState.Hidden) return null;\n\n        return (\n            <ToolbarButton\n                text={buttonName}\n                tooltip={buttonTooltip}\n                icon={icon}\n                iconOnly={button.iconOnly}\n                active={active}\n                onClick={triggerAction}\n                disabled={disabled}\n            />\n        );\n    }\n);\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useContext, useMemo } from 'react';\n\nimport { DndEntryState } from '../../types/file-list.types';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { useDndHoverOpen, useFileDrop } from '../../util/dnd';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, important, makeLocalChonkyStyles } from '../../util/styles';\nimport { useDndIcon } from '../file-list/FileEntry-hooks';\nimport { FolderChainItem } from './FileNavbar-hooks';\nimport { ToolbarButton } from './ToolbarButton';\n\nexport interface FolderChainButtonProps {\n    first: boolean;\n    current: boolean;\n    item: FolderChainItem;\n}\n\nexport const FolderChainButton: React.FC<FolderChainButtonProps> = React.memo(\n    ({ first, current, item }) => {\n        const { file, disabled, onClick } = item;\n        const { dndIsOver, dndCanDrop, drop } = useFileDrop({\n            file,\n            forceDisableDrop: !file || current,\n        });\n        const dndState = useMemo<DndEntryState>(\n            () => ({\n                dndIsOver,\n                dndCanDrop,\n                dndIsDragging: false,\n            }),\n            [dndCanDrop, dndIsOver]\n        );\n        useDndHoverOpen(file, dndState);\n        const dndIconName = useDndIcon(dndState);\n        const ChonkyIcon = useContext(ChonkyIconContext);\n\n        const classes = useStyles(dndState);\n        const className = c({\n            [classes.baseBreadcrumb]: true,\n            [classes.disabledBreadcrumb]: disabled,\n            [classes.currentBreadcrumb]: current,\n        });\n        const text = file ? file.name : 'Loading...';\n        const icon =\n            first && file?.folderChainIcon === undefined\n                ? ChonkyIconName.folder\n                : file?.folderChainIcon;\n\n        return (\n            <div className={classes.buttonContainer} ref={file ? drop : null}>\n                {file && dndIconName && (\n                    <div className={classes.dndIndicator}>\n                        <ChonkyIcon icon={dndIconName} fixedWidth={true} />\n                    </div>\n                )}\n                <ToolbarButton\n                    icon={icon}\n                    className={className}\n                    text={text}\n                    disabled={disabled}\n                    onClick={onClick}\n                />\n            </div>\n        );\n    }\n);\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    buttonContainer: {\n        position: 'relative',\n    },\n    baseBreadcrumb: {\n        color: (dndState: DndEntryState) => {\n            let color = theme.palette.text.primary;\n            if (dndState.dndIsOver) {\n                color = dndState.dndCanDrop\n                    ? theme.dnd.canDropColor\n                    : theme.dnd.cannotDropColor;\n            }\n            return important(color);\n        },\n    },\n    disabledBreadcrumb: {\n        // Constant function here is on purpose. Without the function, the color here\n        // does not override the `baseBreadcrumb` color from above.\n        color: () => important(theme.palette.text.disabled),\n    },\n    currentBreadcrumb: {\n        textDecoration: important('underline'),\n    },\n    dndIndicator: {\n        color: (dndState: DndEntryState) =>\n            dndState.dndCanDrop ? theme.dnd.canDropColor : theme.dnd.cannotDropColor,\n        backgroundColor: (dndState: DndEntryState) =>\n            dndState.dndCanDrop ? theme.dnd.canDropMask : theme.dnd.cannotDropMask,\n        lineHeight: `calc(${theme.toolbar.lineHeight} - 6px)`,\n        transform: 'translateX(-50%) translateY(-50%)',\n        borderRadius: theme.toolbar.buttonRadius,\n        height: theme.toolbar.size - 6,\n        width: theme.toolbar.size - 6,\n        boxSizing: 'border-box',\n        position: 'absolute',\n        textAlign: 'center',\n        left: '50%',\n        top: '50%',\n        zIndex: 5,\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport Box from '@material-ui/core/Box';\nimport Breadcrumbs from '@material-ui/core/Breadcrumbs';\nimport React, { ReactElement, useMemo } from 'react';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\nimport { useFolderChainItems } from './FileNavbar-hooks';\nimport { FolderChainButton } from './FolderChainButton';\nimport { SmartToolbarButton } from './ToolbarButton';\n\nexport interface FileNavbarProps {}\n\nexport const FileNavbar: React.FC<FileNavbarProps> = React.memo(() => {\n    const classes = useStyles();\n    const folderChainItems = useFolderChainItems();\n\n    const folderChainComponents = useMemo(() => {\n        const components: ReactElement[] = [];\n        for (let i = 0; i < folderChainItems.length; ++i) {\n            const key = `folder-chain-${i}`;\n            const component = (\n                <FolderChainButton\n                    key={key}\n                    first={i === 0}\n                    current={i === folderChainItems.length - 1}\n                    item={folderChainItems[i]}\n                />\n            );\n            components.push(component);\n        }\n        return components;\n    }, [folderChainItems]);\n\n    return (\n        <Box className={classes.navbarWrapper}>\n            <Box className={classes.navbarContainer}>\n                <SmartToolbarButton fileActionId={ChonkyActions.OpenParentFolder.id} />\n                <Breadcrumbs\n                    className={classes.navbarBreadcrumbs}\n                    classes={{ separator: classes.separator }}\n                >\n                    {folderChainComponents}\n                </Breadcrumbs>\n            </Box>\n        </Box>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    navbarWrapper: {\n        paddingBottom: theme.margins.rootLayoutMargin,\n    },\n    navbarContainer: {\n        display: 'flex',\n    },\n    upDirectoryButton: {\n        fontSize: important(theme.toolbar.fontSize),\n        height: theme.toolbar.size,\n        width: theme.toolbar.size,\n        padding: '0px !important',\n    },\n    navbarBreadcrumbs: {\n        fontSize: important(theme.toolbar.fontSize),\n        flexGrow: 100,\n    },\n    separator: {\n        marginRight: important(4),\n        marginLeft: important(4),\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport React, { useCallback, useContext } from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { selectFileActionData } from '../../redux/selectors';\nimport { useParamSelector } from '../../redux/store';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { CustomVisibilityState } from '../../types/action.types';\nimport { useFileActionProps, useFileActionTrigger } from '../../util/file-actions';\nimport { useLocalizedFileActionStrings } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, important, makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface ToolbarDropdownButtonProps {\n    text: string;\n    active?: boolean;\n    icon?: Nullable<ChonkyIconName | string>;\n    onClick?: () => void;\n    disabled?: boolean;\n}\n\nexport const ToolbarDropdownButton = React.forwardRef(\n    (props: ToolbarDropdownButtonProps, ref: React.Ref<HTMLLIElement>) => {\n        const { text, active, icon, onClick, disabled } = props;\n        const classes = useStyles();\n        const ChonkyIcon = useContext(ChonkyIconContext);\n\n        const className = c({\n            [classes.baseButton]: true,\n            [classes.activeButton]: active,\n        });\n        return (\n            <MenuItem\n                ref={ref}\n                className={className}\n                onClick={onClick}\n                disabled={disabled}\n            >\n                {icon && (\n                    <ListItemIcon className={classes.icon}>\n                        <ChonkyIcon icon={icon} fixedWidth={true} />\n                    </ListItemIcon>\n                )}\n                <ListItemText primaryTypographyProps={{ className: classes.text }}>\n                    {text}\n                </ListItemText>\n            </MenuItem>\n        );\n    }\n);\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    baseButton: {\n        lineHeight: important(theme.toolbar.lineHeight),\n        height: important(theme.toolbar.size),\n        minHeight: important('auto'),\n        minWidth: important('auto'),\n        padding: important(20),\n    },\n    icon: {\n        fontSize: important(theme.toolbar.fontSize),\n        minWidth: important('auto'),\n        color: important('inherit'),\n        marginRight: 8,\n    },\n    text: {\n        fontSize: important(theme.toolbar.fontSize),\n    },\n    activeButton: {\n        color: important(theme.colors.textActive),\n    },\n}));\n\nexport interface SmartToolbarDropdownButtonProps {\n    fileActionId: string;\n    onClickFollowUp?: () => void;\n}\n\nexport const SmartToolbarDropdownButton = React.forwardRef(\n    (props: SmartToolbarDropdownButtonProps, ref: React.Ref<HTMLLIElement>) => {\n        const { fileActionId, onClickFollowUp } = props;\n\n        const action = useParamSelector(selectFileActionData, fileActionId);\n        const triggerAction = useFileActionTrigger(fileActionId);\n        const { icon, active, disabled } = useFileActionProps(fileActionId);\n        const { buttonName } = useLocalizedFileActionStrings(action);\n\n        // Combine external click handler with internal one\n        const handleClick = useCallback(() => {\n            triggerAction();\n            if (onClickFollowUp) onClickFollowUp();\n        }, [onClickFollowUp, triggerAction]);\n\n        if (!action) return null;\n        const { button } = action;\n        if (!button) return null;\n        if (action.customVisibility !== undefined && action.customVisibility() === CustomVisibilityState.Hidden) return null;\n\n        return (\n            <ToolbarDropdownButton\n                ref={ref}\n                text={buttonName}\n                icon={icon}\n                onClick={handleClick}\n                active={active}\n                disabled={disabled}\n            />\n        );\n    }\n);\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport Menu from '@material-ui/core/Menu';\nimport React, { useCallback, useMemo } from 'react';\n\nimport { FileActionGroup } from '../../types/action-menus.types';\nimport { useLocalizedFileActionGroup } from '../../util/i18n';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\nimport { ToolbarButton } from './ToolbarButton';\nimport { SmartToolbarDropdownButton } from './ToolbarDropdownButton';\n\nexport type ToolbarDropdownProps = FileActionGroup;\n\nexport const ToolbarDropdown: React.FC<ToolbarDropdownProps> = React.memo(props => {\n    const { name, fileActionIds } = props;\n    const [anchor, setAnchor] = React.useState<null | HTMLElement>(null);\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent<HTMLButtonElement>) => setAnchor(event.currentTarget),\n        [setAnchor]\n    );\n    const handleClose = useCallback(() => setAnchor(null), [setAnchor]);\n\n    const menuItemComponents = useMemo(\n        () =>\n            fileActionIds.map(id => (\n                <SmartToolbarDropdownButton\n                    key={`menu-item-${id}`}\n                    fileActionId={id}\n                    onClickFollowUp={handleClose}\n                />\n            )),\n        [fileActionIds, handleClose]\n    );\n\n    const localizedName = useLocalizedFileActionGroup(name);\n    const classes = useStyles();\n    return (\n        <>\n            <ToolbarButton text={localizedName} onClick={handleClick} dropdown={true} />\n            <Menu\n                autoFocus\n                keepMounted\n                elevation={2}\n                anchorEl={anchor}\n                onClose={handleClose}\n                open={Boolean(anchor)}\n                transitionDuration={150}\n                classes={{ list: classes.dropdownList }}\n            >\n                {menuItemComponents}\n            </Menu>\n        </>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    dropdownList: {\n        paddingBottom: important(0),\n        paddingTop: important(0),\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport { useSelector } from 'react-redux';\n\nimport Typography from '@material-ui/core/Typography';\n\nimport { selectHiddenFileCount, selectors, selectSelectionSize } from '../../redux/selectors';\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface ToolbarInfoProps {}\n\nexport const ToolbarInfo: React.FC<ToolbarInfoProps> = React.memo(() => {\n    const classes = useStyles();\n\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\n    const selectionSize = useSelector(selectSelectionSize);\n    const hiddenCount = useSelector(selectHiddenFileCount);\n\n    const intl = useIntl();\n    const fileCountString = intl.formatMessage(\n        {\n            id: getI18nId(I18nNamespace.Toolbar, 'visibleFileCount'),\n            defaultMessage: `{fileCount, plural,\n                =0 {# items}\n                one {# item}\n                other {# items}\n            }`,\n        },\n        { fileCount: displayFileIds.length }\n    );\n    const selectedString = intl.formatMessage(\n        {\n            id: getI18nId(I18nNamespace.Toolbar, 'selectedFileCount'),\n            defaultMessage: `{fileCount, plural,\n                =0 {}\n                other {# selected}\n            }`,\n        },\n        { fileCount: selectionSize }\n    );\n    const hiddenString = intl.formatMessage(\n        {\n            id: getI18nId(I18nNamespace.Toolbar, 'hiddenFileCount'),\n            defaultMessage: `{fileCount, plural,\n                =0 {}\n                other {# hidden}\n            }`,\n        },\n        { fileCount: hiddenCount }\n    );\n\n    return (\n        <div className={classes.infoContainer}>\n            <Typography className={classes.infoText} variant=\"body1\">\n                {fileCountString}\n                {(selectedString || hiddenString) && (\n                    <span className={classes.extraInfoSpan}>\n                        (\n                        <span className={classes.selectionSizeText}>\n                            {selectedString}\n                        </span>\n                        {selectedString && hiddenString && ', '}\n                        <span className={classes.hiddenCountText}>{hiddenString}</span>)\n                    </span>\n                )}\n            </Typography>\n        </div>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    infoContainer: {\n        height: theme.toolbar.size,\n        display: 'flex',\n    },\n    infoText: {\n        lineHeight: important(theme.toolbar.lineHeight),\n        fontSize: important(theme.toolbar.fontSize),\n        marginLeft: important(12),\n        height: theme.toolbar.size,\n    },\n    extraInfoSpan: {\n        marginRight: important(8),\n        marginLeft: important(8),\n        opacity: 0.8,\n    },\n    selectionSizeText: {\n        color: theme.colors.textActive,\n    },\n    hiddenCountText: {},\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useCallback, useContext, useEffect, useRef, useState } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\n\nimport { reduxActions } from '../../redux/reducers';\nimport { selectSearchString } from '../../redux/selectors';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { useDebounce } from '../../util/hooks-helpers';\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface ToolbarSearchProps {}\n\nexport const ToolbarSearch: React.FC<ToolbarSearchProps> = React.memo(() => {\n    const intl = useIntl();\n    const searchPlaceholderString = intl.formatMessage({\n        id: getI18nId(I18nNamespace.Toolbar, 'searchPlaceholder'),\n        defaultMessage: 'Search',\n    });\n\n    const classes = useStyles();\n    const ChonkyIcon = useContext(ChonkyIconContext);\n\n    const searchInputRef = useRef<HTMLInputElement>();\n\n    const dispatch = useDispatch();\n    const reduxSearchString = useSelector(selectSearchString);\n\n    const [localSearchString, setLocalSearchString] = useState(reduxSearchString);\n    const [debouncedLocalSearchString] = useDebounce(localSearchString, 300);\n    const [showLoadingIndicator, setShowLoadingIndicator] = useState(false);\n\n    useEffect(() => {\n        dispatch(\n            reduxActions.setFocusSearchInput(() => {\n                if (searchInputRef.current) searchInputRef.current.focus();\n            })\n        );\n        return () => {\n            dispatch(reduxActions.setFocusSearchInput(null));\n        };\n    }, [dispatch]);\n\n    useEffect(() => {\n        setShowLoadingIndicator(false);\n        dispatch(reduxActions.setSearchString(debouncedLocalSearchString));\n    }, [debouncedLocalSearchString, dispatch]);\n\n    const handleChange = useCallback((event: React.FormEvent<HTMLInputElement>) => {\n        setShowLoadingIndicator(true);\n        setLocalSearchString(event.currentTarget.value);\n    }, []);\n    const handleKeyUp = useCallback(\n        (event: React.KeyboardEvent<HTMLInputElement>) => {\n            // Remove focus from the search input field when user presses escape.\n            // Note: We use KeyUp instead of KeyPress because some browser plugins can\n            //       intercept KeyPress events with Escape key.\n            //       @see https://stackoverflow.com/a/37461974\n            if (event.key === 'Escape') {\n                setLocalSearchString('');\n                dispatch(reduxActions.setSearchString(''));\n                if (searchInputRef.current) searchInputRef.current.blur();\n            }\n        },\n        [dispatch]\n    );\n\n    return (\n        <TextField\n            className={classes.searchFieldContainer}\n            size=\"small\"\n            variant=\"outlined\"\n            value={localSearchString}\n            placeholder={searchPlaceholderString}\n            onChange={handleChange as any}\n            inputRef={searchInputRef}\n            InputProps={{\n                onKeyUp: handleKeyUp,\n                startAdornment: (\n                    <InputAdornment className={classes.searchIcon} position=\"start\">\n                        <ChonkyIcon\n                            icon={showLoadingIndicator ? ChonkyIconName.loading : ChonkyIconName.search}\n                            spin={showLoadingIndicator}\n                        />\n                    </InputAdornment>\n                ),\n                className: classes.searchFieldInput,\n            }}\n            inputProps={{ className: classes.searchFieldInputInner }}\n        />\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    searchFieldContainer: {\n        height: theme.toolbar.size,\n        width: 150,\n    },\n    searchIcon: {\n        fontSize: '0.9em',\n        opacity: 0.75,\n    },\n    searchFieldInput: {\n        lineHeight: important(0),\n        padding: important(0),\n        margin: important(0),\n        fontSize: important(theme.toolbar.fontSize),\n        borderRadius: theme.toolbar.buttonRadius,\n        height: theme.toolbar.size - 4,\n        paddingLeft: important(8),\n        marginTop: 2,\n    },\n    searchFieldInputInner: {\n        lineHeight: important(`${theme.toolbar.size - 4}px`),\n        fontSize: important(theme.toolbar.fontSize),\n        height: important(theme.toolbar.size - 4),\n        padding: important([0, 8, 0, 0]),\n        margin: important(0),\n        '-webkit-appearance': 'none',\n    },\n}));\n","import React, { ReactElement, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { selectToolbarItems } from '../../redux/selectors';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\nimport { SmartToolbarButton } from './ToolbarButton';\nimport { ToolbarDropdown } from './ToolbarDropdown';\nimport { ToolbarInfo } from './ToolbarInfo';\nimport { ToolbarSearch } from './ToolbarSearch';\n\nexport interface FileToolbarProps {}\n\nexport const FileToolbar: React.FC<FileToolbarProps> = React.memo(() => {\n    const classes = useStyles();\n    const toolbarItems = useSelector(selectToolbarItems);\n\n    const toolbarItemComponents = useMemo(() => {\n        const components: ReactElement[] = [];\n        for (let i = 0; i < toolbarItems.length; ++i) {\n            const item = toolbarItems[i];\n\n            const key = `toolbar-item-${typeof item === 'string' ? item : item.name}`;\n            const component =\n                typeof item === 'string' ? (\n                    <SmartToolbarButton key={key} fileActionId={item} />\n                ) : (\n                    <ToolbarDropdown\n                        key={key}\n                        name={item.name}\n                        fileActionIds={item.fileActionIds}\n                    />\n                );\n            components.push(component);\n        }\n        return components;\n    }, [toolbarItems]);\n\n    return (\n        <div className={classes.toolbarWrapper}>\n            <div className={classes.toolbarContainer}>\n                <div className={classes.toolbarLeft}>\n                    <ToolbarSearch />\n                    <ToolbarInfo />\n                </div>\n                <div className={classes.toolbarRight}>{toolbarItemComponents}</div>\n            </div>\n        </div>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    toolbarWrapper: {},\n    toolbarContainer: {\n        flexWrap: 'wrap-reverse',\n        display: 'flex',\n    },\n    toolbarLeft: {\n        paddingBottom: theme.margins.rootLayoutMargin,\n        flexWrap: 'nowrap',\n        flexGrow: 10000,\n        display: 'flex',\n    },\n    toolbarLeftFiller: {\n        flexGrow: 10000,\n    },\n    toolbarRight: {\n        paddingBottom: theme.margins.rootLayoutMargin,\n        flexWrap: 'nowrap',\n        display: 'flex',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { CSSProperties, useContext } from 'react';\nimport { useIntl } from 'react-intl';\n\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface FileListEmptyProps {\n    width: number;\n    height: number;\n}\n\nexport const FileListEmpty: React.FC<FileListEmptyProps> = props => {\n    const { width, height } = props;\n    const classes = useStyles();\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    const style: CSSProperties = {\n        width,\n        height,\n    };\n\n    const intl = useIntl();\n    const emptyString = intl.formatMessage({\n        id: getI18nId(I18nNamespace.FileList, 'nothingToShow'),\n        defaultMessage: 'Nothing to show',\n    });\n\n    return (\n        <div className={classes.fileListEmpty} style={style}>\n            <div className={classes.fileListEmptyContent}>\n                <ChonkyIcon icon={ChonkyIconName.folderOpen} />\n                &nbsp; {emptyString}\n            </div>\n        </div>\n    );\n};\n\nconst useStyles = makeGlobalChonkyStyles(theme => ({\n    fileListEmpty: {\n        color: theme.palette.text.disabled,\n        position: 'relative',\n        textAlign: 'center',\n        fontSize: '1.2em',\n    },\n    fileListEmptyContent: {\n        transform: 'translateX(-50%) translateY(-50%)',\n        position: 'absolute',\n        left: '50%',\n        top: '50%',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useCallback } from 'react';\nimport { AnyObjectWithStringKeys } from 'tsdef';\n\nimport { useClickHandler, useKeyDownHandler } from './ClickableWrapper-hooks';\n\nexport interface MouseClickEvent {\n    altKey: boolean;\n    ctrlKey: boolean;\n    shiftKey: boolean;\n}\nexport type MouseClickEventHandler = (event: MouseClickEvent) => void;\n\nexport interface KeyboardClickEvent {\n    enterKey: boolean;\n    spaceKey: boolean;\n    altKey: boolean;\n    ctrlKey: boolean;\n    shiftKey: boolean;\n}\nexport type KeyboardClickEventHandler = (event: KeyboardClickEvent) => void;\n\nexport interface ClickableWrapperProps {\n    wrapperTag: any;\n    passthroughProps?: any;\n\n    onSingleClick?: MouseClickEventHandler;\n    onDoubleClick?: MouseClickEventHandler;\n    onKeyboardClick?: KeyboardClickEventHandler;\n    setFocused?: (focused: boolean) => void;\n}\n\nexport const ClickableWrapper: React.FC<ClickableWrapperProps> = props => {\n    const {\n        children,\n        wrapperTag: WrapperTag,\n        passthroughProps,\n        onSingleClick,\n        onDoubleClick,\n        onKeyboardClick,\n        setFocused,\n    } = props;\n\n    const handleClick = useClickHandler(onSingleClick, onDoubleClick);\n    const handleKeyDown = useKeyDownHandler(onKeyboardClick);\n\n    const compProps: AnyObjectWithStringKeys = {\n        onFocus: useCallback(() => setFocused && setFocused(true), [setFocused]),\n        onBlur: useCallback(() => setFocused && setFocused(false), [setFocused]),\n    };\n\n    if (onSingleClick || onDoubleClick || onKeyboardClick) {\n        compProps.onClick = handleClick;\n        compProps.onKeyDown = handleKeyDown;\n        compProps.tabIndex = 0;\n    }\n\n    const mergedProps = { ...compProps, ...passthroughProps };\n    return <WrapperTag {...mergedProps}>{children}</WrapperTag>;\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Nilable, Nullable } from 'tsdef';\n\nimport { selectDoubleClickDelay } from '../../redux/selectors';\nimport {\n    KeyboardClickEvent,\n    KeyboardClickEventHandler,\n    MouseClickEvent,\n    MouseClickEventHandler,\n} from './ClickableWrapper';\n\nexport const useClickHandler = (\n    onSingleClick: Nilable<MouseClickEventHandler>,\n    onDoubleClick: Nilable<MouseClickEventHandler>\n) => {\n    const doubleClickDelay = useSelector(selectDoubleClickDelay);\n\n    const counter = useRef({\n        clickCount: 0,\n        clickTimeout: null as Nullable<number>,\n    });\n\n    return useCallback(\n        (event: React.MouseEvent) => {\n            const mouseClickEvent: MouseClickEvent = {\n                altKey: event.altKey,\n                ctrlKey: event.ctrlKey || event.metaKey,\n                shiftKey: event.shiftKey,\n\n            };\n\n            counter.current.clickCount++;\n            if (counter.current.clickCount === 1) {\n                if (onSingleClick) {\n                    event.preventDefault();\n                    onSingleClick(mouseClickEvent);\n                }\n                counter.current.clickCount = 1;\n                // @ts-ignore\n                counter.current.clickTimeout = setTimeout(\n                    () => (counter.current.clickCount = 0),\n                    doubleClickDelay\n                );\n            } else if (counter.current.clickCount === 2) {\n                if (onDoubleClick) {\n                    event.preventDefault();\n                    onDoubleClick(mouseClickEvent);\n                }\n                if (typeof counter.current.clickTimeout === 'number') {\n                    clearTimeout(counter.current.clickTimeout);\n                    counter.current.clickTimeout = null;\n                    counter.current.clickCount = 0;\n                }\n            }\n        },\n        [doubleClickDelay, onSingleClick, onDoubleClick, counter]\n    );\n};\n\nexport const useKeyDownHandler = (onKeyboardClick?: KeyboardClickEventHandler) => {\n    return useCallback(\n        (event: React.KeyboardEvent) => {\n            if (!onKeyboardClick) return;\n\n            const keyboardClickEvent: KeyboardClickEvent = {\n                enterKey: event.nativeEvent.code === 'Enter',\n                spaceKey: event.nativeEvent.code === 'Space',\n                altKey: event.altKey,\n                ctrlKey: event.ctrlKey,\n                shiftKey: event.shiftKey,\n            };\n\n            if (keyboardClickEvent.spaceKey || keyboardClickEvent.enterKey) {\n                event.preventDefault();\n                event.stopPropagation();\n                onKeyboardClick(keyboardClickEvent);\n            }\n        },\n        [onKeyboardClick]\n    );\n};\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { FileData } from '../../types/file.types';\nimport { makeLocalChonkyStyles } from '../../util/styles';\nimport { useFileNameComponent, useModifierIconComponents } from './FileEntry-hooks';\n\nexport interface FileEntryNameProps {\n    file: Nullable<FileData>;\n    className?: string;\n}\n\nexport const FileEntryName: React.FC<FileEntryNameProps> = React.memo(({ file, className }) => {\n    const modifierIconComponents = useModifierIconComponents(file);\n    const fileNameComponent = useFileNameComponent(file);\n\n    const classes = useStyles();\n    return (\n        <span className={className} title={file ? file.name : undefined}>\n            {modifierIconComponents.length > 0 && (\n                <span className={classes.modifierIcons}>{modifierIconComponents}</span>\n            )}\n            {fileNameComponent}\n        </span>\n    );\n});\nFileEntryName.displayName = 'FileEntryName';\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    modifierIcons: {\n        color: theme.palette.text.hint,\n        position: 'relative',\n        fontSize: '0.775em',\n        paddingRight: 5,\n    },\n}));\n","import React, { useContext } from 'react';\n\nimport { FileEntryProps } from '../../types/file-list.types';\nimport { useLocalizedFileEntryStrings } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { makeLocalChonkyStyles } from '../../util/styles';\nimport { TextPlaceholder } from '../external/TextPlaceholder';\nimport { useFileEntryHtmlProps, useFileEntryState } from './FileEntry-hooks';\nimport { FileEntryName } from './FileEntryName';\nimport { FileEntryState } from './GridEntryPreview';\n\nexport const CompactEntry: React.FC<FileEntryProps> = React.memo(\n    // @ts-ignore\n    ({ file, selected, focused, dndState }) => {\n        const entryState: FileEntryState = useFileEntryState(file, selected, focused);\n\n        const { fileModDateString, fileSizeString } = useLocalizedFileEntryStrings(\n            file\n        );\n\n        const classes = useStyles(entryState);\n        const ChonkyIcon = useContext(ChonkyIconContext);\n        const fileEntryHtmlProps = useFileEntryHtmlProps(file);\n        return (\n            <div className={classes.listFileEntry} {...fileEntryHtmlProps}>\n                <div className={classes.listFileEntryIcon}>\n                    <ChonkyIcon\n                        icon={entryState.icon}\n                        spin={entryState.iconSpin}\n                        fixedWidth={true}\n                    />\n                </div>\n                <div className={classes.listFileEntryDescription}>\n                    <div\n                        className={classes.listFileEntryName}\n                        title={file ? file.name : undefined}\n                    >\n                        <FileEntryName file={file} />\n                    </div>\n                    <div className={classes.listFileEntryProperties}>\n                        <div className={classes.listFileEntryProperty}>\n                            {file ? (\n                                fileModDateString ?? <span>—</span>\n                            ) : (\n                                <TextPlaceholder minLength={5} maxLength={15} />\n                            )}\n                        </div>\n                        <div className={classes.listFileEntryProperty}>\n                            {file ? (\n                                fileSizeString ?? <span>—</span>\n                            ) : (\n                                <TextPlaceholder minLength={10} maxLength={20} />\n                            )}\n                        </div>\n                    </div>\n                </div>\n                <div className=\"chonky-file-entry-outline\"></div>\n                <div className=\"chonky-file-entry-selection\"></div>\n            </div>\n        );\n    }\n);\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    listFileEntry: {\n        fontSize: theme.listFileEntry.fontSize,\n        alignItems: 'center',\n        position: 'relative',\n        display: 'flex',\n        height: '100%',\n    },\n    listFileEntryIcon: {\n        backgroundColor: (state: FileEntryState) => state.color,\n        boxShadow: 'inset rgba(255, 255, 255, 0.5) 0 0 0 999px',\n        borderRadius: theme.listFileEntry.iconBorderRadius,\n        fontSize: theme.listFileEntry.iconFontSize,\n        color: '#fff',\n        padding: 8,\n    },\n    listFileEntryDescription: {\n        flexDirection: 'column',\n        display: 'flex',\n        flexGrow: 1,\n    },\n    listFileEntryName: {\n        padding: [0, 8, 4, 8],\n    },\n    listFileEntryProperties: {\n        fontSize: theme.listFileEntry.propertyFontSize,\n        flexDirection: 'row',\n        display: 'flex',\n    },\n    listFileEntryProperty: {\n        padding: [0, 8],\n        opacity: 0.4,\n    },\n}));\n","import React from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { DndEntryState } from '../../types/file-list.types';\nimport { FileData } from '../../types/file.types';\nimport { useDndHoverOpen, useFileEntryDnD } from '../../util/dnd';\nimport { FileHelper } from '../../util/file-helper';\nimport { makeLocalChonkyStyles } from '../../util/styles';\n\nexport interface DnDFileEntryProps {\n    file: Nullable<FileData>;\n    children: (dndState: DndEntryState) => React.ReactElement;\n}\n\nexport const DnDFileEntry = React.memo(({ file, children }: DnDFileEntryProps) => {\n    const { drop, drag, dndState } = useFileEntryDnD(file);\n\n    useDndHoverOpen(file, dndState);\n    const classes = useStyles();\n    return (\n        <div ref={drop} className={classes.fillParent}>\n            <div\n                ref={FileHelper.isDraggable(file) ? drag : null}\n                className={classes.fillParent}\n            >\n                {children(dndState)}\n            </div>\n        </div>\n    );\n});\n\nexport const useStyles = makeLocalChonkyStyles(() => ({\n    fillParent: {\n        height: '100%',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport c from 'classnames';\nimport React from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { makeGlobalChonkyStyles } from '../../util/styles';\n\nexport interface FileThumbnailProps {\n    className: string;\n    thumbnailUrl: Nullable<string>;\n}\n\nexport const FileThumbnail: React.FC<FileThumbnailProps> = React.memo(props => {\n    const { className, thumbnailUrl } = props;\n\n    const thumbnailStyle: React.CSSProperties = thumbnailUrl ? { backgroundImage: `url('${thumbnailUrl}')` } : {};\n\n    const classes = useStyles();\n    return <div className={c([className, classes.fileThumbnail])} style={thumbnailStyle} />;\n});\nFileThumbnail.displayName = 'FileThumbnail';\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    fileThumbnail: {\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n        backgroundSize: 'contain',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useContext } from 'react';\n\nimport { DndEntryState } from '../../types/file-list.types';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\nimport { useDndIcon } from './FileEntry-hooks';\n\nexport interface DnDIndicatorProps {\n    className: string;\n    dndState: DndEntryState;\n}\n\nexport const GridEntryDndIndicator: React.FC<DnDIndicatorProps> = React.memo(props => {\n    const { className: externalClassName, dndState } = props;\n    const dndIconName = useDndIcon(dndState);\n    const classes = useStyles(dndState);\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    if (!dndIconName) return null;\n    const className = c({\n        [classes.dndIndicator]: true,\n        [externalClassName]: true,\n    });\n    return (\n        <div className={className}>\n            <ChonkyIcon icon={dndIconName} />\n        </div>\n    );\n});\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    dndIndicator: {\n        color: (dndState: DndEntryState) =>\n            dndState.dndIsOver\n                ? dndState.dndCanDrop\n                    ? theme.dnd.canDropColor\n                    : theme.dnd.cannotDropColor\n                : '#000',\n        boxSizing: 'border-box',\n        position: 'absolute',\n        fontSize: '1.2em',\n        opacity: 0.6,\n        padding: 6,\n        '&:before': {\n            borderBottom: '50px solid transparent',\n            borderLeft: '50px solid #fff',\n            position: 'absolute',\n            content: '\"\"',\n            zIndex: -1,\n            left: 0,\n            top: 0,\n        },\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { useContext, useEffect } from 'react';\nimport { Nullable } from 'tsdef';\n\nimport { DndEntryState } from '../../types/file-list.types';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, important, makeLocalChonkyStyles } from '../../util/styles';\nimport { FileThumbnail } from './FileThumbnail';\nimport { GridEntryDndIndicator } from './GridEntryDndIndicator';\n\nexport type FileEntryState = {\n    childrenCount: Nullable<number>;\n    color: string;\n    icon: ChonkyIconName | string;\n    thumbnailUrl: Nullable<string>;\n    iconSpin: boolean;\n    selected: boolean;\n    focused: boolean;\n};\n\nexport interface FileEntryPreviewProps {\n    className?: string;\n    entryState: FileEntryState;\n    dndState: DndEntryState;\n}\n\nexport const GridEntryPreviewFolder: React.FC<FileEntryPreviewProps> = React.memo(props => {\n    const { className: externalClassName, entryState, dndState } = props;\n\n    const folderClasses = useFolderStyles(entryState);\n    const fileClasses = useFileStyles(entryState);\n    const commonClasses = useCommonEntryStyles(entryState);\n    const className = c({\n        [folderClasses.previewFile]: true,\n        [externalClassName || '']: !!externalClassName,\n    });\n    return (\n        <div className={className}>\n            <div className={folderClasses.folderBackSideMid}>\n                <div className={folderClasses.folderBackSideTop} />\n                <div className={folderClasses.folderFrontSide}>\n                    <GridEntryDndIndicator className={fileClasses.dndIndicator} dndState={dndState} />\n                    <div className={c([fileClasses.fileIcon, folderClasses.fileIcon])}>{entryState.childrenCount}</div>\n                    <div className={commonClasses.selectionIndicator}></div>\n                    <FileThumbnail className={fileClasses.thumbnail} thumbnailUrl={entryState.thumbnailUrl} />\n                </div>\n            </div>\n        </div>\n    );\n});\nGridEntryPreviewFolder.displayName = 'GridEntryPreviewFolder';\n\nconst useFolderStyles = makeLocalChonkyStyles(theme => ({\n    previewFile: {\n        borderRadius: theme.gridFileEntry.borderRadius,\n        position: 'relative',\n        overflow: 'hidden',\n    },\n    folderBackSideTop: {\n        backgroundColor: (state: FileEntryState) => state.color,\n        boxShadow: (state: FileEntryState) => {\n            let color = theme.gridFileEntry.folderBackColorTint;\n            if (state.focused) color = 'rgba(0, 0, 0, 0.3)';\n            else if (state.selected) color = 'rgba(0, 153, 255, .4)';\n            return `inset ${color} 0 0 0 999px`;\n        },\n        borderTopLeftRadius: theme.gridFileEntry.borderRadius,\n        borderTopRightRadius: 10,\n        position: 'absolute',\n        right: '60%',\n        height: 13,\n        top: -10,\n        left: 0,\n        '&:after': {\n            borderRightColor: theme.palette.background.paper,\n            borderTopColor: theme.palette.background.paper,\n            borderBottomColor: 'transparent',\n            borderLeftColor: 'transparent',\n            borderWidth: [0, 15, 10, 0],\n            borderStyle: 'solid',\n            position: 'absolute',\n            display: 'block',\n            content: '\"\"',\n            right: 0,\n            top: 0,\n        },\n    },\n    folderBackSideMid: {\n        backgroundColor: (state: FileEntryState) => state.color,\n        boxShadow: (state: FileEntryState) => {\n            let color = theme.gridFileEntry.folderBackColorTint;\n            if (state.focused) color = 'rgba(0, 0, 0, 0.3)';\n            else if (state.selected) color = 'rgba(0, 153, 255, .4)';\n            return `inset ${color} 0 0 0 999px`;\n        },\n        borderTopRightRadius: theme.gridFileEntry.borderRadius,\n        position: 'absolute',\n        bottom: 0,\n        right: 0,\n        left: 0,\n        top: 10,\n    },\n    folderFrontSide: {\n        boxShadow: (state: FileEntryState) => {\n            const shadows: string[] = [];\n            if (state.focused) shadows.push('inset rgba(0, 0, 0, 1) 0 0 0 3px');\n            if (state.selected) shadows.push('inset rgba(0, 153, 255, .65) 0 0 0 3px');\n            shadows.push(`inset ${theme.gridFileEntry.folderFrontColorTint} 0 0 0 999px`);\n            return shadows.join(', ');\n        },\n        backgroundColor: (state: FileEntryState) => state.color,\n        borderRadius: theme.gridFileEntry.borderRadius,\n        position: 'absolute',\n        overflow: 'hidden',\n        bottom: 0,\n        right: 0,\n        left: 0,\n        top: 10,\n    },\n    fileIcon: {\n        fontSize: important(theme.gridFileEntry.childrenCountSize),\n    },\n}));\n\nexport const GridEntryPreviewFile: React.FC<FileEntryPreviewProps> = React.memo(props => {\n    const { className: externalClassName, entryState, dndState } = props;\n\n    const fileClasses = useFileStyles(entryState);\n    const commonClasses = useCommonEntryStyles(entryState);\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    const className = c({\n        [fileClasses.previewFile]: true,\n        [externalClassName || '']: !!externalClassName,\n    });\n    return (\n        <div className={className}>\n            <GridEntryDndIndicator className={fileClasses.dndIndicator} dndState={dndState} />\n            <div className={fileClasses.fileIcon}>\n                <ChonkyIcon icon={entryState.icon} spin={entryState.iconSpin} />\n            </div>\n            <div className={commonClasses.selectionIndicator}></div>\n            <FileThumbnail className={fileClasses.thumbnail} thumbnailUrl={entryState.thumbnailUrl} />\n        </div>\n    );\n});\nGridEntryPreviewFile.displayName = 'GridEntryPreviewFile';\n\nconst useFileStyles = makeLocalChonkyStyles(theme => ({\n    previewFile: {\n        boxShadow: (state: FileEntryState) => {\n            const shadows: string[] = [];\n            if (state.selected) shadows.push('inset rgba(0,153,255, .65) 0 0 0 3px');\n            if (state.focused) shadows.push('inset rgba(0, 0, 0, 1) 0 0 0 3px');\n            shadows.push(`inset ${theme.gridFileEntry.fileColorTint} 0 0 0 999px`);\n            return shadows.join(', ');\n        },\n        backgroundColor: (state: FileEntryState) => state.color,\n        borderRadius: theme.gridFileEntry.borderRadius,\n        position: 'relative',\n        overflow: 'hidden',\n    },\n    dndIndicator: {\n        zIndex: 14,\n    },\n    fileIcon: {\n        transform: 'translateX(-50%) translateY(-50%)',\n        fontSize: theme.gridFileEntry.iconSize,\n        opacity: (state: FileEntryState) => (state.thumbnailUrl && !state.focused ? 0 : 1),\n        color: (state: FileEntryState) =>\n            state.focused ? theme.gridFileEntry.iconColorFocused : theme.gridFileEntry.iconColor,\n        position: 'absolute',\n        left: '50%',\n        zIndex: 12,\n        top: '50%',\n    },\n    thumbnail: {\n        borderRadius: theme.gridFileEntry.borderRadius,\n        position: 'absolute',\n        zIndex: 6,\n        bottom: 5,\n        right: 5,\n        left: 5,\n        top: 5,\n    },\n}));\n\nexport const useCommonEntryStyles = makeLocalChonkyStyles(() => ({\n    selectionIndicator: {\n        display: (state: FileEntryState) => (state.selected ? 'block' : 'none'),\n        background:\n            'repeating-linear-gradient(' +\n            '45deg,' +\n            'rgba(0,153,255,.14),' +\n            'rgba(0,153,255,.14) 10px,' +\n            'rgba(0,153,255,.25) 0,' +\n            'rgba(0,153,255,.25) 20px' +\n            ')',\n        backgroundColor: 'rgba(0, 153, 255, .14)',\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        zIndex: 10,\n    },\n    focusIndicator: {\n        display: (state: FileEntryState) => (state.focused ? 'block' : 'none'),\n        boxShadow: 'inset rgba(0, 0, 0, 1) 0 0 0 2px',\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        zIndex: 11,\n    },\n}));\n","import React from 'react';\n\nimport { FileEntryProps } from '../../types/file-list.types';\nimport { FileHelper } from '../../util/file-helper';\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\nimport { useFileEntryHtmlProps, useFileEntryState } from './FileEntry-hooks';\nimport { FileEntryName } from './FileEntryName';\nimport { FileEntryState, GridEntryPreviewFile, GridEntryPreviewFolder } from './GridEntryPreview';\n\nexport const GridEntry: React.FC<FileEntryProps> = React.memo(({ file, selected, focused, dndState }) => {\n    const isDirectory = FileHelper.isDirectory(file);\n    const entryState = useFileEntryState(file, selected, focused);\n\n    const classes = useFileEntryStyles(entryState);\n    const fileEntryHtmlProps = useFileEntryHtmlProps(file);\n    const entryClassName = c({\n        [classes.gridFileEntry]: true,\n    });\n    return (\n        <div className={entryClassName} {...fileEntryHtmlProps}>\n            {isDirectory ? (\n                <GridEntryPreviewFolder\n                    className={classes.gridFileEntryPreview}\n                    entryState={entryState}\n                    dndState={dndState}\n                />\n            ) : (\n                <GridEntryPreviewFile\n                    className={classes.gridFileEntryPreview}\n                    entryState={entryState}\n                    dndState={dndState}\n                />\n            )}\n            <div className={classes.gridFileEntryNameContainer}>\n                <FileEntryName className={classes.gridFileEntryName} file={file} />\n            </div>\n        </div>\n    );\n});\nGridEntry.displayName = 'GridEntry';\n\nconst useFileEntryStyles = makeLocalChonkyStyles(theme => ({\n    gridFileEntry: {\n        flexDirection: 'column',\n        display: 'flex',\n        height: '100%',\n    },\n    gridFileEntryPreview: {\n        flexGrow: 1,\n    },\n    gridFileEntryNameContainer: {\n        fontSize: theme.gridFileEntry.fontSize,\n        wordBreak: 'break-word',\n        textAlign: 'center',\n        paddingTop: 5,\n    },\n    gridFileEntryName: {\n        backgroundColor: (state: FileEntryState) => (state.selected ? 'rgba(0,153,255, .25)' : 'transparent'),\n        textDecoration: (state: FileEntryState) => (state.focused ? 'underline' : 'none'),\n        borderRadius: 3,\n        padding: [2, 4],\n    },\n}));\n","import React, { useContext, useMemo } from 'react';\n\nimport { DndEntryState, FileEntryProps } from '../../types/file-list.types';\nimport { useLocalizedFileEntryStrings } from '../../util/i18n';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport { c, makeLocalChonkyStyles } from '../../util/styles';\nimport { TextPlaceholder } from '../external/TextPlaceholder';\nimport {\n    useDndIcon,\n    useFileEntryHtmlProps,\n    useFileEntryState,\n} from './FileEntry-hooks';\nimport { FileEntryName } from './FileEntryName';\nimport { FileEntryState, useCommonEntryStyles } from './GridEntryPreview';\n\ninterface StyleState {\n    entryState: FileEntryState;\n    dndState: DndEntryState;\n}\n\nexport const ListEntry: React.FC<FileEntryProps> = React.memo(\n    ({ file, selected, focused, dndState }) => {\n        const entryState: FileEntryState = useFileEntryState(file, selected, focused);\n        const dndIconName = useDndIcon(dndState);\n\n        const { fileModDateString, fileSizeString } = useLocalizedFileEntryStrings(\n            file\n        );\n        const styleState = useMemo<StyleState>(\n            () => ({\n                entryState,\n                dndState,\n            }),\n            [dndState, entryState]\n        );\n        const classes = useStyles(styleState);\n        const commonClasses = useCommonEntryStyles(entryState);\n        const ChonkyIcon = useContext(ChonkyIconContext);\n        const fileEntryHtmlProps = useFileEntryHtmlProps(file);\n        return (\n            <div className={classes.listFileEntry} {...fileEntryHtmlProps}>\n                <div className={commonClasses.focusIndicator}></div>\n                <div\n                    className={c([\n                        commonClasses.selectionIndicator,\n                        classes.listFileEntrySelection,\n                    ])}\n                ></div>\n                <div className={classes.listFileEntryIcon}>\n                    <ChonkyIcon\n                        icon={dndIconName ?? entryState.icon}\n                        spin={dndIconName ? false : entryState.iconSpin}\n                        fixedWidth={true}\n                    />\n                </div>\n                <div\n                    className={classes.listFileEntryName}\n                    title={file ? file.name : undefined}\n                >\n                    <FileEntryName file={file} />\n                </div>\n                <div className={classes.listFileEntryProperty}>\n                    {file ? (\n                        fileModDateString ?? <span>—</span>\n                    ) : (\n                        <TextPlaceholder minLength={5} maxLength={15} />\n                    )}\n                </div>\n                <div className={classes.listFileEntryProperty}>\n                    {file ? (\n                        fileSizeString ?? <span>—</span>\n                    ) : (\n                        <TextPlaceholder minLength={10} maxLength={20} />\n                    )}\n                </div>\n            </div>\n        );\n    }\n);\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    listFileEntry: {\n        boxShadow: `inset ${theme.palette.divider} 0 -1px 0`,\n        fontSize: theme.listFileEntry.fontSize,\n        color: ({ dndState }: StyleState) =>\n            dndState.dndIsOver\n                ? dndState.dndCanDrop\n                    ? theme.dnd.canDropColor\n                    : theme.dnd.cannotDropColor\n                : 'inherit',\n        alignItems: 'center',\n        position: 'relative',\n        display: 'flex',\n        height: '100%',\n    },\n    listFileEntrySelection: {\n        opacity: 0.6,\n    },\n    listFileEntryIcon: {\n        color: ({ entryState, dndState }: StyleState) =>\n            dndState.dndIsOver\n                ? dndState.dndCanDrop\n                    ? theme.dnd.canDropColor\n                    : theme.dnd.cannotDropColor\n                : entryState.color,\n        fontSize: theme.listFileEntry.iconFontSize,\n        boxSizing: 'border-box',\n        padding: [2, 4],\n        zIndex: 20,\n    },\n    listFileEntryName: {\n        textOverflow: 'ellipsis',\n        boxSizing: 'border-box',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        flex: '1 1 300px',\n        paddingLeft: 8,\n        zIndex: 20,\n    },\n    listFileEntryProperty: {\n        fontSize: theme.listFileEntry.propertyFontSize,\n        boxSizing: 'border-box',\n        whiteSpace: 'nowrap',\n        overflow: 'hidden',\n        flex: '0 1 150px',\n        padding: [2, 8],\n        zIndex: 20,\n    },\n}));\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Nullable } from 'tsdef';\n\nimport { selectFileData, selectIsDnDDisabled, selectIsFileSelected } from '../../redux/selectors';\nimport { useParamSelector } from '../../redux/store';\nimport { DndEntryState, FileEntryProps } from '../../types/file-list.types';\nimport { FileViewMode } from '../../types/file-view.types';\nimport { FileHelper } from '../../util/file-helper';\nimport { makeGlobalChonkyStyles } from '../../util/styles';\nimport { ClickableWrapper, ClickableWrapperProps } from '../internal/ClickableWrapper';\nimport { CompactEntry } from './CompactEntry';\nimport { DnDFileEntry } from './DnDFileEntry';\nimport { useFileClickHandlers } from './FileEntry-hooks';\nimport { GridEntry } from './GridEntry';\nimport { ListEntry } from './ListEntry';\n\nexport interface SmartFileEntryProps {\n    fileId: Nullable<string>;\n    displayIndex: number;\n    fileViewMode: FileViewMode;\n}\n\nconst disabledDndState: DndEntryState = {\n    dndIsDragging: false,\n    dndIsOver: false,\n    dndCanDrop: false,\n};\n\nexport const SmartFileEntry: React.FC<SmartFileEntryProps> = React.memo(({ fileId, displayIndex, fileViewMode }) => {\n    const classes = useStyles();\n\n    // Basic properties\n    const file = useParamSelector(selectFileData, fileId);\n    const selected = useParamSelector(selectIsFileSelected, fileId);\n    const dndDisabled = useSelector(selectIsDnDDisabled);\n\n    // Clickable wrapper properties\n    const fileClickHandlers = useFileClickHandlers(file, displayIndex);\n    const [focused, setFocused] = useState(false);\n    const clickableWrapperProps: ClickableWrapperProps = {\n        wrapperTag: 'div',\n        passthroughProps: { className: classes.fileEntryClickableWrapper },\n        ...(FileHelper.isClickable(file) ? fileClickHandlers : undefined),\n        setFocused,\n    };\n\n    // File entry properties\n    const fileEntryProps: Omit<FileEntryProps, 'dndState'> = {\n        file,\n        selected,\n        focused,\n    };\n\n    let EntryComponent: React.FC<FileEntryProps>;\n    if (fileViewMode === FileViewMode.List) EntryComponent = ListEntry;\n    else if (fileViewMode === FileViewMode.Compact) EntryComponent = CompactEntry;\n    else EntryComponent = GridEntry;\n\n    return dndDisabled ? (\n        <ClickableWrapper {...clickableWrapperProps}>\n            <EntryComponent {...fileEntryProps} dndState={disabledDndState} />\n        </ClickableWrapper>\n    ) : (\n        <DnDFileEntry file={file}>\n            {dndState => (\n                <ClickableWrapper {...clickableWrapperProps}>\n                    <EntryComponent {...fileEntryProps} dndState={dndState} />\n                </ClickableWrapper>\n            )}\n        </DnDFileEntry>\n    );\n});\nSmartFileEntry.displayName = 'SmartFileEntry';\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    fileEntryClickableWrapper: {\n        // We disable default browser outline because Chonky provides its own outline\n        // (which doesn't compromise accessibility, hopefully)\n        outline: 'none !important',\n        position: 'relative',\n        height: '100%',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { CSSProperties, useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { VariableSizeGrid } from 'react-window';\n\nimport { ChonkyActions } from '../../action-definitions';\nimport { selectFileViewConfig, selectors } from '../../redux/selectors';\nimport { FileViewConfigGrid } from '../../types/file-view.types';\nimport { RootState } from '../../types/redux.types';\nimport { useInstanceVariable } from '../../util/hooks-helpers';\nimport { makeGlobalChonkyStyles, useIsMobileBreakpoint } from '../../util/styles';\nimport { SmartFileEntry } from './FileEntry';\n\nexport interface FileListGridProps {\n    width: number;\n    height: number;\n}\n\ninterface GridConfig {\n    rowCount: number;\n    columnCount: number;\n    gutter: number;\n    rowHeight: number;\n    columnWidth: number;\n}\n\nexport const isMobileDevice = () => {\n    // noinspection JSDeprecatedSymbols\n    return typeof window.orientation !== 'undefined' || navigator.userAgent.indexOf('IEMobile') !== -1;\n};\n\nexport const getGridConfig = (\n    width: number,\n    fileCount: number,\n    viewConfig: FileViewConfigGrid,\n    isMobileBreakpoint: boolean\n): GridConfig => {\n    const gutter = isMobileBreakpoint ? 5 : 8;\n    const scrollbar = isMobileDevice() ? 0 : 18;\n\n    let columnCount: number;\n    let columnWidth: number;\n    if (isMobileBreakpoint) {\n        columnCount = 2;\n        columnWidth = (width - gutter - scrollbar) / columnCount;\n    } else {\n        columnWidth = viewConfig.entryWidth;\n        columnCount = Math.max(1, Math.floor((width - scrollbar) / (columnWidth + gutter)));\n    }\n\n    const rowCount = Math.ceil(fileCount / columnCount);\n\n    return {\n        rowCount,\n        columnCount,\n        gutter,\n        rowHeight: viewConfig.entryHeight,\n        columnWidth,\n    };\n};\n\nexport const GridContainer: React.FC<FileListGridProps> = React.memo(props => {\n    const { width, height } = props;\n\n    const viewConfig = useSelector(selectFileViewConfig) as FileViewConfigGrid;\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\n    const fileCount = useMemo(() => displayFileIds.length, [displayFileIds]);\n\n    const gridRef = useRef<VariableSizeGrid>();\n    const isMobileBreakpoint = useIsMobileBreakpoint();\n\n    // Whenever the grid config changes at runtime, we call a method on the\n    // `VariableSizeGrid` handle to reset column width/row height cache.\n    // !!! Note that we deliberately update the `gridRef` firsts and update the React\n    //     state AFTER that. This is needed to avoid file entries jumping up/down.\n    const [gridConfig, setGridConfig] = useState(getGridConfig(width, fileCount, viewConfig, isMobileBreakpoint));\n    const gridConfigRef = useRef(gridConfig);\n    useEffect(() => {\n        const oldConf = gridConfigRef.current;\n        const newConf = getGridConfig(width, fileCount, viewConfig, isMobileBreakpoint);\n\n        gridConfigRef.current = newConf;\n        if (gridRef.current) {\n            if (oldConf.rowCount !== newConf.rowCount) {\n                gridRef.current.resetAfterRowIndex(Math.min(oldConf.rowCount, newConf.rowCount) - 1);\n            }\n            if (oldConf.columnCount !== newConf.columnCount) {\n                gridRef.current.resetAfterColumnIndex(Math.min(oldConf.columnCount, newConf.rowCount) - 1);\n            }\n            if (oldConf.columnWidth !== newConf.columnWidth) {\n                gridRef.current.resetAfterIndices({ columnIndex: 0, rowIndex: 0 });\n            }\n        }\n\n        setGridConfig(newConf);\n    }, [setGridConfig, gridConfigRef, isMobileBreakpoint, width, viewConfig, fileCount]);\n\n    const sizers = useMemo(() => {\n        const gc = gridConfigRef;\n        return {\n            getColumnWidth: (index: number) =>\n                gc.current.columnWidth! + (index === gc.current.columnCount - 1 ? 0 : gc.current.gutter),\n            getRowHeight: (index: number) =>\n                gc.current.rowHeight + (index === gc.current.rowCount - 1 ? 0 : gc.current.gutter),\n        };\n    }, [gridConfigRef]);\n\n    const displayFileIdsRef = useInstanceVariable(useSelector(selectors.getDisplayFileIds));\n    const getItemKey = useCallback(\n        (data: { columnIndex: number; rowIndex: number; data: any }) => {\n            const index = data.rowIndex * gridConfigRef.current.columnCount + data.columnIndex;\n\n            return displayFileIdsRef.current[index] ?? `loading-file-${index}`;\n        },\n        [gridConfigRef, displayFileIdsRef]\n    );\n\n    const cellRenderer = useCallback(\n        (data: { rowIndex: number; columnIndex: number; style: CSSProperties }) => {\n            const gc = gridConfigRef;\n            const index = data.rowIndex * gc.current.columnCount + data.columnIndex;\n            const fileId = displayFileIds[index];\n            if (displayFileIds[index] === undefined) return null;\n\n            const styleWithGutter: CSSProperties = {\n                ...data.style,\n                paddingRight: data.columnIndex === gc.current.columnCount - 1 ? 0 : gc.current.gutter,\n                paddingBottom: data.rowIndex === gc.current.rowCount - 1 ? 0 : gc.current.gutter,\n                boxSizing: 'border-box',\n            };\n\n            return (\n                <div style={styleWithGutter}>\n                    <SmartFileEntry fileId={fileId ?? null} displayIndex={index} fileViewMode={viewConfig.mode} />\n                </div>\n            );\n        },\n        [displayFileIds, viewConfig.mode]\n    );\n\n    const classes = useStyles();\n    const gridComponent = useMemo(() => {\n        return (\n            <VariableSizeGrid\n                ref={gridRef as any}\n                className={classes.gridContainer}\n                estimatedRowHeight={gridConfig.rowHeight + gridConfig.gutter}\n                rowHeight={sizers.getRowHeight}\n                estimatedColumnWidth={gridConfig.columnWidth + gridConfig.gutter}\n                columnWidth={sizers.getColumnWidth}\n                columnCount={gridConfig.columnCount}\n                height={height}\n                rowCount={gridConfig.rowCount}\n                width={width}\n                itemKey={getItemKey}\n            >\n                {cellRenderer}\n            </VariableSizeGrid>\n        );\n    }, [\n        classes.gridContainer,\n        gridConfig.rowHeight,\n        gridConfig.gutter,\n        gridConfig.columnWidth,\n        gridConfig.columnCount,\n        gridConfig.rowCount,\n        sizers.getRowHeight,\n        sizers.getColumnWidth,\n        height,\n        width,\n        getItemKey,\n        cellRenderer,\n    ]);\n\n    return gridComponent;\n});\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    gridContainer: {},\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { CSSProperties, useCallback, useMemo, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { FixedSizeList } from 'react-window';\n\nimport { selectFileViewConfig, selectors } from '../../redux/selectors';\nimport { FileViewMode } from '../../types/file-view.types';\nimport { useInstanceVariable } from '../../util/hooks-helpers';\nimport { makeLocalChonkyStyles } from '../../util/styles';\nimport { SmartFileEntry } from './FileEntry';\n\nexport interface FileListListProps {\n    width: number;\n    height: number;\n}\n\nexport const ListContainer: React.FC<FileListListProps> = React.memo(props => {\n    const { width, height } = props;\n\n    const viewConfig = useSelector(selectFileViewConfig);\n\n    const listRef = useRef<FixedSizeList>();\n\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\n    const displayFileIdsRef = useInstanceVariable(displayFileIds);\n    const getItemKey = useCallback(\n        (index: number) => displayFileIdsRef.current[index] ?? `loading-file-${index}`,\n        [displayFileIdsRef]\n    );\n\n    const classes = useStyles();\n    const listComponent = useMemo(() => {\n        // When entry size is null, we use List view\n        const rowRenderer = (data: { index: number; style: CSSProperties }) => {\n            return (\n                <div style={data.style}>\n                    <SmartFileEntry\n                        fileId={displayFileIds[data.index] ?? null}\n                        displayIndex={data.index}\n                        fileViewMode={FileViewMode.List}\n                    />\n                </div>\n            );\n        };\n\n        return (\n            <FixedSizeList\n                ref={listRef as any}\n                className={classes.listContainer}\n                itemSize={viewConfig.entryHeight}\n                height={height}\n                itemCount={displayFileIds.length}\n                width={width}\n                itemKey={getItemKey}\n            >\n                {rowRenderer}\n            </FixedSizeList>\n        );\n    }, [\n        classes.listContainer,\n        viewConfig.entryHeight,\n        height,\n        displayFileIds,\n        width,\n        getItemKey,\n    ]);\n\n    return listComponent;\n});\n\nconst useStyles = makeLocalChonkyStyles(theme => ({\n    listContainer: {\n        borderTop: `solid 1px ${theme.palette.divider}`,\n    },\n}));\n","import React, { UIEvent, useCallback, useContext, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { ChonkyActions } from '../../action-definitions/index';\nimport { selectCurrentFolder, selectFileViewConfig, selectors } from '../../redux/selectors';\nimport { FileViewMode } from '../../types/file-view.types';\nimport { ChonkyIconName } from '../../types/icons.types';\nimport { useFileDrop } from '../../util/dnd';\nimport { ChonkyIconContext } from '../../util/icon-helper';\nimport {\n    c, getStripeGradient, makeGlobalChonkyStyles, makeLocalChonkyStyles\n} from '../../util/styles';\nimport { FileListEmpty } from './FileListEmpty';\nimport { GridContainer } from './GridContainer';\nimport { ListContainer } from './ListContainer';\n\nexport interface FileListProps {\n    onScroll?: (e: UIEvent<HTMLDivElement>) => void;\n}\n\ninterface StyleState {\n    dndCanDrop: boolean;\n    dndIsOverCurrent: boolean;\n}\n\nexport const FileList: React.FC<FileListProps> = React.memo((props: FileListProps) => {\n    const displayFileIds = useSelector(selectors.getDisplayFileIds);\n    const viewConfig = useSelector(selectFileViewConfig);\n\n    const currentFolder = useSelector(selectCurrentFolder);\n    const { drop, dndCanDrop, dndIsOverCurrent } = useFileDrop({ file: currentFolder });\n    const styleState = useMemo<StyleState>(() => ({ dndCanDrop, dndIsOverCurrent }), [dndCanDrop, dndIsOverCurrent]);\n\n    const localClasses = useLocalStyles(styleState);\n    const classes = useStyles(viewConfig);\n    const { onScroll } = props;\n\n    // In Chonky v0.x, this field was user-configurable. In Chonky v1.x+, we hardcode\n    // this to `true` to simplify configuration. Users can just wrap Chonky in their\n    // own `div` if they want to have finer control over the height.\n    const fillParentContainer = true;\n\n    const listRenderer = useCallback(\n        ({ width, height }: { width: number; height: number }) => {\n            if (displayFileIds.length === 0) {\n                return <FileListEmpty width={width} height={viewConfig.entryHeight} />;\n            } else if (viewConfig.mode === FileViewMode.List) {\n                return <ListContainer width={width} height={height} />;\n            } else {\n                return <GridContainer width={width} height={height} />;\n            }\n        },\n        [displayFileIds, viewConfig]\n    );\n\n    const ChonkyIcon = useContext(ChonkyIconContext);\n    return (\n        <div onScroll={onScroll} ref={drop} className={c([classes.fileListWrapper, localClasses.fileListWrapper])} role=\"list\">\n            <div className={localClasses.dndDropZone}>\n                <div className={localClasses.dndDropZoneIcon}>\n                    <ChonkyIcon icon={dndCanDrop ? ChonkyIconName.dndCanDrop : ChonkyIconName.dndCannotDrop} />\n                </div>\n            </div>\n            <AutoSizer disableHeight={!fillParentContainer}>{listRenderer}</AutoSizer>\n        </div>\n    );\n});\nFileList.displayName = 'FileList';\n\nconst useLocalStyles = makeLocalChonkyStyles(theme => ({\n    fileListWrapper: {\n        minHeight: ChonkyActions.EnableGridView.fileViewConfig.entryHeight + 2,\n        background: (state: StyleState) =>\n            state.dndIsOverCurrent && state.dndCanDrop\n                ? state.dndCanDrop\n                    ? getStripeGradient(theme.dnd.fileListCanDropMaskOne, theme.dnd.fileListCanDropMaskTwo)\n                    : getStripeGradient(theme.dnd.fileListCannotDropMaskOne, theme.dnd.fileListCannotDropMaskTwo)\n                : 'none',\n    },\n    dndDropZone: {\n        display: (state: StyleState) =>\n            // When we cannot drop, we don't show an indicator at all\n            state.dndIsOverCurrent && state.dndCanDrop ? 'block' : 'none',\n        borderRadius: theme.gridFileEntry.borderRadius,\n        pointerEvents: 'none',\n        position: 'absolute',\n        height: '100%',\n        width: '100%',\n        zIndex: 2,\n    },\n    dndDropZoneIcon: {\n        backgroundColor: (state: StyleState) => (state.dndCanDrop ? theme.dnd.canDropMask : theme.dnd.cannotDropMask),\n        color: (state: StyleState) => (state.dndCanDrop ? theme.dnd.canDropColor : theme.dnd.cannotDropColor),\n        borderRadius: theme.gridFileEntry.borderRadius,\n        transform: 'translateX(-50%) translateY(-50%)',\n        position: 'absolute',\n        textAlign: 'center',\n        lineHeight: '60px',\n        fontSize: '2em',\n        left: '50%',\n        height: 60,\n        top: '50%',\n        width: 60,\n    },\n}));\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    fileListWrapper: {\n        height: '100%',\n        maxHeight: '100%',\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React, { ReactElement, useEffect, useMemo } from 'react';\nimport { useIntl } from 'react-intl';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport Menu from '@material-ui/core/Menu';\n\nimport { reduxActions } from '../../redux/reducers';\nimport { selectContextMenuConfig, selectContextMenuItems } from '../../redux/selectors';\nimport { getI18nId, I18nNamespace } from '../../util/i18n';\nimport { important, makeGlobalChonkyStyles } from '../../util/styles';\nimport { useContextMenuDismisser } from './FileContextMenu-hooks';\nimport { SmartToolbarDropdownButton } from './ToolbarDropdownButton';\n\nexport interface FileContextMenuProps {}\n\nexport const FileContextMenu: React.FC<FileContextMenuProps> = React.memo(() => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        dispatch(reduxActions.setContextMenuMounted(true));\n        return () => {\n            dispatch(reduxActions.setContextMenuMounted(false));\n        };\n    }, [dispatch]);\n\n    const intl = useIntl();\n    const browserMenuShortcutString = intl.formatMessage(\n        {\n            id: getI18nId(I18nNamespace.FileContextMenu, 'browserMenuShortcut'),\n            defaultMessage: 'Browser menu: {shortcut}',\n        },\n        { shortcut: <strong>Alt + Right Click</strong> }\n    );\n\n    const contextMenuConfig = useSelector(selectContextMenuConfig);\n    const contextMenuItems = useSelector(selectContextMenuItems);\n\n    const hideContextMenu = useContextMenuDismisser();\n    const contextMenuItemComponents = useMemo(() => {\n        const components: ReactElement[] = [];\n        for (let i = 0; i < contextMenuItems.length; ++i) {\n            const item = contextMenuItems[i];\n\n            if (typeof item === 'string') {\n                components.push(\n                    <SmartToolbarDropdownButton\n                        key={`context-menu-item-${item}`}\n                        fileActionId={item}\n                        onClickFollowUp={hideContextMenu}\n                    />\n                );\n            } else {\n                item.fileActionIds.map(id =>\n                    components.push(\n                        <SmartToolbarDropdownButton\n                            key={`context-menu-item-${item.name}-${id}`}\n                            fileActionId={id}\n                            onClickFollowUp={hideContextMenu}\n                        />\n                    )\n                );\n            }\n        }\n        return components;\n    }, [contextMenuItems, hideContextMenu]);\n\n    const anchorPosition = useMemo(\n        () => (contextMenuConfig ? { top: contextMenuConfig.mouseY, left: contextMenuConfig.mouseX } : undefined),\n        [contextMenuConfig]\n    );\n\n    const classes = useStyles();\n    return (\n        <Menu\n            elevation={2}\n            disablePortal\n            onClose={hideContextMenu}\n            transitionDuration={150}\n            open={!!contextMenuConfig}\n            anchorPosition={anchorPosition}\n            anchorReference=\"anchorPosition\"\n            classes={{ list: classes.contextMenuList }}\n        >\n            {contextMenuItemComponents}\n            <ListSubheader component=\"div\" className={classes.browserMenuTooltip}>\n                {browserMenuShortcutString}\n            </ListSubheader>\n        </Menu>\n    );\n});\n\nconst useStyles = makeGlobalChonkyStyles(() => ({\n    contextMenuList: {\n        paddingBottom: important(0),\n        paddingTop: important(0),\n    },\n    browserMenuTooltip: {\n        lineHeight: important('30px'),\n        fontSize: important('0.7em'),\n    },\n}));\n","/**\n * @author Timur Kuzhagaliyev <tim.kuzh@gmail.com>\n * @copyright 2020\n * @license MIT\n */\n\nimport React from 'react';\n\nimport { FileBrowserHandle, FileBrowserProps } from '../../types/file-browser.types';\nimport { FileList } from '../file-list/FileList';\nimport { FileBrowser } from './FileBrowser';\nimport { FileContextMenu } from './FileContextMenu';\nimport { FileNavbar } from './FileNavbar';\nimport { FileToolbar } from './FileToolbar';\n\nexport const FullFileBrowser = React.memo(\n    React.forwardRef<FileBrowserHandle, FileBrowserProps>((props, ref) => {\n        const { onScroll } = props\n        return (\n            <FileBrowser ref={ref} {...props}>\n                <FileNavbar />\n                <FileToolbar />\n                <FileList onScroll={onScroll}/>\n                <FileContextMenu/>\n            </FileBrowser>\n        );\n    })\n);\nFullFileBrowser.displayName = 'FullFileBrowser';\n","/**\n *\n */\n\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { ChonkyActions } from '../action-definitions';\nimport { FileActionData } from '../types/action-handler.types';\nimport { FileAction } from '../types/action.types';\nimport { FileArray, FileData } from '../types/file.types';\nimport { FileHelper } from '../util/file-helper';\n\nexport interface CustomFileData extends FileData {\n    parentId?: string;\n    childrenIds?: string[];\n}\nexport interface CustomFileMap<FT extends CustomFileData> {\n    [fileId: string]: FT;\n}\nexport interface FileMapParams<FT extends CustomFileData> {\n    baseFileMap: CustomFileMap<FT>;\n    initialFolderId: string;\n}\n\nexport const useFolderChain = <FT extends CustomFileData>(\n    fileMap: CustomFileMap<FT>,\n    currentFolderId: string\n): FileArray<FT> => {\n    return useMemo(() => {\n        const currentFolder = fileMap[currentFolderId];\n\n        const folderChain = [currentFolder];\n\n        let parentId = currentFolder.parentId;\n        while (parentId) {\n            const parentFile = fileMap[parentId];\n            if (parentFile) {\n                folderChain.unshift(parentFile);\n                parentId = parentFile.parentId;\n            } else {\n                break;\n            }\n        }\n\n        return folderChain;\n    }, [currentFolderId, fileMap]);\n};\n\nexport const useFiles = <FT extends CustomFileData>(\n    fileMap: CustomFileMap<FT>,\n    currentFolderId: string\n): FileArray<FT> => {\n    return useMemo(() => {\n        const currentFolder = fileMap[currentFolderId];\n        const childrenIds = currentFolder.childrenIds!;\n        const files = childrenIds.map((fileId: string) => fileMap[fileId]);\n        return files;\n    }, [currentFolderId, fileMap]);\n};\n\nexport const useFileMapMethods = <FT extends CustomFileData>(\n    baseFileMap: CustomFileMap<FT>,\n    initialFolderId: string\n) => {\n    const [fileMap, setFileMap] = useState(baseFileMap);\n    const [currentFolderId, setCurrentFolderId] = useState(initialFolderId);\n    const resetFileMap = useCallback(() => {\n        setFileMap(baseFileMap);\n        setCurrentFolderId(initialFolderId);\n    }, [baseFileMap, initialFolderId]);\n    const moveFiles = useCallback(\n        (files: FT[], source: FT, destination: FT) =>\n            setFileMap(currentFileMap => {\n                const newFileMap = { ...currentFileMap };\n                const moveFileIds = new Set(files.map(f => f.id));\n\n                // Delete files from their source folder.\n                const newSourceChildrenIds = source.childrenIds!.filter(id => !moveFileIds.has(id));\n                newFileMap[source.id] = {\n                    ...source,\n                    childrenIds: newSourceChildrenIds,\n                    childrenCount: newSourceChildrenIds.length,\n                };\n\n                // Add the files to their destination folder.\n                const newDestinationChildrenIds = [...destination.childrenIds!, ...files.map(f => f.id)];\n                newFileMap[destination.id] = {\n                    ...destination,\n                    childrenIds: newDestinationChildrenIds,\n                    childrenCount: newDestinationChildrenIds.length,\n                };\n\n                // Finally, update the parent folder ID on the files from source folder\n                // ID to the destination folder ID.\n                files.forEach(file => {\n                    newFileMap[file.id] = {\n                        ...file,\n                        parentId: destination.id,\n                    };\n                });\n\n                return newFileMap;\n            }),\n        []\n    );\n\n    const methods = useMemo(\n        () => ({\n            setFileMap,\n            setCurrentFolderId,\n            resetFileMap,\n            moveFiles,\n        }),\n        [setFileMap, setCurrentFolderId, resetFileMap, moveFiles]\n    );\n    return {\n        fileMap,\n        currentFolderId,\n        methods,\n    };\n};\nexport type FileMethods = ReturnType<typeof useFileMapMethods>['methods'];\n\nexport const useFileActionHandler = (methods: FileMethods) => {\n    return useCallback(\n        (data: FileActionData<FileAction>) => {\n            if (data.id === ChonkyActions.OpenFiles.id) {\n                const { targetFile, files } = data.payload;\n                const fileToOpen = targetFile ?? files[0];\n                if (fileToOpen && FileHelper.isDirectory(fileToOpen)) {\n                    methods.setCurrentFolderId(fileToOpen.id);\n                }\n            } else if (data.id === ChonkyActions.MoveFiles.id) {\n                methods.moveFiles(data.payload.files, data.payload.source!, data.payload.destination);\n            }\n        },\n        [methods]\n    );\n};\n\nexport const useFileMap = <FT extends CustomFileData = CustomFileData>({\n    baseFileMap,\n    initialFolderId,\n}: FileMapParams<FT>) => {\n    const { fileMap, currentFolderId, methods } = useFileMapMethods(baseFileMap, initialFolderId);\n    const folderChain = useFolderChain(fileMap, currentFolderId);\n    const files = useFiles(fileMap, currentFolderId);\n    const fileActionHandler = useFileActionHandler(methods as FileMethods);\n\n    const data = {\n        fileMap,\n        currentFolderId,\n        folderChain,\n        files,\n    };\n    return { data, methods, fileActionHandler };\n};\n"],"names":["SortOrder","UNINITIALIZED_SENTINEL","useStaticValue","factory","valueRef","useRef","current","useInstanceVariable","value","ref","useEffect","Logger","error","args","Array","_len","_key","arguments","_console","console","apply","concat","warn","_len2","_key2","_console2","debug","_len3","_key3","_console3","formatBullets","bullets","join","FileHelper","isDirectory","file","isDir","isHidden","isSymlink","isEncrypted","isClickable","isOpenable","openable","isSelectable","selectable","isDraggable","draggable","isDroppable","droppable","isDndOpenable","dndOpenable","getModDate","modDate","parseDate","maybeDate","Date","message","isNaN","getTime","getChildrenCount","childrenCount","sanitizeInputArray","mode","rawArray","sanitizedFiles","errorMessages","isArray","nonObjectFileCount","missingFieldFileCount","seenIds","Set","duplicateIds","i","length","item","id","name","has","add","push","size","repeatedIdsString","from","arrayString","itemString","errorMessageString","sanitizedArray","OptionIds","ShowHiddenFiles","ShowFoldersFirst","DarkMode","FileViewMode","ChonkyIconName","selectInstanceId","state","instanceId","selectExternalFileActionHandler","externalFileActionHandler","selectFileActionMap","fileActionMap","selectFileActionIds","fileActionIds","selectFileActionData","fileActionId","selectToolbarItems","toolbarItems","selectContextMenuItems","contextMenuItems","selectFolderChain","folderChain","selectCurrentFolder","selectParentFolder","selectFileMap","fileMap","selectCleanFileIds","cleanFileIds","selectFileData","fileId","selectHiddenFileIdMap","hiddenFileIdMap","selectHiddenFileCount","Object","keys","selectFocusSearchInput","focusSearchInput","selectSearchString","searchString","selectSelectionMap","selectionMap","selectSelectedFileIds","selectSelectionSize","selectIsFileSelected","selectSelectedFiles","map","selectSelectedFilesForAction","action","requiresSelection","getSelectedFiles","fileFilter","selectSelectedFilesForActionCount","_getSelectedFilesForA","getSelectedFilesForAction","selectDisableSelection","disableSelection","selectFileViewConfig","fileViewConfig","selectSortActionId","sortActionId","selectSortOrder","sortOrder","selectOptionMap","optionMap","selectOptionValue","optionId","selectThumbnailGenerator","thumbnailGenerator","selectDoubleClickDelay","doubleClickDelay","selectIsDnDDisabled","disableDragAndDrop","selectClearSelectionOnOutsideClick","clearSelectionOnOutsideClick","selectContextMenuMounted","contextMenuMounted","selectContextMenuConfig","contextMenuConfig","selectContextMenuTriggerFile","config","triggerFileId","_fileMap$config$trigg","getFileActionMap","getOptionMap","getFileMap","getFileIds","fileIds","getCleanFileIds","getSortActionId","getSortOrder","getSearchString","_getLastClick","lastClick","makeGetAction","fileActionSelector","createSelector","makeGetOptionValue","defaultValue","undefined","makeGetFiles","fileIdsSelector","getSortedFileIds","files","sortAction","showFolderFirst","_sortFunctions$push","prepareSortKeySelector","selector","sortFunctions","desc","sortKeySelector","ASC","sort","by","getSearcher","cleanFiles","FuzzySearch","caseSensitive","getSearchFilteredFileIds","searcher","search","f","getHiddenFileIdMap","searchFilteredFileIds","showHiddenFiles","searchFilteredFileIdsSet","forEach","selectors","getDisplayFileIds","sortedFileIds","filter","getLastClickIndex","displayFileIds","index","getFileData","getIsFileSelected","selectedFiles","filters","filteredSelectedFiles","reduce","prevFiles","thunkUpdateRawFileActions","rawFileActions","disableDefaultFileActions","dispatch","defaultActionsToAdd","_sanitizeInputArray","disabledActionIds","DefaultFileActions","fileActions","seenActionIds","addToSeen","a","wasNotSeen","fileActionArrays","duplicateFreeArrays","arr","duplicateFreeArray","_Array","mergeFileActionsArrays","EssentialFileActions","optionDefaults","option","reduxActions","setRawFileActions","setFileActionsErrorMessages","setFileActions","setOptionDefaults","thunkUpdateToolbarNContextMenuItems","_step","excludedToolbarFileActionIds","ChonkyActions","OpenParentFolder","seenToolbarGroups","seenContextMenuGroups","getGroup","itemArray","seenMap","groupName","group","_iterator","_createForOfIteratorHelperLoose","done","button","toolbar","contextMenu","updateFileActionMenuItems","thunkUpdateDefaultFileViewActionId","getState","_getState","setFileViewConfig","thunkActivateSortAction","_getState2","order","DESC","setSort","actionId","thunkDispatchFileAction","data","_dispatch","Promise","resolve","thunkRequestFileAction","payload","selectedFilesForAction","actionState","contextMenuTriggerFile","toggleOption","selectionTransform","prevSelection","hiddenFileIds","newSelection","clearSelection","selectFiles","reset","thunkApplySelectionTransform","effect","maybeEffectPromise","reduxDispatch","getReduxState","then","effectResult","triggerDispatchAfterEffect","I18nNamespace","defineFileAction","__payloadType","hotkeys","errorMessage","Error","findElementAmongAncestors","maybeElement","predicate","parentElement","getValueOrFallback","fallback","desiredType","EssentialActions","MouseClickFile","_ref","params","clickType","OpenFiles","targetFile","ctrlKey","toggleSelection","exclusive","setLastClickIndex","fileDisplayIndex","shiftKey","lastClickIndex","rangeStart","rangeEnd","_ref2","fileIdsToSelect","slice","KeyboardClickFile","_ref3","enterKey","spaceKey","StartDragNDrop","_ref4","draggedFile","EndDragNDrop","_ref5","destination","MoveFiles","_extends","ChangeSelection","icon","openParentFolder","iconOnly","_ref6","parentFolder","OpenFileContextMenu","_ref7","triggerFile","showContextMenu","mouseX","clientX","mouseY","clientY","DefaultActions","OpenSelection","openFiles","SelectAllFiles","selectAllFiles","ClearSelection","EnableListView","List","entryHeight","list","EnableCompactView","Compact","entryWidth","compact","EnableGridView","Grid","smallThumbnail","SortFilesByName","toLowerCase","SortFilesBySize","SortFilesByDate","ToggleHiddenFiles","ToggleShowFoldersFirst","FocusSearchInput","ToggleDarkMode","ExtraActions","CopyFiles","copy","CreateFolder","tooltip","folderCreate","UploadFiles","upload","DownloadFiles","download","DeleteFiles","trash","initialRootState","fileActionsErrorMessages","rawFolderChain","folderChainErrorMessages","rawFiles","filesErrorMessages","searchMode","_createSlice","createSlice","initialState","reducers","setExternalFileActionHandler","_action$payload","_action$payload2","setRawFolderChain","setRawFiles","_sanitizeInputArray2","_i","_Object$keys","selectedFileId","setSortedFileIds","setHiddenFileIds","_i2","_Object$keys2","setFocusSearchInput","setSearchString","oldValue","setSelectionDisabled","_i3","_Object$keys3","setThumbnailGenerator","setDoubleClickDelay","setDisableDragAndDrop","setClearSelectionOnOutsideClick","setContextMenuMounted","hideContextMenu","actions","rootReducer","reducer","useChonkyStore","chonkyInstanceId","store","preloadedState","configureStore","middleware","getDefaultMiddleware","serializableCheck","devTools","selectionWatcher","watch","unsubscribeCallbacks","subscribe","oldSelection","selectedFilesIds","selection","_unsubscribeCallbacks","unsubscribe","useStoreWatchers","useParamSelector","parametrizedSelector","selectorParams","useCallback","useSelector","useDTE","actionCreator","useDispatch","usePropReduxUpdate","ChonkyIconPlaceholder","React","title","defaultConfig","onFileAction","disableDragAndDropProvider","defaultSortActionId","defaultFileViewActionId","iconComponent","darkMode","i18n","getI18nId","namespace","stringId","getActionI18nId","FileActions","useLocalizedFileActionStrings","intl","useIntl","useMemo","buttonName","buttonTooltip","_action$button3","formatMessage","defaultMessage","_action$button","_action$button2","useLocalizedFileEntryStrings","formatters","useContext","ChonkyFormattersContext","fileModDateString","formatFileModDate","fileSizeString","formatFileSize","defaultFormatters","safeModDate","formatDate","dateStyle","timeStyle","_intl","sizeData","filesize","bits","output","symbol","Math","round","createContext","ChonkyIconContext","VideoExtensions","ImageExtensions","AudioExtensions","ColorsLight","ColorsDark","iconTrie","colourIndex","IconsToExtensions","license","model","database","text","archive","image","video","code","info","key","lock","music","terminal","users","linux","ubuntu","windows","rust","python","nodejs","php","git","adobe","pdf","excel","word","flash","exactTrie","ExactTrie","ignoreCase","_IconsToExtensions","pair","extensions","put","colorCode","getIconTrie","lightTheme","colors","debugRed","debugBlue","debugGreen","debugPurple","debugYellow","textActive","fontSizes","rootPrimary","margins","rootLayoutMargin","lineHeight","fontSize","buttonRadius","dnd","canDropColor","cannotDropColor","canDropMask","cannotDropMask","fileListCanDropMaskOne","fileListCanDropMaskTwo","fileListCannotDropMaskOne","fileListCannotDropMaskTwo","dragLayer","border","padding","borderRadius","fileList","desktopGridGutter","mobileGridGutter","gridFileEntry","childrenCountSize","iconColorFocused","iconSize","iconColor","fileColorTint","folderBackColorTint","folderFrontColorTint","listFileEntry","propertyFontSize","iconFontSize","iconBorderRadius","darkThemeOverride","mobileThemeOverride","useIsMobileBreakpoint","useMediaQuery","getStripeGradient","colorOne","colorTwo","makeLocalChonkyStyles","styles","createUseStyles","makeGlobalChonkyStyles","makeStyles","selectorMapping","useStyles","theme","localStyles","globalStyles","localSelector","globalSelector","classes","important","c","classnames","ChonkyBusinessLogicInner","memo","forwardRef","props","_props$files","useStore","useImperativeHandle","getFileSelection","setFileSelection","requestFileAction","useFileBrowserHandle","displayName","ChonkyBusinessLogic","useDndContextAvailable","DndContext","dragDropManager","layerStyles","position","pointerEvents","zIndex","left","top","width","height","getItemStyles","initialCursorOffset","initialFileOffset","currentFileOffset","display","transform","x","y","WebkitTransform","DnDFileListDragLayer","_useDragLayer","useDragLayer","monitor","getItem","itemType","getItemType","getInitialClientOffset","getInitialSourceClientOffset","getSourceClientOffset","isDragging","selectionSize","style","className","fileDragPreview","boxShadow","palette","divider","backgroundColor","background","color","primary","HotkeyListener","fileAction","hotkeysStr","hotkeyCallback","event","preventDefault","unbind","ChonkyPresentationLayer","children","dndDisabled","handleClickAway","target","element","tagName","hotkeyListenerComponents","dndContextAvailable","contextMenuMountedRef","altKey","fileEntryWrapperDiv","dataset","chonkyFileId","useContextMenuTrigger","ClickAwayListener","onClickAway","Box","chonkyRoot","onContextMenu","paper","touchAction","fontFamily","flexDirection","boxSizing","textAlign","webkitTouchCallout","webkitUserSelect","mozUserSelect","msUserSelect","userSelect","FileBrowser","shortid","generate","isMobileBreakpoint","muiTheme","createMuiTheme","type","combinedTheme","merge","chonkyComps","IntlProvider","locale","defaultLocale","Provider","ReduxProvider","ThemeProvider","MuiThemeProvider","DndProvider","backend","HTML5Backend","CustomVisibilityState","useFileDrop","forceDisableDrop","includeChildrenDrops","folderChainRef","_useDropIfAvailable","mockHook","useHook","useDrop","useDropIfAvailable","accept","drop","_item","canDrop","dropTarget","isOver","shallow","_item$payload","source","prohibitedFileIds","folder","collect","isOverCurrent","_useDropIfAvailable$","dndIsOver","dndIsOverCurrent","dndCanDrop","useDndHoverOpen","dndState","currentFolderRef","timeout","_currentFolderRef$cur","setTimeout","clearTimeout","TextPlaceholder","min","max","placeholderLength","maxLength","minLength","floor","random","whitespace","repeat","textPlaceholder","dangerouslySetInnerHTML","__html","@keyframes loading-placeholder","0%","opacity","50%","100%","animationName","animationIterationCount","animationTimingFunction","animationDuration","whiteSpace","overflow","maxWidth","minWidth","useFileEntryHtmlProps","role","data-test-id","data-chonky-file-id","useFileEntryState","selected","focused","iconData","getWithCheckpoints","loading","useIconData","_useThumbnailUrl","useThumbnailUrl","thumbnailUrl","thumbnailLoading","fileColor","iconSpin","useDndIcon","dndIconName","dndCannotDrop","dndIsDragging","dndDragging","_useState","useState","setThumbnailUrl","_useState2","setThumbnailLoading","loadingAttempts","loadingCancelled","useFileActionTrigger","useFileActionProps","optionValue","_action$option","actionSelectionEmpty","active","disabled","_action$button$icon","sortAsc","sortDesc","placeholder","toggleOn","toggleOff","isSortButtonAndCurrentSort","isFileViewButtonAndCurrentView","isOptionAndEnabled","customDisabled","customActive","customVisibility","Disabled","Active","ToolbarButton","externalClassName","onClick","dropdown","ChonkyIcon","iconWithText","fallbackIcon","fixedWidth","_c","baseButton","iconOnlyButton","activeButton","Button","iconDropdown","textTransform","letterSpacing","paddingBottom","paddingTop","marginRight","marginLeft","marginTop","SmartToolbarButton","triggerAction","_useFileActionProps","_useLocalizedFileActi","Hidden","FolderChainButton","first","_useFileDrop","baseBreadcrumb","disabledBreadcrumb","currentBreadcrumb","folderChainIcon","buttonContainer","dndIndicator","textDecoration","FileNavbar","folderChainItems","items","_loop","folderChainComponents","components","component","navbarWrapper","navbarContainer","Breadcrumbs","navbarBreadcrumbs","separator","upDirectoryButton","flexGrow","ToolbarDropdownButton","MenuItem","ListItemIcon","ListItemText","primaryTypographyProps","minHeight","SmartToolbarDropdownButton","onClickFollowUp","handleClick","ToolbarDropdown","_React$useState","anchor","setAnchor","currentTarget","handleClose","menuItemComponents","localizedName","FileActionGroups","Menu","autoFocus","keepMounted","elevation","anchorEl","onClose","open","Boolean","transitionDuration","dropdownList","ToolbarInfo","hiddenCount","fileCountString","Toolbar","fileCount","selectedString","hiddenString","infoContainer","Typography","infoText","variant","extraInfoSpan","selectionSizeText","hiddenCountText","ToolbarSearch","searchPlaceholderString","searchInputRef","reduxSearchString","localSearchString","setLocalSearchString","debouncedLocalSearchString","delay","debouncedValue","setDebouncedValue","handler","useDebounce","showLoadingIndicator","setShowLoadingIndicator","focus","handleChange","handleKeyUp","blur","TextField","searchFieldContainer","onChange","inputRef","InputProps","onKeyUp","startAdornment","InputAdornment","searchIcon","spin","searchFieldInput","inputProps","searchFieldInputInner","margin","paddingLeft","-webkit-appearance","FileToolbar","toolbarItemComponents","toolbarWrapper","toolbarContainer","toolbarLeft","toolbarRight","flexWrap","toolbarLeftFiller","FileListEmpty","emptyString","FileList","fileListEmpty","fileListEmptyContent","folderOpen","ClickableWrapper","WrapperTag","wrapperTag","passthroughProps","onSingleClick","onDoubleClick","onKeyboardClick","setFocused","counter","clickCount","clickTimeout","mouseClickEvent","metaKey","useClickHandler","handleKeyDown","keyboardClickEvent","nativeEvent","stopPropagation","useKeyDownHandler","compProps","onFocus","onBlur","onKeyDown","tabIndex","mergedProps","FileEntryName","modifierIconComponents","modifierIcons","hidden","symlink","useModifierIconComponents","fileNameComponent","_file$ext","parts","extension","ext","split","substr","useFileNameComponent","hint","paddingRight","CompactEntry","entryState","_useLocalizedFileEntr","fileEntryHtmlProps","listFileEntryIcon","listFileEntryDescription","listFileEntryName","listFileEntryProperties","listFileEntryProperty","alignItems","DnDFileEntry","_useFileEntryDnD","_useFileDrag","fileRef","getDndStartPayload","reduxState","sourceInstanceId","canDrag","onDragStart","onDragEnd","dropResult","getDropResult","dropEffect","_useDragIfAvailable","useDrag","useDragIfAvailable","begin","end","drag","preview","getEmptyImage","captureDraggingState","useFileDrag","useFileEntryDnD","fillParent","FileThumbnail","thumbnailStyle","backgroundImage","fileThumbnail","backgroundRepeat","backgroundPosition","backgroundSize","GridEntryDndIndicator","&:before","borderBottom","borderLeft","content","GridEntryPreviewFolder","folderClasses","useFolderStyles","fileClasses","useFileStyles","commonClasses","useCommonEntryStyles","previewFile","folderBackSideMid","folderBackSideTop","folderFrontSide","fileIcon","selectionIndicator","thumbnail","borderTopLeftRadius","borderTopRightRadius","right","&:after","borderRightColor","borderTopColor","borderBottomColor","borderLeftColor","borderWidth","borderStyle","bottom","shadows","GridEntryPreviewFile","_c2","focusIndicator","GridEntry","useFileEntryStyles","entryClassName","gridFileEntryPreview","gridFileEntryNameContainer","gridFileEntryName","wordBreak","ListEntry","styleState","listFileEntrySelection","textOverflow","flex","disabledDndState","SmartFileEntry","EntryComponent","displayIndex","fileViewMode","fileClickHandlers","onMouseClick","useFileClickHandlers","clickableWrapperProps","fileEntryClickableWrapper","fileEntryProps","outline","getGridConfig","viewConfig","columnCount","columnWidth","gutter","scrollbar","window","orientation","navigator","userAgent","indexOf","rowCount","ceil","rowHeight","GridContainer","gridRef","gridConfig","setGridConfig","gridConfigRef","oldConf","newConf","resetAfterRowIndex","resetAfterColumnIndex","resetAfterIndices","columnIndex","rowIndex","sizers","gc","getColumnWidth","getRowHeight","displayFileIdsRef","getItemKey","_displayFileIdsRef$cu","cellRenderer","styleWithGutter","VariableSizeGrid","gridContainer","estimatedRowHeight","estimatedColumnWidth","itemKey","ListContainer","listRef","FixedSizeList","listContainer","itemSize","itemCount","_displayFileIds$data$","borderTop","currentFolder","localClasses","useLocalStyles","onScroll","listRenderer","fileListWrapper","dndDropZone","dndDropZoneIcon","AutoSizer","disableHeight","maxHeight","FileContextMenu","browserMenuShortcutString","shortcut","useContextMenuDismisser","contextMenuItemComponents","anchorPosition","disablePortal","anchorReference","contextMenuList","ListSubheader","browserMenuTooltip","FullFileBrowser","useFolderChain","currentFolderId","parentId","parentFile","unshift","useFiles","childrenIds","useFileMapMethods","baseFileMap","initialFolderId","setFileMap","setCurrentFolderId","resetFileMap","moveFiles","currentFileMap","newFileMap","moveFileIds","newSourceChildrenIds","newDestinationChildrenIds","methods","useFileActionHandler","_data$payload","fileToOpen","_useFileMapMethods","fileActionHandler"],"mappings":"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AgBL,EAAWM,eAAejB,EAAMvc,MAErD,CAACA,EAAMkd,EAAYX,KAGbkB,GAAsC,CAC/CH,kBAAmB,SACff,EACAvc,GAEA,IAAM0d,EAAc5d,EAAWkB,WAAWhB,GAC1C,OAAI0d,EACOnB,EAAKoB,WAAWD,EAAa,CAChCE,UAAW,SACXC,UAAW,UAGR,MAGfL,eAAgB,SAACM,EAAkB9d,GAC/B,IAAKA,GAA6B,iBAAdA,EAAK6C,KAAmB,OAAO,KAEnD,IACMkb,EAAWC,EADJhe,EAAK6C,KACc,CAAEob,MAAM,EAAOC,OAAQ,WACvD,MAAwB,MAApBH,EAASI,OACCC,KAAKC,MAAMN,EAAS1f,MAAQ,IAAM,UACjB,OAApB0f,EAASI,OACNC,KAAKC,MAAMN,EAAS1f,WAAU0f,EAASI,OAE3CJ,EAAS1f,UAAS0f,EAASI,SAIhCf,GAA0BkB,gBAAcb,Ia5FxCc,GAAoBD,gBAA4ChD,IAEhEkD,GAA4B,CACrC,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,QACA,MACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,KACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,OACA,OACA,OACA,OACA,OACA,MACA,MACA,OACA,KACA,MACA,MACA,OAESC,GAA4B,CACrC,MACA,OACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,KACA,MACA,OACA,QACA,OACA,QACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,OACA,MACA,OACA,MACA,OACA,MACA,MACA,MACA,MACA,OAESC,GAA4B,CACrC,OACA,MACA,MACA,MACA,OACA,OACA,KACA,MACA,MACA,MACA,QACA,YACA,YACA,YACA,MACA,OACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,OACA,MACA,MACA,OACA,OACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OACA,MACA,MACA,MACA,MACA,OACA,MACA,MAESC,GAAwB,CACjC,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAESC,GAAuB,CAChC,OACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAoEEC,GAjEc,WAgDhB,IA/CA,IAAIC,EAAc,EAGZC,EAAoB,CAEtB,CAACtb,uBAAeub,QAAS,CAAC,YAC1B,CAACvb,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"}